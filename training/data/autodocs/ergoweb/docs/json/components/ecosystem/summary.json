{
  "folderName": "ecosystem",
  "folderPath": ".autodoc/docs/json/components/ecosystem",
  "url": "https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/ecosystem",
  "files": [
    {
      "fileName": "ChangingTheWorld.tsx",
      "filePath": "components/ecosystem/ChangingTheWorld.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/ChangingTheWorld.tsx",
      "summary": "The code is a React component that renders a Swiper slideshow of projects that are aimed at changing the world. The component takes in an optional prop called `chagingTheWorldProjects`, which is an array of objects that contain information about each project. \n\nThe Swiper component is imported from the `swiper/react` library, which is a React wrapper for the Swiper.js library. The Swiper component is used to render the slideshow, and the `Pagination` module is imported and passed as a prop to the Swiper component to enable pagination.\n\nEach project is rendered as a `SwiperSlide` component, which contains a `div` that displays the project's image, subtitle, title, description, and a button that links to the project's URL. The image is displayed using the `next/image` component, which optimizes the image for performance and lazy-loads it. \n\nThe `getIconComponentByName` function is imported from the `utils/icons-map` file and is used to render an arrow icon next to the button. The function takes in the name of the icon and returns the corresponding SVG icon component.\n\nOverall, this component is used to display a slideshow of projects that are aimed at changing the world. It is flexible and can be used in various parts of the larger project, such as a homepage or a dedicated projects page. The component can be customized by passing in different projects as props, and the Swiper.js library provides many options for customizing the slideshow's behavior and appearance. \n\nExample usage:\n\n```\nimport ChangingTheWorld from './ChangingTheWorld';\n\nconst projects = [\n  {\n    title: 'Project 1',\n    subtitle: 'Subtitle 1',\n    description: 'Description 1',\n    button_text: 'Learn More',\n    url: 'https://example.com/project1',\n    attributes: {\n      image: {\n        data: {\n          attributes: {\n            url: 'https://example.com/image1.jpg',\n            width: 800,\n            height: 600\n          }\n        }\n      }\n    }\n  },\n  {\n    title: 'Project 2',\n    subtitle: 'Subtitle 2',\n    description: 'Description 2',\n    button_text: 'Learn More',\n    url: 'https://example.com/project2',\n    attributes: {\n      image: {\n        data: null\n      }\n    }\n  }\n];\n\nfunction App() {\n  return (\n    <div>\n      <ChangingTheWorld chagingTheWorldProjects={projects} />\n    </div>\n  );\n}\n```",
      "questions": "1. What is the purpose of the `getIconComponentByName` function imported from `../../utils/icons-map`?\n- The smart developer might wonder what the `getIconComponentByName` function does and how it is used in the code. This function likely returns an icon component based on the name passed to it as an argument.\n\n2. What is the `Swiper` component and how does it work?\n- The developer might be curious about the `Swiper` component and how it is used in this code. It appears to be a component from the `swiper/react` library that allows for the creation of a slideshow with pagination.\n\n3. What is the purpose of the `modules` prop passed to the `Swiper` component?\n- The developer might wonder what the `modules` prop does and how it affects the behavior of the `Swiper` component. It appears to be an array of modules that can be used to extend the functionality of the `Swiper` component, in this case including the `Pagination` module."
    },
    {
      "fileName": "DApps.tsx",
      "filePath": "components/ecosystem/DApps.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/DApps.tsx",
      "summary": "The `DApps` component is a React functional component that renders a list of decentralized applications (DApps) on a web page. The component takes an optional `apps` prop, which is an array of objects representing the DApps to be displayed. Each DApp object contains properties such as `title`, `description`, `url`, and `image`. The component uses the `map` method to iterate over the `apps` array and render each DApp as a card with its title, image, and description.\n\nThe component also renders a header with the text \"DApps\" and a button that links to an external website. The button text is obtained from the `intl` object, which is provided by the `react-intl` library and allows for internationalization of the text. The button component is imported from a local `Button` module.\n\nThe image for each DApp is rendered using the `next/image` component, which is a third-party library that optimizes images for the web. If an image is not available for a DApp, a default image is displayed instead. The `Image` component takes the `src`, `width`, `height`, and `alt` attributes as props.\n\nThe component uses Tailwind CSS classes to style the layout and appearance of the DApp cards and the header. The `max-w-[1300px]` class limits the width of the component to 1300 pixels, while the `-mt-60` and `lg:-mt-[600px]` classes adjust the margin-top property to position the component on the page. The `no-scrollbar` class hides the horizontal scrollbar that appears when the DApps overflow the container.\n\nOverall, the `DApps` component provides a reusable and customizable way to display a list of DApps on a web page. It can be used in conjunction with other components and modules to build a larger decentralized application platform.",
      "questions": "1. What is the purpose of the `DApps` component?\n   - The `DApps` component is responsible for rendering a list of DApps (decentralized applications) along with their images, titles, and descriptions.\n2. What external libraries or frameworks are being used in this code?\n   - The code is using the `next/image` library for image optimization and the `react-intl` library for internationalization.\n3. What is the significance of the `apps` prop and how is it used in the component?\n   - The `apps` prop is an optional array of objects that contain information about each DApp to be rendered. It is used in a `.map()` function to dynamically render each DApp's image, title, and description."
    },
    {
      "fileName": "EcosystemHero.tsx",
      "filePath": "components/ecosystem/EcosystemHero.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/EcosystemHero.tsx",
      "summary": "This code defines a React component called `EcosystemHero` that renders a hero section for the Ergoweb project's ecosystem page. The component imports two modules: `Image` from the `next/image` package and `FormattedMessage` from the `react-intl` package.\n\nThe `EcosystemHero` component returns a JSX element that contains two `Image` components and a `h1` element. The `h1` element displays the title \"Ecosystem\" using the `FormattedMessage` component, which allows for internationalization of the text. The `Image` components display different versions of the Ergoweb logo depending on whether the user is in light or dark mode.\n\nThe `EcosystemHero` component is likely used as a part of a larger page or layout component that displays information about the Ergoweb ecosystem. The hero section is typically the first thing a user sees when visiting a page, so it serves as an introduction to the content on the page. The use of the `FormattedMessage` component suggests that the Ergoweb project is designed to be accessible to users in multiple languages.\n\nHere is an example of how the `EcosystemHero` component might be used in a larger page component:\n\n```\nimport EcosystemHero from './EcosystemHero';\n\nexport default function EcosystemPage() {\n  return (\n    <div>\n      <EcosystemHero />\n      <h2>What is the Ergoweb Ecosystem?</h2>\n      <p>...</p>\n      <h2>How to Get Involved</h2>\n      <p>...</p>\n    </div>\n  );\n}\n```\n\nIn this example, the `EcosystemPage` component renders the `EcosystemHero` component at the top of the page, followed by some explanatory text about the Ergoweb ecosystem.",
      "questions": "1. What is the purpose of the `Image` and `FormattedMessage` imports?\n- The `Image` import is used to display images on the page, while the `FormattedMessage` import is used to display localized messages based on the user's language preference.\n\n2. What is the significance of the `EcosystemHero` function?\n- The `EcosystemHero` function is a React component that renders a hero section for the Ergoweb project's ecosystem page.\n\n3. What is the difference between the `ecosystem-hero-gradient` and `ecosystem-light` classes?\n- The `ecosystem-hero-gradient` class is used to display a gradient background for the hero section in dark mode, while the `ecosystem-light` class is used to display a light background for the hero section in light mode."
    },
    {
      "fileName": "Favorites.tsx",
      "filePath": "components/ecosystem/Favorites.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/Favorites.tsx",
      "summary": "The `Favorites` component is a React component that displays a list of favorite posts and information about the ErgoRaffle crowdfunding service. The component receives a `favorites` prop, which is an array of post objects. Each post object contains attributes such as `title`, `subtitle`, `description`, `image`, `url`, and `button_text`. The component uses the `Swiper` component from the `swiper/react` library to display the list of posts in a carousel format. The `Swiper` component is also configured to display pagination bullets at the bottom of the carousel.\n\nThe component also displays information about the ErgoRaffle service, including an image of the ErgoRaffle logo, a description of the service, and a button that links to the ErgoRaffle website. The component uses the `useIntl` hook from the `react-intl` library to format the text of the button based on the user's locale.\n\nThe component uses several other components and utilities, including the `Button` component, the `Image` component from the `next/image` library, and the `getIconComponentByName` function from the `../../utils/icons-map` module.\n\nOverall, the `Favorites` component provides a user-friendly interface for displaying a list of favorite posts and promoting the ErgoRaffle crowdfunding service. It is designed to be easily customizable and extensible, allowing developers to add new features and functionality as needed.",
      "questions": "1. What is the purpose of the `Favorites` component?\n- The `Favorites` component displays a section of favorite posts, including an introduction to the ErgoRaffle crowdfunding service and a Swiper slideshow of individual posts.\n\n2. What is the role of the `useIntl` hook in this code?\n- The `useIntl` hook is used to format the text for the `button1Text` variable based on the user's locale.\n\n3. What is the purpose of the `getIconComponentByName` function?\n- The `getIconComponentByName` function is used to retrieve an icon component based on its name, which is used to display an arrow icon next to the `EXPLORE ERGO RAFFLE` button."
    },
    {
      "fileName": "FeaturesAndProjects.tsx",
      "filePath": "components/ecosystem/FeaturesAndProjects.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/FeaturesAndProjects.tsx",
      "summary": "The code defines a React component called `FeaturesAndProjects` that displays a list of projects with their images, titles, descriptions, and links. The component takes an optional `projects` prop, which is an array of objects representing each project. Each project object has several attributes, including `image`, `group`, `title`, `description`, `url`, and `button_text`.\n\nThe component uses the `next/image` library to display the project images, which are fetched from the `image` attribute of each project object. The images are displayed with a fixed aspect ratio and their dimensions are determined by the `width` and `height` attributes of the `image` attribute.\n\nThe component uses several helper functions to adjust the layout of each project card based on its index in the `projects` array. The `adjustCardPosition` function returns a string of CSS classes that adjust the row and column spans of the project card in a CSS grid layout. The `adjustCardText` and `adjustCardPhoto` functions return a string of CSS classes that adjust the height and margin of the text and photo sections of the project card, respectively.\n\nThe component renders a heading and a grid of project cards using the `map` method to iterate over the `projects` array. Each project card is a `div` element with a fixed width and a set of CSS classes that adjust its layout based on its index. The card contains an `Image` component, a title, a description, and a link to the project URL. The `Image` component displays the project image with the appropriate dimensions and aspect ratio.\n\nOverall, this component provides a reusable way to display a list of projects with their images and details in a responsive and visually appealing manner. It can be used in various parts of the `ergoweb` project, such as the homepage or a dedicated projects page.",
      "questions": "1. What is the purpose of the `adjustCardPosition`, `adjustCardText`, and `adjustCardPhoto` functions?\n- These functions adjust the styling of the cards displayed for each project based on their index in the `props.projects` array.\n\n2. What is the purpose of the `Image` import from `next/image`?\n- This import is used to display images for each project, with the `src`, `width`, and `height` attributes being passed in as props.\n\n3. What is the purpose of the `FeaturesAndProjects` component?\n- This component displays a list of projects with their associated images, titles, descriptions, and links. The styling of each project card is adjusted based on its index in the `props.projects` array."
    },
    {
      "fileName": "Roadmap.tsx",
      "filePath": "components/ecosystem/Roadmap.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/Roadmap.tsx",
      "summary": "The `Roadmap` component is responsible for rendering a roadmap view of the Ergo project. It imports several dependencies including `lodash`, `react-intl`, `Button`, and `getIconComponentByName`. The component takes in a single prop `roadmapItems` which is an array of objects containing information about the roadmap items. \n\nThe `processRoadmap` function takes in the `roadmap` and `sectionName` as arguments and returns an array of roadmap items that belong to the specified section. It first sorts the roadmap items by their `order` attribute and then filters them by their `group` attribute which is equal to the `sectionName` argument.\n\nThe `RoadmapItem` component takes in several props including `title`, `url`, `description`, and `status`. It renders a single roadmap item with an icon, title, and description. If the `url` prop is not null, it renders the item as a link. The icon displayed is determined by the `status` prop which can be one of three values: `completed`, `in_progress`, or `planned`. \n\nThe `Roadmap` component renders the entire roadmap view. It first defines an array of `sections` which contains the names and tags of each section. It then renders the title and description of the roadmap along with a button to view more information. Finally, it renders each section of the roadmap by mapping over the `sections` array and calling the `processRoadmap` function to filter the roadmap items by section. It then maps over the resulting array and renders each item using the `RoadmapItem` component.\n\nOverall, the `Roadmap` component provides a high-level view of the Ergo project roadmap and allows users to easily navigate through the different sections and items. It is a key component in providing transparency and communication to the Ergo community about the project's progress and plans.",
      "questions": "1. What is the purpose of the `processRoadmap` function?\n- The `processRoadmap` function takes in a roadmap and a section name, sorts the data in the roadmap by order, filters the data by the specified section name, and returns the resulting data.\n\n2. What is the significance of the `RoadmapItem` component?\n- The `RoadmapItem` component is responsible for rendering a single item in the roadmap, including its title, description, status, and icon.\n\n3. What is the purpose of the `sections` array?\n- The `sections` array contains objects representing different sections of the roadmap, each with a name and a tag. These sections are used to filter the roadmap data and display it in separate sections on the page."
    },
    {
      "fileName": "Wiki.tsx",
      "filePath": "components/ecosystem/Wiki.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/ecosystem/Wiki.tsx",
      "summary": "The code is a React component that renders a section of the Ergoweb project's website called \"Wiki\". The purpose of this component is to display information about the Ergonaut community-run wiki, which provides information on the underlying technical details of the Ergo blockchain in easy-to-understand language for non-technical people. \n\nThe component is composed of HTML and CSS, with some dynamic elements provided by the React framework. The HTML is structured using divs and paragraphs, and the CSS is used to style the elements. The dynamic elements are provided by the `Image` and `Button` components imported from Next.js and a custom `Button` component defined in another file. \n\nThe `Image` component is used to display an image of the Ergonaut mascot standing on a moon. The `Button` components are used to provide links to the Ergonaut wiki and to encourage users to explore and learn more about the Ergo blockchain. \n\nThe component is responsive, with different layouts for desktop and mobile devices. On desktop devices, the component displays a large heading, a paragraph of text, and an image of the Ergonaut mascot. On mobile devices, the component displays a smaller heading, a shorter paragraph of text, and a button to learn more about the Ergonaut wiki. \n\nOverall, this component serves as an introduction to the Ergonaut wiki and encourages users to explore and learn more about the Ergo blockchain. It is an important part of the Ergoweb project's website, providing users with valuable information and resources. \n\nExample usage: \n\nTo use this component in a React project, import it from the file where it is located: \n\n```\nimport Wiki from './path/to/Wiki';\n```\n\nThen, use the component in the JSX of another component: \n\n```\nfunction App() {\n  return (\n    <div>\n      <Wiki />\n    </div>\n  );\n}\n```",
      "questions": "1. What is the purpose of the `Image` and `Button` imports?\n- The `Image` import is used to display an image of the Ergo mascot, while the `Button` import is used to create clickable buttons with customizable properties.\n\n2. What is the significance of the `ergonaut-card` class?\n- The `ergonaut-card` class is used to style a specific section of the webpage, which includes an image and text describing the Ergo blockchain and its community-run wiki.\n\n3. What is the purpose of the `customClass` property in the `Button` component?\n- The `customClass` property is used to add a custom CSS class to the `Button` component, which can be used to further customize its appearance or behavior. In this case, it is used to add a negative margin to the button."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/components/ecosystem` folder contains several React components that are part of the Ergoweb project. These components are focused on displaying various aspects of the Ergo ecosystem, such as projects, decentralized applications (DApps), and the Ergonaut community-run wiki.\n\nThe `ChangingTheWorld.tsx` component renders a Swiper slideshow of projects aimed at changing the world. It takes an optional `chagingTheWorldProjects` prop, which is an array of objects containing information about each project. This component can be used in various parts of the project, such as a homepage or a dedicated projects page.\n\n```jsx\nimport ChangingTheWorld from './ChangingTheWorld';\n\nconst projects = [\n  // ...\n];\n\nfunction App() {\n  return (\n    <div>\n      <ChangingTheWorld chagingTheWorldProjects={projects} />\n    </div>\n  );\n}\n```\n\nThe `DApps.tsx` component renders a list of decentralized applications (DApps) on a web page. It takes an optional `apps` prop, which is an array of objects representing the DApps to be displayed. This component can be used in conjunction with other components to build a larger decentralized application platform.\n\nThe `EcosystemHero.tsx` component renders a hero section for the Ergoweb project's ecosystem page. It is likely used as a part of a larger page or layout component that displays information about the Ergoweb ecosystem.\n\n```jsx\nimport EcosystemHero from './EcosystemHero';\n\nexport default function EcosystemPage() {\n  return (\n    <div>\n      <EcosystemHero />\n      {/* ... */}\n    </div>\n  );\n}\n```\n\nThe `Favorites.tsx` component displays a list of favorite posts and information about the ErgoRaffle crowdfunding service. It receives a `favorites` prop, which is an array of post objects. This component provides a user-friendly interface for displaying a list of favorite posts and promoting the ErgoRaffle service.\n\nThe `FeaturesAndProjects.tsx` component displays a list of projects with their images, titles, descriptions, and links. It takes an optional `projects` prop, which is an array of objects representing each project. This component can be used in various parts of the Ergoweb project, such as the homepage or a dedicated projects page.\n\nThe `Roadmap.tsx` component renders a roadmap view of the Ergo project. It takes a single prop `roadmapItems`, which is an array of objects containing information about the roadmap items. This component provides a high-level view of the Ergo project roadmap and allows users to easily navigate through the different sections and items.\n\nThe `Wiki.tsx` component renders a section of the Ergoweb project's website called \"Wiki\". It displays information about the Ergonaut community-run wiki and encourages users to explore and learn more about the Ergo blockchain.\n\n```jsx\nimport Wiki from './path/to/Wiki';\n\nfunction App() {\n  return (\n    <div>\n      <Wiki />\n    </div>\n  );\n}\n```\n\nThese components work together to create a comprehensive view of the Ergo ecosystem, providing users with valuable information and resources. They can be used in various parts of the Ergoweb project to build a larger application that showcases the different aspects of the Ergo ecosystem.",
  "questions": ""
}