{
  "fileName": "ReemissionContracts.scala",
  "filePath": "ergo-wallet/src/main/scala/org/ergoplatform/contracts/ReemissionContracts.scala",
  "url": "https://github.com/ergoplatform/ergo/ergo-wallet/src/main/scala/org/ergoplatform/contracts/ReemissionContracts.scala",
  "summary": "The `ReemissionContracts` trait is a container for re-emission related contracts. It contains two contracts: `payToReemission` and `reemissionBoxProp`. The `payToReemission` contract is used to lock boxes that miners pay to the re-emission contract according to EIP-27. The `reemissionBoxProp` contract is used to lock boxes that contain re-emission rewards.\n\nThe `reemissionRewardPerBlock` variable specifies how much a miner can take per block from the re-emission contract. The `reemissionNftIdBytes` method returns the ID of the NFT token associated with the re-emission contract. The `reemissionStartHeight` method returns the height when re-emission starts.\n\nThe `extractTokens` method is a helper method that extracts tokens from a box. The `v1Tree` method is a helper method that produces a v1 tree from a SigmaPropValue instance (i.e. root node of AST).\n\nThe `payToReemission` contract is used to merge multiple boxes locked by this contract with the re-emission box. It is locked by a script that checks that the first (re-emission) output contains the re-emission NFT (in the first position).\n\nThe `reemissionBoxProp` contract is used to lock boxes that contain re-emission rewards. It is locked by a script that checks that the first (re-emission) output contains the re-emission NFT (in the first position), the miner's output has a script which is time-locking reward for miner's pubkey, the re-emission output's height is the same as block height, the re-emission output's height is greater than re-emission input, the height is greater than end of emission (>= 2,080,800 for the mainnet), the re-emission contract is preserved, and the miner's reward condition is met. When the re-emission contract box is merged with other boxes, the script checks that the height is correct, the miner's output is correct, the height is greater than end of emission, the height is increased, the coins issued are correct, and the fee is correct.\n\nOverall, the `ReemissionContracts` trait provides the contracts necessary for re-emission rewards in the Ergo platform. These contracts can be used in the larger project to incentivize miners and promote network security.",
  "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code defines contracts related to re-emission, including a contract for miners to pay to the re-emission contract and a re-emission contract itself. These contracts allow for the distribution of rewards to miners and the management of re-emission tokens.\n\n2. What is the significance of the `reemissionNftIdBytes` and `reemissionStartHeight` variables?\n- `reemissionNftIdBytes` is the ID of the NFT token associated with the re-emission contract, while `reemissionStartHeight` is the height when re-emission starts. These variables are important for ensuring that the correct tokens are being used and that the re-emission process is initiated at the correct time.\n\n3. What are some of the conditions that must be met for the re-emission contract to be valid?\n- Some of the conditions that must be met for the re-emission contract to be valid include: the re-emission output's height must be the same as the block height, the height must be greater than the end of emission, the re-emission contract must be preserved, and the miner's reward condition must be met. Additionally, there are conditions related to merging boxes and the amount of fees that can be charged."
}