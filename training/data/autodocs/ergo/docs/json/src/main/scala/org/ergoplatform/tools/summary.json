{
  "folderName": "tools",
  "folderPath": ".autodoc/docs/json/src/main/scala/org/ergoplatform/tools",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/scala/org/ergoplatform/tools",
  "files": [
    {
      "fileName": "CoinEmissionPrinter.scala",
      "filePath": "src/main/scala/org/ergoplatform/tools/CoinEmissionPrinter.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/tools/CoinEmissionPrinter.scala",
      "summary": "The `CoinEmissionPrinter` object is a tool for printing information about the coin emission schedule of the Ergo blockchain. It imports the `EmissionRules` and `MonetarySettings` classes from the `org.ergoplatform.mining.emission` and `org.ergoplatform.settings` packages, respectively. \n\nThe `MonetarySettings` class is used to define the monetary policy of the Ergo blockchain. It takes six parameters: `coinsInOneErgo`, `blocksPerHour`, `genesisTimestamp`, `epochLength`, `minersRewardDelay`, and `foundersRewardDelay`. These parameters are used to calculate the total coin supply and the block rewards for miners and the foundation. \n\nThe `EmissionRules` class is used to calculate the block rewards for miners and the foundation at a given block height. It takes a `MonetarySettings` object as a parameter and uses it to calculate the block rewards based on the Ergo monetary policy. \n\nThe `CoinEmissionPrinter` object defines two lazy values: `TotalSupply` and `FirstYearSupply`. `TotalSupply` calculates the total coin supply of the Ergo blockchain by summing the block rewards for all blocks up to the total number of blocks defined in the `EmissionRules` object. `FirstYearSupply` calculates the total coin supply for the first year of the Ergo blockchain by summing the block rewards for the first `blocksPerYear` blocks. \n\nThe `CoinEmissionPrinter` object also defines a `loop` function that takes three parameters: `height`, `totalMinersReward`, and `totalFoundationReward`. The `loop` function is a tail-recursive function that iterates over all blocks up to the total number of blocks defined in the `EmissionRules` object. For each block, it calculates the block rewards for miners and the foundation using the `minersRewardAtHeight` and `foundationRewardAtHeight` methods of the `EmissionRules` object. It then adds these rewards to the `totalMinersReward` and `totalFoundationReward` parameters and prints information about the block rewards and the total coin supply at intervals of 100,000 blocks. \n\nThe `CoinEmissionPrinter` object prints information about the Ergo coin emission schedule to the console. It prints the total number of blocks, the number of blocks per year, the end rate of coin emission, the first year supply of coins, and the total coin supply. It also prints a table that shows the age of the blockchain in years, the number of foundation coins, the number of miners coins, the number of miners coins per block, and the total coin supply at intervals of 100,000 blocks. \n\nThis tool can be used to monitor the coin emission schedule of the Ergo blockchain and to calculate the expected block rewards for miners and the foundation at a given block height.",
      "questions": "1. What is the purpose of the `CoinEmissionPrinter` object?\n- The `CoinEmissionPrinter` object is used to print information about the coin emission schedule of the Ergo platform.\n\n2. What is the significance of the `MonetarySettings` object?\n- The `MonetarySettings` object contains various parameters that are used to calculate the coin emission schedule, such as the number of blocks per year and the total supply of coins.\n\n3. What is the purpose of the `loop` function?\n- The `loop` function is used to iterate over the blocks in the coin emission schedule and calculate the total amount of coins issued to miners and the foundation at each block height. The function also prints out information about the coin emission schedule at regular intervals."
    },
    {
      "fileName": "ValidationRulesPrinter.scala",
      "filePath": "src/main/scala/org/ergoplatform/tools/ValidationRulesPrinter.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/tools/ValidationRulesPrinter.scala",
      "summary": "The `ValidationRulesPrinter` object is a tool used to print out the validation rules for transactions, headers, block sections, and block application to state validation in the Ergo platform. The purpose of this tool is to provide a way for developers to easily view and understand the validation rules that are in place for each of these components. \n\nThe tool imports several classes from the Ergo platform, including `NetworkObjectTypeId` and `ValidationRules`, as well as classes from the Scorex library, including `InvalidModifier` and `ScorexLogging`. \n\nThe `ValidationRulesPrinter` object contains a `main` method that prints out the validation rules for each component. It first retrieves the validation rules from the `ValidationRules` object and initializes an empty modifier ID. It then prints out a header for the transaction validation rules. \n\nThe tool then iterates through each validation rule and checks if it is a fatal error. If it is, the tool prints out the rule ID, the validation rule itself, whether it is soft-forkable, whether it is active, and the affected modifiers. \n\nThe tool also includes several helper methods, including `printHeader`, which prints out the header for each component's validation rules, and `boolToLatex`, which converts a boolean value to a LaTeX checkmark or xmark symbol. \n\nOverall, the `ValidationRulesPrinter` object is a useful tool for developers working on the Ergo platform to easily view and understand the validation rules in place for each component.",
      "questions": "1. What is the purpose of this code?\n- This code is used to print out validation rules for different types of objects in the Ergo blockchain.\n\n2. What external libraries or dependencies does this code use?\n- This code uses libraries from the Ergo and Scorex projects, specifically `org.ergoplatform.modifiers.NetworkObjectTypeId`, `org.ergoplatform.settings.ValidationRules`, `scorex.core.validation.InvalidModifier`, `scorex.util.ModifierId`, `scorex.util.ScorexLogging`, and `scorex.util.bytesToId`.\n\n3. What is the output of this code?\n- The output of this code is a LaTeX-formatted table that lists the validation rules for different types of objects in the Ergo blockchain, including their IDs, the validation rules themselves, whether they are soft-forkable and active, and which modifiers they affect."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/src/main/scala/org/ergoplatform/tools` folder contains two Scala files, `CoinEmissionPrinter.scala` and `ValidationRulesPrinter.scala`, which provide tools for printing information about the Ergo blockchain's coin emission schedule and validation rules, respectively.\n\n`CoinEmissionPrinter.scala` is a tool that prints information about the coin emission schedule of the Ergo blockchain. It calculates the total coin supply and block rewards for miners and the foundation using the `EmissionRules` and `MonetarySettings` classes. The `CoinEmissionPrinter` object defines two lazy values, `TotalSupply` and `FirstYearSupply`, which calculate the total coin supply of the Ergo blockchain and the total coin supply for the first year, respectively. The `loop` function iterates over all blocks up to the total number of blocks defined in the `EmissionRules` object, calculating block rewards for miners and the foundation, and printing information about the block rewards and the total coin supply at intervals of 100,000 blocks. This tool can be used to monitor the coin emission schedule of the Ergo blockchain and to calculate the expected block rewards for miners and the foundation at a given block height.\n\nExample usage:\n\n```scala\nobject CoinEmissionPrinterApp extends App {\n  CoinEmissionPrinter.printEmissionSchedule()\n}\n```\n\n`ValidationRulesPrinter.scala` is a tool used to print out the validation rules for transactions, headers, block sections, and block application to state validation in the Ergo platform. The purpose of this tool is to provide a way for developers to easily view and understand the validation rules that are in place for each of these components. The `ValidationRulesPrinter` object contains a `main` method that prints out the validation rules for each component, iterating through each validation rule and checking if it is a fatal error, and printing out the rule ID, the validation rule itself, whether it is soft-forkable, whether it is active, and the affected modifiers. The tool also includes several helper methods, such as `printHeader` and `boolToLatex`. This tool is useful for developers working on the Ergo platform to easily view and understand the validation rules in place for each component.\n\nExample usage:\n\n```scala\nobject ValidationRulesPrinterApp extends App {\n  ValidationRulesPrinter.main(Array.empty)\n}\n```\n\nIn summary, the `org.ergoplatform.tools` folder provides two tools for printing information about the Ergo blockchain's coin emission schedule and validation rules. These tools can be helpful for developers working on the Ergo platform to monitor the coin emission schedule, calculate expected block rewards, and understand the validation rules in place for various components.",
  "questions": ""
}