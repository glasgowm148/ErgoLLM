{
  "fileName": "CleanupWorker.scala",
  "filePath": "src/main/scala/org/ergoplatform/local/CleanupWorker.scala",
  "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/local/CleanupWorker.scala",
  "summary": "The `CleanupWorker` class is responsible for performing mempool transactions re-validation. It is called on a new block coming and validation results are sent directly to `NodeViewHolder`. The purpose of this class is to validate transactions from the mempool for some specified amount of time and update the valid transactions and invalidated transaction ids. \n\nThe `CleanupWorker` class has two main methods: `preStart()` and `receive()`. The `preStart()` method is called when the actor is started and logs a message that the cleanup worker has started. The `receive()` method is the main method that receives messages and performs the cleanup. It has two cases: `RunCleanup` and `Any`. The `RunCleanup` case runs the cleanup and sends a message to the sender that the cleanup is done. The `Any` case logs a warning message if a non-expected signal comes.\n\nThe `CleanupWorker` class has two private methods: `runCleanup()` and `validatePool()`. The `runCleanup()` method takes a `validator` and a `mempool` as input and validates the mempool transactions. It then sends the validated and invalidated transactions to the `NodeViewHolder`. The `validatePool()` method takes a `validator` and a `mempool` as input and validates transactions from the mempool for some specified amount of time. It returns updated valid transactions and invalidated transaction ids.\n\nThe `CleanupWorker` class has two constants: `CostLimit` and `TimeLimit`. `CostLimit` is the limit for the total cost of transactions to be re-checked and is hard-coded for now. `TimeLimit` is the time limit after which a transaction can be re-checked.\n\nThe `CleanupWorker` class has an object `CleanupWorker` that has a case class `RunCleanup`. `RunCleanup` is a command to run (partial) memory pool cleanup and takes a `validator` and a `mempool` as input.\n\nOverall, the `CleanupWorker` class is an important part of the ergo project as it ensures that mempool transactions are validated and updated correctly. It can be used in the larger project to ensure that the blockchain is secure and transactions are validated correctly.",
  "questions": "1. What is the purpose of the `CleanupWorker` class?\n- The `CleanupWorker` class performs mempool transactions re-validation and sends validation results directly to `NodeViewHolder`.\n\n2. What are the limits for the transactions to be re-checked?\n- The limit for the total cost of transactions to be re-checked is hard-coded to 7000000, and a transaction can be re-checked only after the time limit specified in the node settings' `mempoolCleanupDuration` parameter.\n\n3. What is the purpose of the `validatePool` method?\n- The `validatePool` method validates transactions from the mempool for a specified amount of time and returns updated valid transactions and invalidated transaction IDs. It also takes into account other transactions from the pool to provide the possibility to validate transactions that are spending off-chain outputs."
}