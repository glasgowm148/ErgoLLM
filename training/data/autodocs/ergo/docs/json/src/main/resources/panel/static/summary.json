{
  "folderName": "static",
  "folderPath": ".autodoc/docs/json/src/main/resources/panel/static",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/resources/panel/static",
  "files": [],
  "folders": [
    {
      "folderName": "css",
      "folderPath": ".autodoc/docs/json/src/main/resources/panel/static/css",
      "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/resources/panel/static/css",
      "files": [
        {
          "fileName": "main.82878fab.chunk.css.map",
          "filePath": "src/main/resources/panel/static/css/main.82878fab.chunk.css.map",
          "url": "https://github.com/ergoplatform/ergo/src/main/resources/panel/static/css/main.82878fab.chunk.css.map",
          "summary": "This code is responsible for styling the user interface of the Ergo project. It imports various SCSS files, such as `_normalize.scss`, `_fonts.scss`, `variables`, `button`, and `infoModal`, which contain styles for different components and global styles.\n\nThe main styles applied in this code include:\n\n1. **Global styles**: It sets the box-sizing property to border-box for all elements, applies the Roboto font family, and sets the height, margin, and padding for the html and body elements. It also removes the default list-style for unordered lists and sets the text-decoration for anchor tags.\n\n   ```scss\n   * {\n     box-sizing: border-box;\n     font-family: 'Roboto', sans-serif;\n   }\n   html, body {\n     height: 100%;\n     margin: 0;\n     padding: 0;\n     font-size: 16px;\n   }\n   ```\n\n2. **Backdrop styles**: It defines a fixed position backdrop with a z-index of 1000, covering the entire viewport. The content within the backdrop is centered using flexbox.\n\n   ```scss\n   .backdrop {\n     position: fixed;\n     top: 0;\n     left: 0;\n     height: 100vh;\n     width: 100vw;\n     overflow: auto;\n     z-index: 1000;\n   }\n   .content {\n     position: relative;\n     z-index: 1001;\n     margin: 32px auto;\n     transform: translate(0, 0);\n   }\n   ```\n\n3. **Button styles**: It defines various button styles, including different sizes (large, medium, and small), arrow icons, and primary and secondary button styles.\n\n   ```scss\n   .button {\n     // common button styles\n   }\n   .button.l {\n     // large button styles\n   }\n   .button.m {\n     // medium button styles\n   }\n   .button.s {\n     // small button styles\n   }\n   ```\n\n4. **Info Modal styles**: It defines the styles for an info modal component, including the modal backdrop, content, and buttons (primary, secondary, and close).\n\n   ```scss\n   .info-modal-backdrop {\n     // backdrop styles\n   }\n   .info-modal {\n     // modal styles\n   }\n   .info-modal__button {\n     // button styles\n   }\n   ```\n\nThese styles are used to create a consistent and visually appealing user interface for the Ergo project.",
          "questions": "1. **What is the purpose of this code?**\n\n   This code is a compiled CSS file that contains styles for various components and elements in the Ergo project. It includes styles for normalize, fonts, buttons, and an info modal.\n\n2. **What are the imported SCSS files and their purpose?**\n\n   The imported SCSS files are `_normalize.scss`, `_fonts.scss`, `variables`, `components/button`, and `components/infoModal`. These files contain styles for normalizing browser styles, defining custom fonts, setting global variables, and styling button and info modal components, respectively.\n\n3. **What are the custom font faces used in this project?**\n\n   The custom font faces used in this project are 'Roboto' and 'Material Icons'. 'Roboto' is used as the main font for text, while 'Material Icons' is used for displaying icons."
        },
        {
          "fileName": "main.82878fab.chunk.css",
          "filePath": "src/main/resources/panel/static/css/main.82878fab.chunk.css",
          "url": "https://github.com/ergoplatform/ergo/src/main/resources/panel/static/css/main.82878fab.chunk.css",
          "summary": "The code provided is a CSS file that contains styles for various components used in the ergo project. The purpose of this code is to define the visual appearance of the user interface elements in the project. \n\nThe code defines styles for various components such as the main container, sidebar, navbar, toast notifications, info cards, loader, dashboard, backdrop, wallet table, and buttons. These styles define the layout, positioning, colors, fonts, and other visual properties of these components.\n\nFor example, the `.main-container` class defines the position, margin, and size of the main container element. The `.sidebar` class defines the position, height, width, and border of the sidebar element. The `.navbar` class defines the background color, text color, and alignment of the navbar element.\n\nThe code also defines styles for various states of the components, such as success and error states for toast notifications and info cards. It also defines responsive styles for smaller screen sizes.\n\nThese styles can be used in the larger project to ensure a consistent and visually appealing user interface. Developers can apply these styles to the appropriate components in their code to achieve the desired visual appearance. For example, a developer can apply the `.wallet-table` class to a table element to give it the defined border and padding styles.\n\nOverall, this code plays an important role in defining the visual appearance of the ergo project and ensuring a consistent user interface.",
          "questions": "1. What is the purpose of the `ergo-loader` class?\n- The `ergo-loader` class is used to display a loading spinner in the center of the screen. \n2. What is the significance of the `n-toast` class?\n- The `n-toast` class is used to style a notification toast element, including its background color, font size, and progress bar. \n3. What is the purpose of the `Backdrop` classes?\n- The `Backdrop` classes are used to create a modal backdrop and content container for an information modal."
        }
      ],
      "folders": [],
      "summary": "The code in the `main.82878fab.chunk.css` file provides the styling for various components used in the Ergo project, ensuring a consistent and visually appealing user interface. It defines styles for elements such as the main container, sidebar, navbar, toast notifications, info cards, loader, dashboard, backdrop, wallet table, and buttons.\n\nFor instance, the `.main-container` class sets the position, margin, and size of the main container element, while the `.sidebar` class specifies the position, height, width, and border of the sidebar element. The `.navbar` class determines the background color, text color, and alignment of the navbar element.\n\n```css\n.main-container {\n  position: relative;\n  margin: 0 auto;\n  max-width: 1200px;\n}\n\n.sidebar {\n  position: fixed;\n  height: 100%;\n  width: 250px;\n  border-right: 1px solid #ccc;\n}\n\n.navbar {\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n}\n```\n\nThe code also includes styles for different states of components, such as success and error states for toast notifications and info cards. Additionally, it defines responsive styles for smaller screen sizes.\n\nDevelopers can apply these styles to the appropriate components in their code to achieve the desired visual appearance. For example, a developer can apply the `.wallet-table` class to a table element to give it the defined border and padding styles.\n\n```html\n<table class=\"wallet-table\">\n  <!-- table content -->\n</table>\n```\n\nIn summary, the code in the `main.82878fab.chunk.css` file plays a crucial role in defining the visual appearance of the Ergo project and ensuring a consistent user interface. By applying the provided styles to the corresponding components, developers can create a cohesive and visually appealing interface for the project.",
      "questions": ""
    },
    {
      "folderName": "js",
      "folderPath": ".autodoc/docs/json/src/main/resources/panel/static/js",
      "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/resources/panel/static/js",
      "files": [
        {
          "fileName": "runtime-main.219240e0.js.map",
          "filePath": "src/main/resources/panel/static/js/runtime-main.219240e0.js.map",
          "url": "https://github.com/ergoplatform/ergo/src/main/resources/panel/static/js/runtime-main.219240e0.js.map",
          "summary": "This code is responsible for loading and managing JavaScript modules in the Ergo project using the Webpack module bundler. It provides a mechanism for loading chunks of code asynchronously, which can help improve the performance of the application by reducing the initial load time.\n\nThe `webpackJsonpCallback` function is the core of this code. It takes an array of data containing chunk IDs, additional modules, and modules to execute. It adds the new modules to the existing modules object and marks the specified chunks as loaded. It then executes any callbacks associated with the loaded chunks and adds any entry modules from the loaded chunk to a deferred list.\n\nThe `checkDeferredModules` function is responsible for checking if all dependencies of a deferred module are loaded. If all dependencies are fulfilled, the module is executed, and the result is returned.\n\nThe `__webpack_require__` function is used to load a module by its ID. It checks if the module is already in the cache, and if not, it creates a new module, executes the module function, and caches the result. The function also exposes the modules object, module cache, and various utility functions for handling module exports and imports.\n\nThe code also handles the JSONP callback mechanism for loading chunks. It replaces the default `push` function of the `jsonpArray` with the `webpackJsonpCallback` function. This allows the code to intercept and process any new JSONP requests made by other parts of the application.\n\nOverall, this code is essential for managing the loading and execution of JavaScript modules in the Ergo project, enabling efficient code splitting and asynchronous loading of chunks.",
          "questions": "1. **Question**: What is the purpose of the `webpackJsonpCallback` function?\n   **Answer**: The `webpackJsonpCallback` function is used to install a JSONP callback for chunk loading. It adds \"moreModules\" to the modules object, flags all \"chunkIds\" as loaded, and fires the callback.\n\n2. **Question**: How does the `__webpack_require__` function work?\n   **Answer**: The `__webpack_require__` function checks if a module is in the cache, and if it is, it returns the module's exports. If the module is not in the cache, it creates a new module, puts it into the cache, executes the module function, flags the module as loaded, and returns the module's exports.\n\n3. **Question**: What is the purpose of the `checkDeferredModules` function?\n   **Answer**: The `checkDeferredModules` function is used to check and run deferred modules when all chunks are ready. It iterates through the deferred modules, checks if their dependencies are fulfilled, and if so, removes the module from the deferred list and executes it."
        },
        {
          "fileName": "runtime-main.219240e0.js",
          "filePath": "src/main/resources/panel/static/js/runtime-main.219240e0.js",
          "url": "https://github.com/ergoplatform/ergo/src/main/resources/panel/static/js/runtime-main.219240e0.js",
          "summary": "The code provided is a minified version of a JavaScript file that appears to be related to the ergo project. The purpose of this code is to load and execute the JavaScript code that makes up the ergo project. \n\nThe code is using a self-invoking function that takes in a single parameter, `e`. This parameter is expected to be an object that contains the JavaScript code for the ergo project. The function then proceeds to parse and execute this code. \n\nThe code appears to be using a module bundler called webpack to bundle the JavaScript code for the ergo project. The `f` function is used to define and execute modules within the bundled code. The `f` function takes in a module identifier, `r`, and returns the exports of the module. If the module has already been defined, the function returns the exports of the existing module. Otherwise, the function defines the module and executes its code using the `e` parameter. \n\nThe code also defines several helper functions for working with modules, such as `f.d`, `f.r`, `f.t`, and `f.n`. These functions are used to define properties on modules, set module flags, and create new modules. \n\nThe code also defines an array called `u` that is used to store functions that need to be executed after the ergo project has finished loading. These functions are executed by the `t` function, which loops through the `u` array and executes each function. \n\nOverall, this code is responsible for loading and executing the JavaScript code for the ergo project using the webpack module bundler. It provides a way to define and execute modules within the bundled code and allows for the execution of additional functions after the project has finished loading.",
          "questions": "1. What is the purpose of this code?\n   This code appears to be a minified version of a JavaScript runtime module for a project called \"ergo\". It defines a function called \"r\" and several helper functions for managing modules.\n\n2. What dependencies does this code have?\n   It is difficult to determine the exact dependencies of this code without additional context. However, it appears to be using some built-in JavaScript functions and objects, as well as potentially other modules that are not included in this file.\n\n3. What is the expected output of this code?\n   Without additional context, it is unclear what the expected output of this code is. It appears to define a function and several helper functions, but it is not clear how they are intended to be used or what they are intended to accomplish."
        }
      ],
      "folders": [],
      "summary": "The code in this folder is responsible for managing the loading and execution of JavaScript modules in the Ergo project using the Webpack module bundler. It enables efficient code splitting and asynchronous loading of chunks, which can help improve the performance of the application by reducing the initial load time.\n\nThe core of this functionality is provided by the `webpackJsonpCallback` function in `runtime-main.219240e0.js.map`. This function takes an array of data containing chunk IDs, additional modules, and modules to execute. It adds the new modules to the existing modules object and marks the specified chunks as loaded. It then executes any callbacks associated with the loaded chunks and adds any entry modules from the loaded chunk to a deferred list.\n\nFor example, when a new chunk is loaded, the `webpackJsonpCallback` function might be called like this:\n\n```javascript\nwebpackJsonpCallback([[0], [1], [2]]);\n```\n\nThis would load and execute the modules with IDs 0, 1, and 2.\n\nThe `checkDeferredModules` function is responsible for checking if all dependencies of a deferred module are loaded. If all dependencies are fulfilled, the module is executed, and the result is returned. This ensures that modules are only executed when all their dependencies are available.\n\nThe `__webpack_require__` function is used to load a module by its ID. It checks if the module is already in the cache, and if not, it creates a new module, executes the module function, and caches the result. This function also exposes the modules object, module cache, and various utility functions for handling module exports and imports.\n\nThe minified version of this code is provided in `runtime-main.219240e0.js`. This file contains a self-invoking function that takes in a single parameter, `e`, which is expected to be an object that contains the JavaScript code for the Ergo project. The function then proceeds to parse and execute this code using the Webpack module bundler.\n\nThe code also handles the JSONP callback mechanism for loading chunks. It replaces the default `push` function of the `jsonpArray` with the `webpackJsonpCallback` function. This allows the code to intercept and process any new JSONP requests made by other parts of the application.\n\nIn summary, the code in this folder is essential for managing the loading and execution of JavaScript modules in the Ergo project. It provides a mechanism for loading chunks of code asynchronously, which can help improve the performance of the application by reducing the initial load time. Developers working with this code should be familiar with the Webpack module bundler and the JSONP callback mechanism for loading chunks.",
      "questions": ""
    }
  ],
  "summary": "The code in the `main.82878fab.chunk.css` file provides the styling for various components used in the Ergo project, ensuring a consistent and visually appealing user interface. It defines styles for elements such as the main container, sidebar, navbar, toast notifications, info cards, loader, dashboard, backdrop, wallet table, and buttons.\n\nFor instance, the `.main-container` class sets the position, margin, and size of the main container element, while the `.sidebar` class specifies the position, height, width, and border of the sidebar element. The `.navbar` class determines the background color, text color, and alignment of the navbar element.\n\n```css\n.main-container {\n  position: relative;\n  margin: 0 auto;\n  max-width: 1200px;\n}\n\n.sidebar {\n  position: fixed;\n  height: 100%;\n  width: 250px;\n  border-right: 1px solid #ccc;\n}\n\n.navbar {\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n}\n```\n\nThe code also includes styles for different states of components, such as success and error states for toast notifications and info cards. Additionally, it defines responsive styles for smaller screen sizes.\n\nDevelopers can apply these styles to the appropriate components in their code to achieve the desired visual appearance. For example, a developer can apply the `.wallet-table` class to a table element to give it the defined border and padding styles.\n\n```html\n<table class=\"wallet-table\">\n  <!-- table content -->\n</table>\n```\n\nIn summary, the code in the `main.82878fab.chunk.css` file plays a crucial role in defining the visual appearance of the Ergo project and ensuring a consistent user interface. By applying the provided styles to the corresponding components, developers can create a cohesive and visually appealing interface for the project.\n\nThe code in the `js` folder is responsible for managing the loading and execution of JavaScript modules in the Ergo project using the Webpack module bundler. It enables efficient code splitting and asynchronous loading of chunks, which can help improve the performance of the application by reducing the initial load time.\n\nThe core of this functionality is provided by the `webpackJsonpCallback` function in `runtime-main.219240e0.js.map`. This function takes an array of data containing chunk IDs, additional modules, and modules to execute. It adds the new modules to the existing modules object and marks the specified chunks as loaded. It then executes any callbacks associated with the loaded chunks and adds any entry modules from the loaded chunk to a deferred list.\n\nFor example, when a new chunk is loaded, the `webpackJsonpCallback` function might be called like this:\n\n```javascript\nwebpackJsonpCallback([[0], [1], [2]]);\n```\n\nThis would load and execute the modules with IDs 0, 1, and 2.\n\nThe `checkDeferredModules` function is responsible for checking if all dependencies of a deferred module are loaded. If all dependencies are fulfilled, the module is executed, and the result is returned. This ensures that modules are only executed when all their dependencies are available.\n\nThe `__webpack_require__` function is used to load a module by its ID. It checks if the module is already in the cache, and if not, it creates a new module, executes the module function, and caches the result. This function also exposes the modules object, module cache, and various utility functions for handling module exports and imports.\n\nThe minified version of this code is provided in `runtime-main.219240e0.js`. This file contains a self-invoking function that takes in a single parameter, `e`, which is expected to be an object that contains the JavaScript code for the Ergo project. The function then proceeds to parse and execute this code using the Webpack module bundler.\n\nThe code also handles the JSONP callback mechanism for loading chunks. It replaces the default `push` function of the `jsonpArray` with the `webpackJsonpCallback` function. This allows the code to intercept and process any new JSONP requests made by other parts of the application.\n\nIn summary, the code in this folder is essential for managing the loading and execution of JavaScript modules in the Ergo project. It provides a mechanism for loading chunks of code asynchronously, which can help improve the performance of the application by reducing the initial load time. Developers working with this code should be familiar with the Webpack module bundler and the JSONP callback mechanism for loading chunks.",
  "questions": ""
}