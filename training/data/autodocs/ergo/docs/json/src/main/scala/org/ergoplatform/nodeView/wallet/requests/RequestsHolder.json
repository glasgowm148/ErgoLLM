{
  "fileName": "RequestsHolder.scala",
  "filePath": "src/main/scala/org/ergoplatform/nodeView/wallet/requests/RequestsHolder.scala",
  "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/nodeView/wallet/requests/RequestsHolder.scala",
  "summary": "The code defines two classes and a case class that are used to encode and decode requests for transaction generation in the Ergo platform. The RequestsHolder case class holds a sequence of TransactionGenerationRequest objects, along with other parameters such as the fee, inputs, and data inputs. The withFee() method adds a separate payment request with a fee to the existing requests. This is done by creating a Pay2SAddress with a fee proposition and adding a PaymentRequest object to the requests sequence.\n\nThe RequestsHolderEncoder class is used to encode a RequestsHolder object to JSON format. It uses the TransactionRequestEncoder and ErgoAddressJsonEncoder classes to encode the requests and addresses, respectively. The resulting JSON object has fields for the requests, fee, inputs, and data inputs.\n\nThe RequestsHolderDecoder class is used to decode a JSON object into a RequestsHolder object. It uses the TransactionRequestDecoder and ErgoAddressEncoder classes to decode the requests and addresses, respectively. The resulting RequestsHolder object has the same fields as the JSON object.\n\nThese classes are used in the larger Ergo project to facilitate the creation and processing of transaction requests. The RequestsHolder class provides a convenient way to group multiple requests together, while the encoder and decoder classes allow these requests to be serialized and deserialized to and from JSON format. This is useful for communication between different parts of the Ergo platform, such as the wallet and the node view. \n\nExample usage:\n\n```\nval requests = Seq(\n  PaymentRequest(address1, value1, assets1, registers1),\n  PaymentRequest(address2, value2, assets2, registers2)\n)\nval holder = RequestsHolder(requests, Some(fee), inputsRaw, dataInputsRaw, minerRewardDelay)(addressEncoder)\nval json = new RequestsHolderEncoder(settings).apply(holder)\nval decodedHolder = new RequestsHolderDecoder(settings).decodeJson(json).getOrElse(throw new Exception(\"Failed to decode JSON\"))\n```",
  "questions": "1. What is the purpose of the `RequestsHolder` class and what does it contain?\n- The `RequestsHolder` class contains a sequence of `TransactionGenerationRequest` objects, along with optional fee, input and data input strings, and a miner reward delay. It is used to hold requests for generating transactions.\n\n2. What is the purpose of the `RequestsHolderEncoder` class and what does it do?\n- The `RequestsHolderEncoder` class is used to encode a `RequestsHolder` object into a JSON format. It uses various encoders, such as `TransactionRequestEncoder` and `ErgoAddressJsonEncoder`, to encode the object's properties.\n\n3. What is the purpose of the `RequestsHolderDecoder` class and what does it do?\n- The `RequestsHolderDecoder` class is used to decode a JSON format into a `RequestsHolder` object. It uses various decoders, such as `TransactionRequestDecoder` and `ErgoAddressEncoder`, to decode the JSON properties into the object's properties."
}