{
  "fileName": "ErgoPow.tex",
  "filePath": "papers/yellow/pow/ErgoPow.tex",
  "url": "https://github.com/ergoplatform/ergo/papers/yellow/pow/ErgoPow.tex",
  "summary": "This code describes the Autolykos Proof-of-Work (PoW) algorithm used in the Ergo cryptocurrency. Autolykos has two versions: version 1 (used until block 417,792) and version 2 (used since block 417,792). The main differences between the two versions are:\n\n1. Non-outsourceability is switched off in version 2, as it was found to be unattractive to small miners.\n2. Version 2 binds an efficient solving procedure with a single table of ~2 GB, and the table size grows with time.\n3. The table in version 2 depends only on block height, so there is no penalization for recalculating block candidates for the same height.\n\nThe Autolykos PoW algorithm is memory-hard and non-outsourceable, meaning it requires a significant amount of memory to solve, and outsourcing the puzzle is equivalent to outsourcing a signature. This design aims to maintain decentralization and reduce the advantage of ASIC-equipped miners.\n\nThe code provides two main algorithms: Solution Verification (Alg.~\\ref{alg:verify2}) and Block Mining (Alg.~\\ref{alg:prove2}). The Solution Verification algorithm checks if a given solution is valid, while the Block Mining algorithm is used by miners to find a valid solution for a new block.\n\nThe Autolykos PoW algorithm is efficient in terms of solution size and verification time. The solution consists of two public keys (32 bytes each), a number `d` (up to 32 bytes), and an 8-byte nonce. The verification process requires calculating one `genIndexes` hash, `k` hashes `H`, and performing two exponentiations in the group. The reference Scala implementation allows verifying a block header in 2 milliseconds on an Intel Core i5-7200U, 2.5GHz.",
  "questions": "1. **What is the purpose of the Autolykos Proof-of-Work algorithm?**\n\n   The Autolykos Proof-of-Work algorithm is used in the Ergo cryptocurrency to secure the blockchain by requiring miners to solve a memory-hard, non-outsourceable puzzle. This helps to maintain decentralization and reduce the advantage of ASIC-equipped miners over those using commodity hardware.\n\n2. **What are the main differences between Autolykos version 1 and version 2?**\n\n   Autolykos version 2 introduces several modifications compared to version 1, including turning off non-outsourceability, binding an efficient solving procedure with a single table of ~2 GB, increasing table size (memory requirements) over time, and making the table depend on block height only, which removes penalization for recalculating block candidates for the same height.\n\n3. **How does the Autolykos algorithm ensure memory-hardness?**\n\n   The Autolykos algorithm achieves memory-hardness by requiring miners to store a large list of pre-calculated hashes in memory (2 GB in version 2) during the mining process. While it is possible to recalculate these elements \"on the fly\" and reduce memory requirements, doing so would significantly increase the number of hash function calls, reducing the miner's efficiency and profit."
}