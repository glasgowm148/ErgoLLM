{
  "folderName": "api",
  "folderPath": ".autodoc/docs/json/src/it/scala/org/ergoplatform/it/api",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/it/scala/org/ergoplatform/it/api",
  "files": [
    {
      "fileName": "NetworkNodeApi.scala",
      "filePath": "src/it/scala/org/ergoplatform/it/api/NetworkNodeApi.scala",
      "url": "https://github.com/ergoplatform/ergo/src/it/scala/org/ergoplatform/it/api/NetworkNodeApi.scala",
      "summary": "The code defines a trait called `NetworkNodeApi` that provides an interface for interacting with a network node in the Ergo platform. The trait has several abstract methods that must be implemented by any class that extends it. These methods include `networkAddress`, `networkPort`, `networkNodeName`, `chainId`, and `nonce`. \n\nThe `networkAddress` method returns the IP address of the network node, while `networkPort` returns the port number. `networkNodeName` returns the name of the network node, and `chainId` returns the ID of the blockchain network. `nonce` returns a unique identifier for the current request, which is generated using the current system time.\n\nThe trait also provides a default implementation for a method called `sendByNetwork`. This method takes a variable number of byte arrays as input and returns a `Future` that resolves to `Unit`. The method uses the `NetworkSender` class to send the message to the network node. The `NetworkSender` class takes the `chainId`, `networkNodeName`, and `nonce` as input parameters. It then connects to the network node using the `networkAddress` and `networkPort` values. If the connection is successful, the message is sent to the network node using the `send` method of the `NetworkSender` class. Finally, the `close` method is called on the `NetworkSender` instance to close the connection.\n\nThis code can be used in the larger Ergo project to interact with network nodes in the blockchain network. Any class that extends the `NetworkNodeApi` trait can implement the abstract methods to provide the necessary information for connecting to a network node. The `sendByNetwork` method can then be used to send messages to the network node. For example, a class that extends the `NetworkNodeApi` trait could be used to query the current state of the blockchain network or to submit a new transaction to the network. \n\nExample usage:\n\n```scala\nclass MyNetworkNode extends NetworkNodeApi {\n  override def networkAddress: String = \"127.0.0.1\"\n  override def networkPort: Int = 9052\n  override def networkNodeName: String = \"my-node\"\n  override def chainId: Char = 'X'\n}\n\nval myNode = new MyNetworkNode()\nval message = Array[Byte](1, 2, 3)\nmyNode.sendByNetwork(message).foreach(_ => println(\"Message sent!\"))\n```",
      "questions": "1. What is the purpose of this code?\n   This code defines a trait called `NetworkNodeApi` that provides methods for sending messages over a network.\n\n2. What parameters are required to use the `sendByNetwork` method?\n   The `sendByNetwork` method requires an implicit `ExecutionContext` and one or more `Array[Byte]` messages to send over the network.\n\n3. What is the purpose of the `nonce` method?\n   The `nonce` method generates a unique identifier based on the current system time, which can be used to help prevent replay attacks on the network."
    },
    {
      "fileName": "NodeApi.scala",
      "filePath": "src/it/scala/org/ergoplatform/it/api/NodeApi.scala",
      "url": "https://github.com/ergoplatform/ergo/src/it/scala/org/ergoplatform/it/api/NodeApi.scala",
      "summary": "The `NodeApi` trait defines an interface for interacting with a node in the Ergo blockchain network. It provides methods for sending HTTP requests to the node and parsing the responses. The trait is implemented by classes that provide concrete implementations of the methods.\n\nThe `NodeApi` trait defines several methods for sending HTTP requests to the node, including `get`, `post`, and `postJson`. These methods take a path to the resource being requested and an optional function that can modify the request before it is sent. The `get` method sends an HTTP GET request to the specified path, while the `post` and `postJson` methods send HTTP POST requests with the specified body. The `postJson` method serializes the body to JSON before sending the request.\n\nThe `NodeApi` trait also defines several methods for interacting with the Ergo blockchain network. These methods include `connectedPeers`, which returns a list of connected peers, `waitForPeers`, which waits for a specified number of peers to connect, and `waitForHeight`, which waits for the node to reach a specified block height. There are also methods for retrieving information about the node, such as `info`, which returns information about the node, and `status`, which returns the status of the node.\n\nThe `NodeApi` trait uses the `AsyncHttpClient` library to send HTTP requests to the node. It also uses the `HashedWheelTimer` class to schedule retries of failed requests. The `NodeApi` trait defines a `retrying` method that retries failed requests with a specified interval and status code.\n\nThe `NodeApi` trait defines several case classes that are used to parse JSON responses from the node. These case classes include `Peer`, which represents a connected peer, `Block`, which represents a block in the blockchain, and `NodeInfo`, which represents information about the node.\n\nOverall, the `NodeApi` trait provides a high-level interface for interacting with a node in the Ergo blockchain network. It provides methods for sending HTTP requests to the node and parsing the responses, as well as methods for interacting with the blockchain network. The trait is implemented by classes that provide concrete implementations of the methods.",
      "questions": "1. What is the purpose of the `NodeApi` trait and what methods does it provide?\n- The `NodeApi` trait provides methods for interacting with a node's REST API, such as `get`, `post`, and `waitFor`. It also includes methods for retrieving information about the node, such as its status and connected peers.\n\n2. What external libraries does this code depend on?\n- This code depends on several external libraries, including `io.circe` for JSON encoding and decoding, `org.asynchttpclient` for making HTTP requests, and `scorex-util` for logging.\n\n3. What is the purpose of the `retrying` method and how does it work?\n- The `retrying` method is used to execute an HTTP request and retry it if it fails due to an `IOException` or `TimeoutException`. It uses a `HashedWheelTimer` to schedule retries at a specified interval, and returns a `Future` that resolves to the response of the successful request."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/src/it/scala/org/ergoplatform/it/api` folder contains two Scala files, `NetworkNodeApi.scala` and `NodeApi.scala`, which provide interfaces for interacting with network nodes and the Ergo blockchain network.\n\n`NetworkNodeApi.scala` defines a trait called `NetworkNodeApi` that provides an interface for interacting with a network node in the Ergo platform. It has several abstract methods, such as `networkAddress`, `networkPort`, `networkNodeName`, `chainId`, and `nonce`, which must be implemented by any class that extends it. The trait also provides a default implementation for a method called `sendByNetwork`, which sends messages to the network node using the `NetworkSender` class. This code can be used in the larger Ergo project to interact with network nodes in the blockchain network.\n\nExample usage:\n\n```scala\nclass MyNetworkNode extends NetworkNodeApi {\n  override def networkAddress: String = \"127.0.0.1\"\n  override def networkPort: Int = 9052\n  override def networkNodeName: String = \"my-node\"\n  override def chainId: Char = 'X'\n}\n\nval myNode = new MyNetworkNode()\nval message = Array[Byte](1, 2, 3)\nmyNode.sendByNetwork(message).foreach(_ => println(\"Message sent!\"))\n```\n\n`NodeApi.scala` defines a trait called `NodeApi` that provides an interface for interacting with a node in the Ergo blockchain network. It offers methods for sending HTTP requests to the node and parsing the responses. The trait also defines several methods for interacting with the Ergo blockchain network, such as `connectedPeers`, `waitForPeers`, and `waitForHeight`. The `NodeApi` trait uses the `AsyncHttpClient` library to send HTTP requests to the node and the `HashedWheelTimer` class to schedule retries of failed requests.\n\nExample usage:\n\n```scala\nclass MyNodeApi extends NodeApi {\n  // Implement required methods\n}\n\nval myNodeApi = new MyNodeApi()\n\n// Get connected peers\nmyNodeApi.connectedPeers().foreach(peers => println(s\"Connected peers: $peers\"))\n\n// Wait for 5 peers to connect\nmyNodeApi.waitForPeers(5).foreach(_ => println(\"5 peers connected\"))\n\n// Wait for the node to reach block height 1000\nmyNodeApi.waitForHeight(1000).foreach(_ => println(\"Block height 1000 reached\"))\n```\n\nIn summary, the code in this folder provides interfaces for interacting with network nodes and the Ergo blockchain network. These interfaces can be used in the larger Ergo project to send messages to network nodes, query the current state of the blockchain network, or submit new transactions to the network.",
  "questions": ""
}