{
  "folderName": "utils",
  "folderPath": ".autodoc/docs/json/ergo-wallet/src/main/scala/org/ergoplatform/utils",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/ergo-wallet/src/main/scala/org/ergoplatform/utils",
  "files": [
    {
      "fileName": "ArithUtils.scala",
      "filePath": "ergo-wallet/src/main/scala/org/ergoplatform/utils/ArithUtils.scala",
      "url": "https://github.com/ergoplatform/ergo/ergo-wallet/src/main/scala/org/ergoplatform/utils/ArithUtils.scala",
      "summary": "The `ArithUtils` object in the `org.ergoplatform.utils` package provides two methods for performing arithmetic operations on `Long` values. The first method, `addExact`, adds two `Long` values and returns the result. If the addition operation results in an overflow, the method returns `Long.MaxValue`. The method is implemented using bitwise operations to detect overflow. The `@inline` annotation is used to indicate that the method should be inlined by the compiler for performance reasons.\n\nThe second method, `addExact(a: Long, b: Long, c: Long*)`, is a variadic method that takes two or more `Long` values and adds them together. The method uses `foldLeft` to iterate over the `c` sequence and accumulate the sum of all the values. The `addExact` method is used to add each value to the accumulated sum, ensuring that overflow is detected and handled correctly.\n\nThe second method, `multiplyExact`, multiplies two `Long` values and returns the result. If the multiplication operation results in an overflow, the method returns `Long.MaxValue`. The method is implemented using the `java7.compat.Math.multiplyExact` method, which throws an exception if the multiplication overflows. The exception is caught and handled by returning `Long.MaxValue`.\n\nThese methods are likely used throughout the larger `ergo` project to perform arithmetic operations on `Long` values in a way that handles overflow correctly. The `addExact` method is particularly useful for adding values that may be close to the maximum value of a `Long`, while the `multiplyExact` method is useful for multiplying values that may be close to the square root of `Long.MaxValue`. Here is an example usage of the `addExact` method:\n\n```\nval a: Long = Long.MaxValue - 1\nval b: Long = 2\nval c: Long = 3\nval sum: Long = ArithUtils.addExact(a, b, c)\nprintln(sum) // prints Long.MaxValue\n```",
      "questions": "1. What does the `addExact` method do?\n   - The `addExact` method adds two long values and returns `Long.MaxValue` if there was any long overflow.\n2. What does the `multiplyExact` method do?\n   - The `multiplyExact` method multiplies two long values and returns `Long.MaxValue` if there was any long overflow.\n3. Why is the `multiplyExact` method using a try-catch block?\n   - The `multiplyExact` method is using a try-catch block to catch any `Throwable` exception that may occur when using the `java7.compat.Math.multiplyExact` method."
    }
  ],
  "folders": [],
  "summary": "The `ArithUtils` object in the `org.ergoplatform.utils` package provides utility methods for performing arithmetic operations on `Long` values, handling overflow cases correctly. These methods are likely used throughout the larger `ergo` project to perform arithmetic operations on `Long` values in a way that handles overflow correctly.\n\n### ArithUtils.scala\n\nThis file contains two methods:\n\n1. `addExact(a: Long, b: Long)`: Adds two `Long` values and returns the result. If the addition operation results in an overflow, the method returns `Long.MaxValue`. The method is implemented using bitwise operations to detect overflow. The `@inline` annotation is used to indicate that the method should be inlined by the compiler for performance reasons.\n\nExample usage:\n\n```scala\nval a: Long = Long.MaxValue - 1\nval b: Long = 2\nval sum: Long = ArithUtils.addExact(a, b)\nprintln(sum) // prints Long.MaxValue\n```\n\n2. `addExact(a: Long, b: Long, c: Long*)`: A variadic method that takes two or more `Long` values and adds them together. The method uses `foldLeft` to iterate over the `c` sequence and accumulate the sum of all the values. The `addExact` method is used to add each value to the accumulated sum, ensuring that overflow is detected and handled correctly.\n\nExample usage:\n\n```scala\nval a: Long = Long.MaxValue - 1\nval b: Long = 2\nval c: Long = 3\nval sum: Long = ArithUtils.addExact(a, b, c)\nprintln(sum) // prints Long.MaxValue\n```\n\n3. `multiplyExact(a: Long, b: Long)`: Multiplies two `Long` values and returns the result. If the multiplication operation results in an overflow, the method returns `Long.MaxValue`. The method is implemented using the `java7.compat.Math.multiplyExact` method, which throws an exception if the multiplication overflows. The exception is caught and handled by returning `Long.MaxValue`.\n\nExample usage:\n\n```scala\nval a: Long = Long.MaxValue / 2 + 1\nval b: Long = 2\nval product: Long = ArithUtils.multiplyExact(a, b)\nprintln(product) // prints Long.MaxValue\n```\n\nThese utility methods are useful for performing arithmetic operations on `Long` values that may be close to the maximum value of a `Long` or the square root of `Long.MaxValue`. By using these methods, developers can ensure that overflow cases are handled correctly, preventing unexpected behavior in the larger `ergo` project.",
  "questions": ""
}