{
  "folderName": "shared",
  "folderPath": ".autodoc/docs/json/components/shared",
  "url": "https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/shared",
  "files": [
    {
      "fileName": "ContributeForm.tsx",
      "filePath": "components/shared/ContributeForm.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/shared/ContributeForm.tsx",
      "summary": "The `ContributeForm` component is a React component that renders a form for users to contribute to the Ergo project. The component imports several modules, including `react-intl` for internationalization, `react-toastify` for displaying toast messages, and a custom `Button` component. \n\nThe component defines several variables that use the `useIntl` hook to format messages for internationalization. These variables are used to set the text for various buttons and form inputs. \n\nThe component also defines a `sendMessage` function that is called when the form is submitted. This function sends a POST request to a Strapi API endpoint with the user's name, email, and message. If the request is successful, a success message is displayed using the `toast` function from `react-toastify`.\n\nThe component renders a form with inputs for the user's name, email, and message, as well as several buttons that link to various resources related to contributing to the Ergo project. The form and buttons are styled using Tailwind CSS classes.\n\nOverall, this component provides a user-friendly way for users to contribute to the Ergo project and access relevant resources.",
      "questions": "1. What is the purpose of the `ContributeForm` component?\n- The `ContributeForm` component is used to display information and options for contributing to the Ergo platform, as well as a form for companies to become partners.\n\n2. What is the purpose of the `sendMessage` function?\n- The `sendMessage` function is called when the form in the `ContributeForm` component is submitted, and sends a POST request to a contact-requests API endpoint with the user's inputted data.\n\n3. What external libraries or modules are being used in this code?\n- The code is importing `react-intl`, `../../utils/icons-map`, `../Button`, and `react-toastify`."
    },
    {
      "fileName": "Feed.tsx",
      "filePath": "components/shared/Feed.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/shared/Feed.tsx",
      "summary": "The code defines a React component called `Feed` that renders a list of `Post` components. The `Feed` component takes in a single prop called `posts`, which is an optional array of post data. If `posts` is not provided, the list of posts will be empty.\n\nThe `Feed` component renders a container div with the id \"Feed\" and several CSS classes that control its layout and styling. Within this container, the component maps over the `data` property of the `posts` array (if it exists) and renders a `Post` component for each post in the array.\n\nEach `Post` component is passed a set of props that correspond to the various attributes of a post, such as its `id`, `title`, `author`, `content`, and `image`. These props are extracted from the `post` object using dot notation.\n\nThe `image` prop is a bit more complex, as it checks whether the `image` attribute of the post data is not null before attempting to extract the URL of the medium-sized image format. If the `image` attribute is null, the `image` prop is set to null as well.\n\nOverall, this code serves as a reusable component for rendering a feed of blog posts on a website. By passing in an array of post data, the `Feed` component can dynamically render a list of `Post` components with the appropriate content and styling. This component can be used in conjunction with other components and features of the larger `ergoweb` project to create a fully-featured blog or content management system. \n\nExample usage:\n\n```\nimport Feed from './Feed';\n\nconst posts = [\n  {\n    id: 1,\n    attributes: {\n      title: 'My First Blog Post',\n      author: 'John Doe',\n      subtitle: 'A brief introduction to my blog',\n      tag: ['blog', 'introduction'],\n      date: '2022-01-01',\n      url: '/blog/my-first-post',\n      permalink: 'https://example.com/blog/my-first-post',\n      type: 'blog',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit...',\n      image: {\n        data: {\n          attributes: {\n            formats: {\n              medium: {\n                url: 'https://example.com/images/my-first-post-medium.jpg'\n              }\n            }\n          }\n        }\n      },\n      blogPhoto: 'https://example.com/images/my-first-post-blog.jpg',\n      authorPhoto: 'https://example.com/images/john-doe.jpg'\n    }\n  },\n  // additional post objects...\n];\n\nfunction Blog() {\n  return (\n    <div>\n      <h1>Welcome to my Blog!</h1>\n      <Feed posts={posts} />\n    </div>\n  );\n}\n```",
      "questions": "1. What is the purpose of the `Post` import statement at the beginning of the code?\n- The `Post` import statement is importing a component from a file called `Post`.\n\n2. What is the expected data type for the `posts` prop?\n- The expected data type for the `posts` prop is an object that may contain a `data` property.\n\n3. What is the purpose of the conditional statement in the `image` prop?\n- The conditional statement in the `image` prop is checking if the `image` property of the `post` object is not null, and if it is not null, it is accessing the `medium` format URL of the image."
    },
    {
      "fileName": "Post.tsx",
      "filePath": "components/shared/Post.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/shared/Post.tsx",
      "summary": "The `Post` component is a React component that renders a blog post. It takes in a number of props, including the post's `id`, `title`, `subtitle`, `author`, `date`, `image`, `tags`, `url`, `type`, `content`, `permalink`, `blogPhoto`, and `authorPhoto`. \n\nThe component first checks whether the post has an image by checking if either `blogPhoto` or `image` is truthy. If so, it sets `hasImage` to `true` and `imageUrl` to the URL of the image. If not, it sets `hasImage` to `false`.\n\nThe component then renders the post. It first renders the post's image (if it has one) using the `Image` component from the `next/image` package. If the post does not have an image, it renders a gray placeholder image. The component also renders the post's tags as clickable links, and the post's title, subtitle, author, and date. \n\nThe `Post` component is likely used in the larger project to render individual blog posts on a blog page. It is a reusable component that can be used to render any blog post, and it handles the logic of rendering the post's image and tags. \n\nExample usage:\n\n```jsx\n<Post\n  id={1}\n  title=\"My First Blog Post\"\n  subtitle=\"This is a subtitle\"\n  author=\"John Doe\"\n  date=\"2022-01-01\"\n  image=\"/path/to/image.jpg\"\n  tags=\"tag1, tag2, tag3\"\n  url=\"/blog/my-first-blog-post\"\n  type=\"blog\"\n  content=\"This is the content of my first blog post.\"\n  permalink=\"my-first-blog-post\"\n  blogPhoto=\"/path/to/blog/photo.jpg\"\n  authorPhoto=\"/path/to/author/photo.jpg\"\n/>\n```",
      "questions": "1. What are the required and optional props for the `Post` component?\n- The required props are `id`, `title`, `url`, and `permalink`, while the optional props are `subtitle`, `author`, `date`, `image`, `tags`, `type`, `content`, `blogPhoto`, and `authorPhoto`.\n\n2. What is the purpose of the `removeMd` function?\n- The `removeMd` function is used to remove markdown syntax from the `content` prop, which is used to display a summary of the blog post.\n\n3. What is the purpose of the `LogoBlack` component?\n- The `LogoBlack` component is used to display a logo for the author of the blog post."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/components/shared` folder contains reusable React components for the Ergo project. These components are designed to be used in various parts of the application, providing a consistent look and feel across the project.\n\n1. **ContributeForm.tsx**: This component renders a form for users to contribute to the Ergo project. It handles internationalization using `react-intl` and displays toast messages using `react-toastify`. The form includes inputs for the user's name, email, and message, as well as buttons linking to resources related to contributing to the project. The `sendMessage` function sends a POST request to a Strapi API endpoint when the form is submitted. Example usage:\n\n```jsx\nimport ContributeForm from './ContributeForm';\n\nfunction ContributePage() {\n  return (\n    <div>\n      <h1>Contribute to Ergo</h1>\n      <ContributeForm />\n    </div>\n  );\n}\n```\n\n2. **Feed.tsx**: This component renders a list of `Post` components, creating a feed of blog posts. It takes an optional `posts` prop, which is an array of post data. If no `posts` prop is provided, the feed will be empty. The component maps over the `data` property of the `posts` array and renders a `Post` component for each post. Example usage is provided in the summary above.\n\n3. **Post.tsx**: This component renders a blog post, taking in various props such as `id`, `title`, `subtitle`, `author`, `date`, `image`, `tags`, `url`, `type`, `content`, `permalink`, `blogPhoto`, and `authorPhoto`. The component handles the logic of rendering the post's image and tags. It can be used to render individual blog posts on a blog page. Example usage is provided in the summary above.\n\nThese components work together to create a cohesive user experience for the Ergo project. For example, the `Feed` component can be used to render a list of blog posts on a blog page, while the `Post` component can be used to render individual blog posts with their respective images and tags. The `ContributeForm` component can be used on a separate page to allow users to contribute to the project and access relevant resources. By reusing these components across the application, developers can ensure a consistent look and feel while reducing code duplication.",
  "questions": ""
}