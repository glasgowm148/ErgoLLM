{
  "folderName": "getErg",
  "folderPath": ".autodoc/docs/json/components/getErg",
  "url": "https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/getErg",
  "files": [
    {
      "fileName": "Exchanges.tsx",
      "filePath": "components/getErg/Exchanges.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/getErg/Exchanges.tsx",
      "summary": "The code is a React component that renders a section of the Ergoweb project's website displaying a list of exchanges where users can buy, sell, and trade Ergo, a cryptocurrency. The component takes in an array of exchange objects as a prop and maps over it to render each exchange's logo as an Image component. The component also displays a title, a short description, and a button linking to a buying guide blog post.\n\nThe component uses the `useTheme` hook from the `next-themes` package to determine whether to display the light or dark version of each exchange's logo. If the current theme is dark and the exchange has a dark logo, the component displays the dark logo. Otherwise, it displays the light logo.\n\nThe component uses Tailwind CSS classes to style the layout and typography of the section. The section is centered on the page with a maximum width of 1300 pixels and has a padding of 12 units on small screens and 16 units on large screens. The exchanges are displayed in a grid with two columns on small screens, four columns on large screens, and a gap of 0.5 units between each exchange.\n\nThe component is reusable and can be used in other parts of the Ergoweb project to display a list of exchanges. The component can be customized by passing in a different array of exchange objects as a prop or by changing the button's text, URL, and other properties. For example, the component could be used on a different page of the website to display a list of exchanges that support a different cryptocurrency. \n\nExample usage:\n\n```\nimport Exchanges from './Exchanges';\n\nconst exchanges = [\n  {\n    id: 1,\n    attributes: {\n      name: 'Exchange A',\n      url: 'https://exchange-a.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a-dark.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n    },\n  },\n  {\n    id: 2,\n    attributes: {\n      name: 'Exchange B',\n      url: 'https://exchange-b.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-b.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: null,\n    },\n  },\n];\n\nfunction App() {\n  return (\n    <div>\n      <Exchanges exchanges={exchanges} />\n    </div>\n  );\n}\n```",
      "questions": "1. What is the purpose of the `Exchanges` component?\n- The `Exchanges` component is used to display a list of exchanges where the Ergo cryptocurrency can be bought, sold, and traded.\n\n2. What is the role of the `useTheme` hook from `next-themes` in this code?\n- The `useTheme` hook is used to determine whether the user has selected a light or dark theme, and to conditionally render the appropriate exchange logo image based on the theme.\n\n3. What is the purpose of the `Button` component being imported and used in this code?\n- The `Button` component is used to display a button with the text \"BUYING GUIDE\" that links to a blog post about buying Ergo. The component allows for customization of the button's text color, background, and icon."
    },
    {
      "fileName": "GetErgHero.tsx",
      "filePath": "components/getErg/GetErgHero.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/getErg/GetErgHero.tsx",
      "summary": "The `GetErgHero` component is a React component that renders a hero section for the Ergoweb project's \"Get ERG\" page. The component imports the `Link` component from the Next.js library, the `FormattedMessage` component from the React Intl library, and the `getIconComponentByName` function from a custom `icons-map` utility module.\n\nThe component defines an array of `cards` that represent the different ways users can obtain and use ERG, the native cryptocurrency of the Ergo blockchain. Each card has a `title`, `text`, `icon`, and `url` property. The `title` and `text` properties are JSX elements that are wrapped in the `FormattedMessageFixed` component, which is a custom wrapper around the `FormattedMessage` component that fixes a bug related to the `defaultMessage` prop. The `icon` property is a string that represents the name of an icon that is passed to the `getIconComponentByName` function to retrieve the corresponding SVG icon component. The `url` property is a string that represents the URL of the page that the card links to.\n\nThe `GetErgHero` component takes a `title` prop and renders a hero section with a heading, a subheading, and a grid of cards. The heading is passed in as the `title` prop and is rendered in bold text. The subheading is a static text that describes the Ergo ecosystem. The grid of cards is rendered using the `cards` array. Each card is wrapped in a `Link` component that links to the URL specified in the `url` property. The card's `title`, `text`, and icon are rendered along with the link.\n\nThe `GetErgHero` component is used in the \"Get ERG\" page of the Ergoweb project to provide users with an overview of the different ways they can obtain and use ERG. The component is reusable and can be used in other pages or components that require a hero section with a grid of cards.",
      "questions": "1. What is the purpose of the `getIconComponentByName` function imported from `../../utils/icons-map`?\n- The `getIconComponentByName` function is used to retrieve an icon component based on its name.\n\n2. What is the significance of the `FormattedMessageFixed` function defined within the code?\n- The `FormattedMessageFixed` function is a custom wrapper around the `FormattedMessage` component from `react-intl` that is used to provide default messages and IDs for internationalization.\n\n3. What is the purpose of the `GetErgHero` component and what props does it expect?\n- The `GetErgHero` component is a UI component that displays information about the Ergo ecosystem and provides links to various resources. It expects a `title` prop of type `string`."
    },
    {
      "fileName": "Mining.tsx",
      "filePath": "components/getErg/Mining.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/getErg/Mining.tsx",
      "summary": "The `Mining` component is a React component that renders a page with information about mining Ergo, a cryptocurrency. The component contains two arrays of objects, `miningPoolsUrls` and `minersUrls`, which contain information about various mining pools and miners respectively. Each object in these arrays contains a `text` property, which is a React component that renders the name of the pool or miner, and a `url` property, which is the URL of the pool or miner's website. \n\nThe component renders a heading, followed by a grid of buttons that link to the various mining pools. The buttons are created using the `Button` component, which is imported from another file. Each button has a text label, an icon, and a link to the corresponding pool's website. The same pattern is repeated for the list of miners.\n\nThe component also contains several paragraphs of text that describe Ergo's mining algorithm and provide links to various resources for miners. The text is rendered using the `FormattedMessage` component from the `react-intl` library, which allows for easy localization of the text. \n\nOverall, the `Mining` component provides a user-friendly interface for miners to learn about and access various mining pools and miners for Ergo. It also provides links to additional resources for miners to learn more about Ergo's mining algorithm and community.",
      "questions": "1. What is the purpose of the `FormattedMessageFixed` function?\n- The `FormattedMessageFixed` function is a wrapper for the `FormattedMessage` component from the `react-intl` library, which is used to format messages based on the user's locale.\n\n2. What is the purpose of the `urlsComponent` variable?\n- The `urlsComponent` variable is a JSX element that contains a list of mining pools and miners, each with a corresponding URL and button component. It is used to display the list of mining resources on the page.\n\n3. What is the purpose of the `customClass` prop in the `Button` components?\n- The `customClass` prop is used to add a custom CSS class to the `Button` component, which can be used to apply additional styling or override existing styles."
    },
    {
      "fileName": "MiningCalculator.tsx",
      "filePath": "components/getErg/MiningCalculator.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/getErg/MiningCalculator.tsx",
      "summary": "The `MiningCalculator` component is responsible for calculating the daily revenue of mining ERG (Ergo) cryptocurrency based on the user's input of their hashrate. The component takes in four props: `currentPrice`, `currentBlockReward`, `networkHashrate`, and `difficulty`. \n\nThe component uses React's `useState` hook to manage the state of the user's inputted hashrate. The `dailyRevenueERG` variable is initialized to 0 and will be updated based on the user's input. The `blockTime` variable is set to 120 seconds (2 minutes), which is the time it takes to mine a block in the Ergo blockchain. The `blocksPerDay` variable is calculated by dividing the number of seconds in a day (86400) by the `blockTime`. \n\nThe `if` statement checks if the user's input is a valid number. If it is, the `dailyRevenueERG` variable is calculated using the formula: \n\n```\n((1000000 * props.currentBlockReward * parseFloat(hashRate) * blockTime) / props.difficulty) * blocksPerDay;\n```\n\nThis formula takes into account the current block reward, the user's hashrate, the block time, and the network difficulty to calculate the daily revenue in ERG. \n\nThe component returns a JSX element that displays the mining calculator UI. The UI consists of two columns: one for the user's input and one for the calculated results. The user's input is a text input field that accepts a number value for the hashrate. The calculated results display the daily revenue in ERG and the equivalent USD value based on the `currentPrice` prop. The UI also displays the current price, current block reward, and network hashrate for reference. \n\nOverall, the `MiningCalculator` component provides a simple way for users to calculate their potential daily revenue from mining ERG based on their hashrate and the current network conditions. It can be used as a tool for miners to make informed decisions about their mining operations.",
      "questions": "1. What is the purpose of this code?\n- This code is a React component for a mining calculator that calculates daily revenue based on user inputted hashrate and current cryptocurrency market data.\n\n2. What external dependencies does this code have?\n- This code imports the `useState` hook from the `react` library.\n\n3. What is the formula used to calculate `dailyRevenueERG`?\n- `dailyRevenueERG` is calculated as `((1000000 * props.currentBlockReward * parseFloat(hashRate) * blockTime) / props.difficulty) * blocksPerDay`, where `hashRate` is the user inputted hashrate, `blockTime` is a constant value of 120 seconds, and `blocksPerDay` is calculated as `86400 / blockTime`."
    },
    {
      "fileName": "Wallets.tsx",
      "filePath": "components/getErg/Wallets.tsx",
      "url": "https://github.com/ergoplatform/ergoweb/components/getErg/Wallets.tsx",
      "summary": "The `Wallets` component in this code is responsible for rendering a list of digital wallets, their features, and related information. It is designed to help users choose the right wallet for their needs and provide them with relevant resources.\n\nThe component is structured into two main sections: the header and the wallet list. The header contains a title, a brief description of digital wallets, and a button linking to setup guides. The wallet list is a table-like structure displaying various wallets and their features, such as support for mobile, desktop, dApp connectors, and ErgoPay.\n\nEach wallet is represented as a row in the table, with columns for the wallet name, features, and supported platforms. The wallets are grouped into categories like \"Community Favorites\", \"Extra Features\", and \"Reference Client\". Each wallet row is a link to either the wallet's website or its GitHub repository.\n\nHere's an example of a wallet row:\n\n```jsx\n<Link href=\"/ergo-wallet-app\">\n  <a\n    rel=\"noreferrer\"\n    className=\"flex flex-row h-28 border-x-[1px] border-[#585858] lg:border-0\"\n  >\n    <div className=\"w-1/5 p-1 my-auto flex flex-col lg:flex-row lg:justify-start lg:gap-4 lg:ml-4\">\n      <Logo className=\"w-6 h-6 mx-auto lg:mx-0 lg:w-12 lg:h-12\" viewBox=\"0 0 82 82\" />\n      <p className=\"text-center lg:my-auto\">Ergo Wallet App</p>\n    </div>\n    ...\n  </a>\n</Link>\n```\n\nThe component uses various imported icons and the `Button` component to create a visually appealing and informative layout. The responsive design ensures that the component looks good on both small and large screens.",
      "questions": "1. **Question:** What is the purpose of the `Wallets` component in this code?\n   **Answer:** The `Wallets` component is responsible for rendering a list of digital wallets with their features, such as mobile or desktop support, cold storage, dApp connector, and ErgoPay support. It also provides links to setup guides and other wallet-related resources.\n\n2. **Question:** How are the different wallet options being displayed in the `Wallets` component?\n   **Answer:** The wallet options are displayed using a combination of flexbox layouts and custom CSS classes. Each wallet option is represented as a flex row with five columns, displaying the wallet name, a feature description, and three icons representing cold storage, dApp connector, and ErgoPay support.\n\n3. **Question:** How are the wallet links being handled in this code?\n   **Answer:** The wallet links are handled using the `Link` component from the `next/link` package for internal navigation (e.g., Ergo Wallet App) and the standard anchor tag (`<a>`) with `target=\"_blank\"` and `rel=\"noreferrer\"` attributes for external links (e.g., Nautilus, Satergo, SAFEW, Minotaur, and Ergo Node)."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/components/getErg` folder contains React components and related code for displaying information about Ergo, a cryptocurrency, on the Ergoweb project's website. The components in this folder are focused on providing users with resources and tools related to obtaining and using Ergo, such as exchanges, wallets, and mining.\n\n`Exchanges.tsx` is a reusable component that renders a list of exchanges where users can buy, sell, and trade Ergo. It takes an array of exchange objects as a prop and displays each exchange's logo, along with a title, description, and a button linking to a buying guide blog post. The component can be customized by passing in a different array of exchange objects or changing the button's properties.\n\n`GetErgHero.tsx` is a component that renders a hero section for the \"Get ERG\" page, providing an overview of the different ways users can obtain and use Ergo. It displays a grid of cards, each with a title, text, icon, and URL, representing various methods of obtaining Ergo. The component is reusable and can be used in other pages or components that require a hero section with a grid of cards.\n\n`Mining.tsx` is a component that renders a page with information about mining Ergo, including a list of mining pools and miners, along with additional resources for miners to learn more about Ergo's mining algorithm and community.\n\n`MiningCalculator.tsx` is a component that calculates the daily revenue of mining Ergo based on the user's input of their hashrate. It takes in four props: `currentPrice`, `currentBlockReward`, `networkHashrate`, and `difficulty`. The component provides a simple way for users to calculate their potential daily revenue from mining Ergo based on their hashrate and the current network conditions.\n\n`Wallets.tsx` is a component that renders a list of digital wallets, their features, and related information. It helps users choose the right wallet for their needs and provides them with relevant resources. The component displays a table-like structure with wallet names, features, and supported platforms, grouped into categories like \"Community Favorites\", \"Extra Features\", and \"Reference Client\".\n\nExample usage of `Exchanges.tsx`:\n\n```jsx\nimport Exchanges from './Exchanges';\n\nconst exchanges = [\n  {\n    id: 1,\n    attributes: {\n      name: 'Exchange A',\n      url: 'https://exchange-a.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a-dark.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n    },\n  },\n  {\n    id: 2,\n    attributes: {\n      name: 'Exchange B',\n      url: 'https://exchange-b.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-b.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: null,\n    },\n  },\n];\n\nfunction App() {\n  return (\n    <div>\n      <Exchanges exchanges={exchanges} />\n    </div>\n  );\n}\n```\n\nThese components work together to provide a comprehensive set of resources and tools for users interested in obtaining and using Ergo. They can be used in various parts of the Ergoweb project to display relevant information and provide a user-friendly interface for interacting with Ergo.",
  "questions": ""
}