[["0",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Button.tsx)\n\nThe code defines a React component called `Button` that renders a button with text and an optional icon. The component takes in several props, including `text` (the text to display on the button), `url` (the URL to link to when the button is clicked), `icon` (the name of the icon to display on the button), `textColor` (the color of the text on the button), `newTab` (a boolean indicating whether the link should open in a new tab), `underline` (a boolean indicating whether the text on the button should be underlined), `background` (a boolean indicating whether the button should have a background color), `iconColor` (the color of the icon on the button), and `customClass` (a custom CSS class to apply to the button).\n\nThe component uses the `Link` component from the `next/link` library to create a link to the specified URL. If no URL is provided, the component does not render anything. The `Button` component also uses a utility function called `getIconComponentByName` to get the appropriate icon component based on the `icon` and `iconColor` props.\n\nThe `Button` component dynamically generates a CSS class based on the props passed in. The class includes styles for padding, font size, background color, and text color, among other things. If the `underline` prop is `true`, the class also includes an `underline` style. If the `newTab` prop is `true`, the link opens in a new tab. If the `background` prop is `false`, the class includes a `bg-transparent` style.\n\nThe `Button` component returns a button element wrapped in an anchor element that links to the specified URL. The button element includes the text passed in via the `text` prop, as well as an optional icon element generated by the `getIconComponentByName` function.\n\nThis component can be used throughout the `ergoweb` project to create buttons with consistent styling and behavior. Developers can pass in different props to customize the appearance and behavior of each button as needed. For example, a button that links to an external site might have `newTab` set to `true`, while a button that links to an internal page might have `newTab` set to `false`.\n## Questions: \n 1. What are the required and optional props for the Button component?\n- The required props for the Button component are `text` and `url`, while the optional props are `icon`, `textColor`, `newTab`, `underline`, `background`, `iconColor`, and `customClass`.\n2. What is the purpose of the `getIconComponentByName` function?\n- The `getIconComponentByName` function is used to retrieve an icon component based on its name and color, which is then rendered in the button if the `icon` prop is not set to 'none'.\n3. What CSS classes are applied to the button element?\n- The CSS classes applied to the button element include `py-1`, `px-4`, `inline-flex`, `items-center`, `whitespace-nowrap`, `btn`, `rounded-full`, `text-${textColor}`, `font-vinila-extended`, `text-[14px]`, `md:text-[16px]`, and `bg-brand-orange`, as well as any custom class passed in through the `customClass` prop. The `underline` and `bg-transparent` classes may also be added based on the values of their respective props.","metadata":{"source":".autodoc/docs/markdown/components/Button.md"}}],["1",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Dark.tsx)\n\nThe code above is a React component that is used to render a dark-themed page layout for the Ergo Platform website. The component takes in three props: `children`, `desc`, and `title`. The `children` prop is used to render the content of the page, while the `desc` and `title` props are used to set the meta description and title of the page respectively.\n\nThe component is exported as a default function and is named `Dark`. When the component is rendered, it returns a `main` element with a class of `dark:bg-brand-black`. This class is used to set the background color of the page to black when the dark theme is enabled.\n\nThe `Head` component from the `next/head` module is used to set the meta description and title of the page. The `meta` tag is used to set the character encoding of the page to UTF-8, while the `title` tag is used to set the title of the page to the value of the `title` prop passed to the component.\n\nHere is an example of how the `Dark` component can be used in the larger project:\n\n```\nimport Dark from './components/Dark';\n\nfunction MyPage() {\n  return (\n    <Dark title=\"My Page\">\n      <h1>Welcome to My Page</h1>\n      <p>This is the content of my page.</p>\n    </Dark>\n  );\n}\n```\n\nIn the example above, the `Dark` component is imported from the `./components/Dark` file and is used to render a dark-themed page layout for the `MyPage` component. The `title` prop is set to \"My Page\", which is used to set the title of the page to \"My Page | Ergo Platform\". The `h1` and `p` elements are passed as children to the `Dark` component and are rendered as the content of the page.\n## Questions: \n 1. What is the purpose of the `Dark` component?\n   - The `Dark` component is used to render the main content of a page with a dark background color.\n\n2. What are the optional props that can be passed to the `Dark` component?\n   - The `Dark` component accepts two optional props: `desc` for the page description and `title` for the page title.\n\n3. What is the purpose of the `Head` component from the `next/head` package?\n   - The `Head` component is used to modify the head section of the HTML document, allowing for the addition of metadata such as the page title and character encoding.","metadata":{"source":".autodoc/docs/markdown/components/Dark.md"}}],["2",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Footer.tsx)\n\nThe `Footer` component in this code file is responsible for rendering the footer section of the Ergoweb project. It fetches and displays the latest blog posts and news articles, as well as providing navigation links to various sections of the website, social media icons, and contact information.\n\nThe component uses the `useState` and `useEffect` hooks from React to manage the state of the fetched data. The `locale` variable is obtained from the `useRouter` hook, which is used to fetch the data in the user's preferred language. The `fetchData` function is defined within the `useEffect` hook, which fetches the latest blog posts and news articles from the API and updates the state variables `postsData` and `newsData`.\n\nThe footer is divided into several sections, including the logo, social media icons, contact information, and navigation links to various sections of the website. The social media icons are rendered using the `getIconComponentByName` utility function, which returns the appropriate icon component based on the provided name.\n\nThe navigation links are organized into columns, with each column containing a title and a list of links. The titles are wrapped in `Link` components, which navigate to the corresponding sections of the website when clicked. The list of links is conditionally rendered based on the length of the `postsData` and `newsData` arrays, ensuring that the blog and news sections are only displayed if there is data to show.\n\nThe footer also includes the Ergo Platform copyright information, privacy policy, and legal links, as well as the BpsaaLogo component and the physical address of the company.\n\nOverall, this `Footer` component serves as a consistent and informative section at the bottom of the Ergoweb project, providing users with easy access to important information and resources.\n## Questions: \n 1. **Question**: What is the purpose of the `getIconComponentByName` function and where is it defined?\n   **Answer**: The `getIconComponentByName` function is used to get the appropriate icon component based on the provided name. It is defined in the `../utils/icons-map` module.\n\n2. **Question**: How does the `useEffect` hook fetch and update the `postsData` and `newsData` states?\n   **Answer**: The `useEffect` hook fetches data from the API using the provided URLs for blog posts and news, and then updates the `postsData` and `newsData` states with the fetched data.\n\n3. **Question**: How are the fetched blog posts and news displayed in the footer?\n   **Answer**: The fetched blog posts and news are displayed in the footer using the `postsData` and `newsData` states. They are mapped to create a list of links with their respective titles, which are then rendered under the \"BLOG\" and \"NEWS\" sections in the footer.","metadata":{"source":".autodoc/docs/markdown/components/Footer.md"}}],["3",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/LanguageSwitcher.tsx)\n\nThe `LanguageSwitcher` component is a React component that provides a dropdown list of available languages for the user to switch between. The component is designed to be used in a larger project, likely a website or web application, where the user needs to be able to switch between different language versions of the content.\n\nThe component imports several dependencies, including `Fragment` and `useState` from React, `Listbox` and `Transition` from the `@headlessui/react` library, `getIconComponentByName` from a custom `icons-map` utility, `useRouter` from the `next/router` library, and `Link` from the `next/link` library.\n\nThe component takes a single prop, `color`, which determines the color of the language selector icon. If `color` is not provided, it defaults to `'default'`.\n\nThe component uses the `useRouter` hook to get information about the current locale (i.e. language), available locales, and current URL path. It then uses the `useState` hook to set the initial value of the selected locale to the current locale.\n\nThe component renders a `Listbox` component, which provides the dropdown list of available languages. The `Listbox` component takes a `value` prop, which is set to the `selected` state variable, and an `onChange` prop, which is set to the `setSelected` state updater function.\n\nThe `Listbox` component contains a `div` element with a `className` of `\"relative\"`. This `div` contains a `Listbox.Button` component, which serves as the visible language selector. The `Listbox.Button` component contains two `span` elements: one to display the currently selected locale, and one to display the language selector icon. The icon is determined by the `color` prop and the `getIconComponentByName` utility.\n\nWhen the user clicks on the `Listbox.Button`, a `Transition` component is triggered. This component provides a smooth animation as the dropdown list of available languages appears and disappears. The `Transition` component takes an `as` prop, which is set to `Fragment` to avoid adding unnecessary markup to the DOM. It also takes `leave`, `leaveFrom`, and `leaveTo` props to define the animation when the dropdown list disappears.\n\nThe `Listbox` component also contains a `Listbox.Options` component, which provides the actual dropdown list of available languages. This component maps over the `locales` array (excluding the `'default'` locale) to render a `Listbox.Option` component for each available locale. Each `Listbox.Option` component contains a `Link` component that wraps a `div` element with the name of the locale. When the user clicks on a `Listbox.Option`, the `Link` component updates the URL path to include the selected locale.\n\nOverall, the `LanguageSwitcher` component provides a user-friendly way for users to switch between different language versions of the content in a larger web project.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a React component for a language switcher feature that allows users to select a different language for the website.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries and dependencies, including `react`, `@headlessui/react`, `next/router`, and a custom `getIconComponentByName` function from `../utils/icons-map`.\n\n3. What is the expected behavior of this code when a user selects a different language?\n- When a user selects a different language, the `selected` state is updated to the new locale value, and the `Link` component updates the URL path to include the new locale. The website content should then be displayed in the selected language.","metadata":{"source":".autodoc/docs/markdown/components/LanguageSwitcher.md"}}],["4",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Layout.tsx)\n\nThe code above defines a React component called `Layout` that serves as a template for the layout of pages in the ErgoWeb project. The component imports three other components: `Head`, `Footer`, and `Navigation`. It also imports the `React` library.\n\nThe `Layout` component takes in a set of props, including `children`, `desc`, `title`, and `footer`. The `children` prop is a required prop that represents the content of the page that will be rendered within the layout. The `desc` prop is an optional string that represents the description of the page. The `title` prop is an optional string that represents the title of the page. The `footer` prop is an optional boolean that determines whether or not to include the `Footer` component at the bottom of the page.\n\nThe `Layout` component returns a JSX element that contains the `Head` component, which sets the character encoding and the title of the page. The title is set to the value of the `title` prop passed into the component, followed by the string \" | Ergo Platform\". The `Navigation` component is also included in the JSX element, which renders the navigation bar at the top of the page. The `children` prop is rendered within a `div` element, which represents the main content of the page. Finally, the `Footer` component is included in the JSX element if the `footer` prop is set to `true`.\n\nThis `Layout` component is used as a wrapper for all pages in the ErgoWeb project. It provides a consistent layout and structure for all pages, including a navigation bar at the top and a footer at the bottom. The `title` prop can be used to set the title of each page, and the `footer` prop can be used to determine whether or not to include the footer on a particular page. Here is an example of how the `Layout` component can be used in a page:\n\n```\nimport Layout from './Layout';\n\nexport default function HomePage() {\n  return (\n    <Layout title=\"Home\">\n      <h1>Welcome to ErgoWeb!</h1>\n      <p>This is the home page.</p>\n    </Layout>\n  );\n}\n```\n\nIn this example, the `Layout` component is imported and used to wrap the content of the `HomePage` component. The `title` prop is set to \"Home\", which will be used as the title of the page. The `h1` and `p` elements represent the content of the page, which will be rendered within the `Layout` component.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component called `Layout` that renders a navigation bar, a main content area, and an optional footer.\n\n2. What are the props that can be passed to the `Layout` component?\n   The `Layout` component accepts three props: `children` (of type `React.ReactNode`), `title` (of type `string`, optional), and `footer` (of type `boolean`, optional).\n\n3. What is the significance of the `Head` component and what does it do?\n   The `Head` component is imported from the `next/head` module and is used to modify the document head of the page. In this code, it sets the page title to be a combination of the `title` prop passed to the `Layout` component and the string \"Ergo Platform\".","metadata":{"source":".autodoc/docs/markdown/components/Layout.md"}}],["5",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Navigation.tsx)\n\nThe `Navigation` component in this code file is responsible for rendering the main navigation menu of the Ergoweb project. It includes a logo, navigation buttons, language switcher, dark mode switcher, and a search component. The navigation menu is responsive and adapts to different screen sizes.\n\nThe component accepts an optional `enableLanguages` prop, which is set to `true` by default. If set to `false`, the language switcher will not be rendered.\n\nThe navigation menu consists of four main sections: Ergo Community, Get ERG, Discover, and Ecosystem. Each section has its own set of buttons, which are created using the `Button` component. The `pathname` variable is used to determine if the current page matches the button's URL, and if so, an underline is added to the button.\n\nThe language switcher and dark mode switcher are rendered using the `LanguageSwitcher` and `DarkModeSwitch` components, respectively. The `Search` component is also included in the navigation menu.\n\nThe navigation menu uses the `Popover` component from the `@headlessui/react` library to create a responsive menu that adapts to different screen sizes. The `Transition` component is used to animate the menu's appearance and disappearance when the screen size changes.\n\nThe navigation menu also includes social media icons and links to external resources, such as the Ergo GitHub repository, Twitter, YouTube, Telegram, Discord, Reddit, and Discourse.\n\nHere's an example of how to use the `Navigation` component:\n\n```jsx\nimport Navigation from './Navigation';\n\nfunction App() {\n  return (\n    <div>\n      <Navigation />\n      {/* Other components */}\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn summary, the `Navigation` component is responsible for rendering the main navigation menu of the Ergoweb project, including the logo, navigation buttons, language switcher, dark mode switcher, and search component. The menu is responsive and adapts to different screen sizes.\n## Questions: \n 1. **Question:** What is the purpose of the `enableLanguages` prop in the `Navigation` component?\n   **Answer:** The `enableLanguages` prop is used to conditionally render the `LanguageSwitcher` component. If `enableLanguages` is set to `true`, the `LanguageSwitcher` component will be displayed, otherwise, it will not be rendered.\n\n2. **Question:** How does the `Navigation` component handle the active state of the navigation buttons?\n   **Answer:** The active state of the navigation buttons is determined by comparing the `pathname` from the `useRouter()` hook with the `url` prop of each `Button` component. If they match, the `underline` prop is set to `true`, which adds an underline style to the active button.\n\n3. **Question:** How does the `DarkModeSwitch` component work in the `Navigation` component?\n   **Answer:** The `DarkModeSwitch` component is responsible for toggling the dark mode theme on and off. It uses the `theme` and `setTheme` values from the `useTheme()` hook to manage the current theme state and update it accordingly when the switch is toggled.","metadata":{"source":".autodoc/docs/markdown/components/Navigation.md"}}],["6",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Search.tsx)\n\nThe `Search` component is a React component that provides a search bar functionality for the Ergoweb project. It allows users to search for blog posts by title, subtitle, or content. \n\nThe component uses the `useRef`, `useState`, and `useCallback` hooks from React. The `searchRef` is used to reference the search input element, while `query` and `results` are used to store the search query and results, respectively. `active` is used to track whether the search bar is active or not.\n\nThe `searchEndpoint` function constructs the search endpoint URL using the `NEXT_PUBLIC_STRAPI_API` environment variable and the search query. The endpoint URL includes sorting by date in descending order, pagination with a page size of 100, and filtering by title, subtitle, or content that contains the search query.\n\nThe `onChange` function is called whenever the search input value changes. It sets the `query` state to the new value and fetches the search results using the `searchEndpoint` function. The results are then stored in the `results` state.\n\nThe `onFocus` function is called whenever the search input is focused. It sets the `active` state to `true` and adds a click event listener to the window to detect clicks outside the search bar.\n\nThe `onClick` function is called whenever a click event occurs on the window. If the click is outside the search bar, it sets the `active` state to `false` and removes the click event listener from the window.\n\nThe `return` statement renders the search bar and the search results. If the search bar is active and there are search results, it renders a list of search cards that link to the corresponding blog posts. If there are no search results and the search query is not empty, it displays a message indicating that no results were found.\n\nOverall, the `Search` component provides a simple and intuitive search functionality for the Ergoweb project. It can be easily integrated into other components and pages that require search capabilities.\n## Questions: \n 1. What is the purpose of the `useCallback` hook in this code?\n   - The `useCallback` hook is used to memoize the `onChange` and `onFocus` functions, which helps to optimize performance by preventing unnecessary re-renders.\n\n2. What is the significance of the `NEXT_PUBLIC_STRAPI_API` environment variable?\n   - The `NEXT_PUBLIC_STRAPI_API` environment variable is used to construct the search endpoint URL, which is used to fetch search results from a Strapi API.\n\n3. What is the purpose of the `active` state variable?\n   - The `active` state variable is used to determine whether or not to display the search results. It is set to `true` when the search input is focused and set to `false` when the user clicks outside of the search input.","metadata":{"source":".autodoc/docs/markdown/components/Search.md"}}],["7",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/Typography.tsx)\n\nThe code defines a function called `Typography` that returns a block of HTML elements representing various typographical styles. The purpose of this code is to provide a standardized set of typographical styles that can be used throughout the larger project. \n\nThe function returns a `div` element containing a series of `h1`, `h2`, `h3`, `h4`, and `p` elements, each with a specific class name that corresponds to a particular typographical style. For example, the `h1` element represents a top-level headline, while the `p` element with the class name `font-body-2-bold` represents a bolded body text. \n\nBy using these standardized class names, developers can easily apply consistent typographical styles across the project. For example, if a developer wants to display a top-level headline, they can simply use the `h1` element and the corresponding class name, rather than having to define the font size, weight, and other properties manually. \n\nHere is an example of how a developer might use this code in their project:\n\n```\nimport Typography from 'ergoweb/Typography';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Typography />\n      <p className=\"font-body-2-regular\">This is some regular body text.</p>\n      <p className=\"font-subtitle-1\">This is a subtitle.</p>\n    </div>\n  );\n}\n```\n\nIn this example, the `MyComponent` function returns a `div` element containing the `Typography` component, as well as some additional text using the `font-body-2-regular` and `font-subtitle-1` class names. This ensures that the text is displayed using the same typographical styles as the rest of the project.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a function that returns a block of HTML code representing various typography styles.\n\n2. What are the different typography styles represented in this code?\n- The code includes various headline styles (h1-h4), subtitle styles (font-subtitle-1 to font-subtitle-4), body styles (font-body-1 and font-body-2), and button styles (font-button, font-button-bold, and font-button-regular).\n\n3. Are there any additional CSS styles applied to these typography styles?\n- Yes, some of the typography styles have additional CSS classes applied to them, such as font-subtitle-3-bold and font-body-2-regular. These classes likely define additional font properties such as font size, weight, and color.","metadata":{"source":".autodoc/docs/markdown/components/Typography.md"}}],["8",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/blog/BlogNews.tsx)\n\nThe code is a React component that displays a list of news posts. It imports several dependencies, including `Link` from Next.js, `useState` from React, `InfiniteScroll` from `react-infinite-scroll-component`, `FormattedDate` from `react-intl`, and a custom `Button` component. \n\nThe `NewsPost` function is a child component that renders a single news post. It takes in four props: `title`, `subtitle`, `date`, and `url`. If `url` is not null, it renders a clickable `div` element that displays the post's date, title, and subtitle (if it exists). The `Button` component is also rendered at the bottom of the `div` element, which allows the user to read the full post. \n\nThe `BlogNews` function is the parent component that renders a list of news posts using the `NewsPost` component. It takes in a single prop `news`, which is an array of news posts. It uses the `useState` hook to initialize the `posts` state to the `news` prop and the `hasMore` state to `true`. \n\nThe `getMorePost` function is an asynchronous function that fetches more news posts from an API endpoint. It uses the `fetch` function to make a GET request to the API endpoint, passing in query parameters to sort the posts by date in descending order, limit the number of posts to 9, and filter by type \"news\". It then updates the `posts` state by concatenating the existing `posts` array with the new posts array. If there are no more posts to fetch, it sets the `hasMore` state to `false`. \n\nThe `BlogNews` component uses the `InfiniteScroll` component to render the list of news posts. It passes in the `posts` array length as the `dataLength` prop, the `getMorePost` function as the `next` prop, and the `hasMore` state as the `hasMore` prop. It also renders a loading spinner when new posts are being fetched and a message when there are no more posts to show. \n\nOverall, this code is a reusable component that can be used to display a list of news posts in a web application. It uses several third-party libraries to implement infinite scrolling and date formatting, and it fetches data from an API endpoint to dynamically load more posts as the user scrolls down the page.\n## Questions: \n 1. What external libraries or frameworks are being used in this code?\n- The code is using Next.js, React, react-infinite-scroll-component, and react-intl.\n\n2. What is the purpose of the `NewsPost` component?\n- The `NewsPost` component is responsible for rendering a single news post with a title, subtitle, date, and URL.\n\n3. What is the purpose of the `getMorePost` function?\n- The `getMorePost` function is called when the user scrolls to the bottom of the page and is responsible for fetching more news posts from an external API and appending them to the existing list of posts.","metadata":{"source":".autodoc/docs/markdown/components/blog/BlogNews.md"}}],["9",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/blog/BlogPosts.tsx)\n\nThe `BlogPosts` component is a React component that displays a list of blog posts. It uses the `InfiniteScroll` component from the `react-infinite-scroll-component` library to load more posts as the user scrolls down the page. \n\nThe component takes in a `data` prop, which is an array of blog post objects. It also takes an optional `locale` prop, which specifies the language of the blog posts to display, and a `filter` prop, which can be used to filter the posts by a specific category or tag. \n\nThe `useState` hook is used to manage the component's state. The `posts` state variable is initialized with the `data` prop, and is updated with new posts as they are loaded. The `hasMore` state variable is used to determine whether there are more posts to load.\n\nThe `getMorePost` function is called when the user scrolls to the bottom of the page and triggers the `next` prop of the `InfiniteScroll` component. It makes a GET request to the Strapi API to fetch more blog posts. The `pagination` query parameters are used to specify the range of posts to fetch, and the `filters` query parameter is used to filter the posts by type and category/tag. The `locale` prop is also included in the query string to fetch posts in the specified language. \n\nThe new posts are added to the `posts` state variable using the spread operator. If there are no more posts to load, the `hasMore` state variable is set to `false`.\n\nThe `return` statement renders the `InfiniteScroll` component, which wraps a grid of `Post` components. The `Post` component is a custom component that displays the details of a single blog post. The `key` prop is set to the `id` of the post, and the other props are set to the corresponding attributes of the post object. \n\nIf there are no posts to display, the `return` statement returns `null`.\n\nOverall, this component provides a reusable way to display a list of blog posts with infinite scrolling and filtering capabilities. It can be used in a larger project to display a blog page or a list of related posts on a content page.\n## Questions: \n 1. What is the purpose of the `InfiniteScroll` component and how does it work?\n   - The `InfiniteScroll` component is used to implement infinite scrolling functionality, where more content is loaded as the user scrolls down the page. It works by calling the `getMorePost` function when the user reaches the end of the current content, which fetches more posts from the API and adds them to the existing `posts` state.\n\n2. What is the `filter` prop used for and how is it set?\n   - The `filter` prop is used to filter the blog posts based on a specific criteria, such as a tag or category. It is set by checking if the prop is undefined and setting it to an empty string if it is.\n\n3. What is the purpose of the `process.env.NEXT_PUBLIC_STRAPI_API` variable and where is it defined?\n   - The `process.env.NEXT_PUBLIC_STRAPI_API` variable is used to store the URL of the Strapi API that is used to fetch the blog posts. It is defined in an environment variable file, which is not included in this code snippet.","metadata":{"source":".autodoc/docs/markdown/components/blog/BlogPosts.md"}}],["10",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/blog/Media.tsx)\n\nThe code is a React component that renders a list of media posts. The component takes an array of media posts as a prop and maps over it to render each post using the `MediaPost` component. \n\nThe `MediaPost` component takes in a `MediaPostProps` object that contains the title, description, date, and link of the media post. It then renders the post with a title, date, description, and a \"READ\" button that links to the post. \n\nThe `FormattedDate` component from the `react-intl` library is used to format the date of the post. The `Button` component is imported from the `Button` file in the same directory and is used to render the \"READ\" button. \n\nThe `Media` component renders a heading \"Media About Us\" and a horizontal list of media posts using the `flex` and `space-x-8` classes. If there are no media posts, the component does not render anything. \n\nThis component can be used in the larger project to display a list of media posts on a page. The `Media` component can be imported and used in any page that requires a list of media posts. The `MediaPost` component can also be used independently to render a single media post. \n\nExample usage of the `Media` component:\n\n```\nimport Media from './Media';\n\nfunction MediaPage() {\n  const mediaPosts = [\n    {\n      id: 1,\n      attributes: {\n        Title: 'Ergoweb featured in Forbes',\n        Description: 'Ergoweb was recently featured in Forbes for its innovative approach to ergonomics.',\n        Date: '2022-01-01',\n        Link: 'https://www.forbes.com/ergoweb-featured-in-forbes'\n      }\n    },\n    {\n      id: 2,\n      attributes: {\n        Title: 'Ergoweb wins award',\n        Description: 'Ergoweb won the Best Ergonomics Company award at the 2022 Ergonomics Conference.',\n        Date: '2022-02-01',\n        Link: 'https://www.ergonomicsconference.com/awards'\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Media mediaPosts={mediaPosts} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `Media` component and what does it render?\n- The `Media` component renders a list of `MediaPost` components based on the `mediaPosts` prop passed to it.\n\n2. What are the required and optional props for the `MediaPost` component?\n- The required prop for the `MediaPost` component is `Title`, while the optional props are `Description`, `Date`, and `Link`. \n\n3. What is the purpose of the `Button` component and what props can be passed to it?\n- The `Button` component is used to render a button with customizable text, URL, and styling. Props that can be passed to it include `text`, `url`, `newTab`, `underline`, `textColor`, and `background`.","metadata":{"source":".autodoc/docs/markdown/components/blog/Media.md"}}],["11",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/blog)\n\nThe `.autodoc/docs/json/components/blog` folder contains three React components that are used to display different types of content on a blog page, such as news posts, blog posts, and media posts. These components are designed to be reusable and can be imported into other parts of the project as needed.\n\n1. **BlogNews.tsx**: This component displays a list of news posts with infinite scrolling functionality. It fetches more news posts from an API endpoint as the user scrolls down the page. The `BlogNews` component takes in a `news` prop, which is an array of news post objects. It uses the `NewsPost` child component to render each post with its title, subtitle, date, and a link to the full post. The `InfiniteScroll` component from the `react-infinite-scroll-component` library is used to implement the infinite scrolling feature. Example usage:\n\n   ```jsx\n   import BlogNews from './BlogNews';\n\n   function NewsPage() {\n     const newsPosts = [\n       // Array of news post objects\n     ];\n\n     return (\n       <div>\n         <BlogNews news={newsPosts} />\n       </div>\n     );\n   }\n   ```\n\n2. **BlogPosts.tsx**: This component displays a list of blog posts with infinite scrolling and filtering capabilities. It takes in a `data` prop, which is an array of blog post objects, an optional `locale` prop for specifying the language of the posts, and a `filter` prop for filtering the posts by category or tag. The `InfiniteScroll` component is used to load more posts as the user scrolls down the page. The `Post` child component is used to render each post with its title, date, and other attributes. Example usage:\n\n   ```jsx\n   import BlogPosts from './BlogPosts';\n\n   function BlogPage() {\n     const blogPosts = [\n       // Array of blog post objects\n     ];\n\n     return (\n       <div>\n         <BlogPosts data={blogPosts} locale=\"en\" filter={{ category: 'tech' }} />\n       </div>\n     );\n   }\n   ```\n\n3. **Media.tsx**: This component renders a list of media posts, such as articles or interviews about the project. It takes in a `mediaPosts` prop, which is an array of media post objects. The `MediaPost` child component is used to render each post with its title, description, date, and a link to the full post. The `FormattedDate` component from the `react-intl` library is used to format the date of the post. Example usage:\n\n   ```jsx\n   import Media from './Media';\n\n   function MediaPage() {\n     const mediaPosts = [\n       // Array of media post objects\n     ];\n\n     return (\n       <div>\n         <Media mediaPosts={mediaPosts} />\n       </div>\n     );\n   }\n   ```\n\nThese components can be used together or separately to create a blog page or display related content on other pages of the project. They provide a flexible and modular way to manage and display different types of content with various features, such as infinite scrolling, filtering, and localization.","metadata":{"source":".autodoc/docs/markdown/components/blog/summary.md"}}],["12",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/CommunityCard.tsx)\n\nThe code defines a React component called `CommunityCard` that renders a card with a title, an icon, some text, and a link to an external URL. The component takes four props: `title` (a string), `icon` (a string representing the name of an icon), `text` (a string), and `url` (a string representing the URL to link to).\n\nThe component uses the `Link` component from the `next/link` library to create a client-side navigation link to the external URL. The `passHref` prop is passed to `Link` to ensure that the `a` tag that wraps the card is passed the `href` attribute. The `target=\"_blank\"` and `rel=\"noopener noreferrer\"` attributes are added to the `a` tag to open the link in a new tab and prevent security vulnerabilities.\n\nThe card itself is styled using Tailwind CSS classes. It has a rounded rectangle shape (`rounded-xl`), a background color (`card-bg`), and a border (`dark:border-brand-orange border`). The icon and title are displayed side by side using a flexbox layout (`flex`). The icon is obtained by calling the `getIconComponentByName` function from the `../../utils/icons-map` module, passing it the `icon` prop. The `getIconComponentByName` function returns a React component that renders the specified icon. The title is displayed in a bold font (`font-vinila-extended`) and a large size (`text-[24px]`). The text is displayed below the title.\n\nThis component can be used in the larger project to display cards with community information, such as links to social media pages or forums. The `CommunityCard` component can be reused throughout the project by passing different props to customize the content and appearance of each card. For example:\n\n```\n<CommunityCard\n  title=\"Join our Discord server\"\n  icon=\"discord\"\n  text=\"Connect with other members of our community on Discord.\"\n  url=\"https://discord.gg/example\"\n/>\n```\n## Questions: \n 1. What is the purpose of the `getIconComponentByName` function and where is it defined?\n- The `getIconComponentByName` function is used to retrieve an icon component based on its name, and it is defined in the `utils/icons-map` file.\n2. What is the expected format of the `url` prop passed to the `CommunityCard` component?\n- The `url` prop is expected to be a string representing the URL that the card should link to.\n3. What styling classes are applied to the card element and what is their purpose?\n- The `rounded-xl`, `px-9`, `py-8`, `card-bg`, `dark:border-brand-orange`, `border`, `relative`, and `z-10` classes are applied to the card element to provide styling for its shape, padding, background color, border, and positioning.","metadata":{"source":".autodoc/docs/markdown/components/community/CommunityCard.md"}}],["13",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/CommunityCardsFeed.tsx)\n\nThe code defines a React component called `JoinUs` that renders a section of a web page with links to various social media platforms and community resources related to the Ergo blockchain platform. The component imports the `FormattedMessage` component from the `react-intl` library, which is used to provide translations for the text displayed on the page. \n\nThe `cards` array contains objects that define the properties of each link card, including the title, text, icon, and URL. The `FormattedMessageFixed` function is a wrapper around the `FormattedMessage` component that is used to pass the `defaultMessage` and `id` props to the `FormattedMessage` component. \n\nThe `JoinUs` component renders two different layouts depending on the screen size. On smaller screens, the cards are displayed in a horizontal scrollable list, while on larger screens, the cards are displayed in a grid layout. The `CommunityCard` component is used to render each link card by passing the appropriate properties from the `cards` array. \n\nThe component also includes a paragraph of text that encourages users to get involved with the Ergo community and provides a link to the Contributing page on the Ergonaut website. \n\nOverall, this component serves as a central hub for users to discover and connect with the Ergo community across various social media platforms and community resources. It provides a user-friendly and visually appealing way to access these resources and encourages community engagement. \n\nExample usage: \n\n```jsx\nimport JoinUs from './JoinUs';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to the Ergo Community!</h1>\n      <JoinUs />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `JoinUs` component?\n- The `JoinUs` component is responsible for rendering a section of the Ergoweb project that displays various community links and information.\n\n2. What is the `FormattedMessageFixed` function used for?\n- The `FormattedMessageFixed` function is a custom wrapper around the `FormattedMessage` component from the `react-intl` library, used to provide default messages and message IDs for the community card titles and text.\n\n3. What is the purpose of the `cards` array?\n- The `cards` array contains objects representing various community links and information, which are used to render `CommunityCard` components within the `JoinUs` component.","metadata":{"source":".autodoc/docs/markdown/components/community/CommunityCardsFeed.md"}}],["14",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/CommunityHero.tsx)\n\nThis code defines a React component called `CommunityHero` that renders a section of a webpage for the ergoweb project. The component imports the `FormattedMessage` component from the `react-intl` library, which is used to display localized text. \n\nThe `CommunityHero` component returns a `div` element with an `id` of \"CommunityHero\" and several CSS classes for styling. Inside the `div`, there is another `div` element that contains a `p` element with a subtitle for the community section of the webpage. The subtitle is displayed using the `FormattedMessage` component, which takes two props: `defaultMessage` and `id`. The `defaultMessage` prop is the text to display if no translation is available, and the `id` prop is used to look up the translated text in the project's localization files. \n\nFinally, the `CommunityHero` component renders an `h1` element with the text \"Community\". This heading is not localized and is likely used as a visual cue to the user that they are in the community section of the webpage.\n\nOverall, this code defines a simple React component that renders a section of a webpage with a localized subtitle and a heading. It is likely used as part of a larger project to display information about the ergoweb community and encourage user engagement. Here is an example of how the `CommunityHero` component might be used in a larger React component:\n\n```\nimport CommunityHero from './CommunityHero';\n\nfunction CommunityPage() {\n  return (\n    <div>\n      <CommunityHero />\n      {/* other community page content */}\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `FormattedMessage` component from 'react-intl' being imported?\n- The `FormattedMessage` component is being used to display a localized subtitle for the CommunityHero component.\n\n2. What is the significance of the CSS classes being used in the JSX code?\n- The CSS classes are being used to style the CommunityHero component, with specific styles being applied based on screen size.\n\n3. Why is the `h1` element included in the JSX code without any text or additional styling?\n- It is unclear why the `h1` element is included without any text or additional styling, as it does not appear to serve any purpose in the current implementation of the CommunityHero component.","metadata":{"source":".autodoc/docs/markdown/components/community/CommunityHero.md"}}],["15",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/ErgoFoundation.tsx)\n\nThe code defines a React component called `ErgoFoundation` that renders a section of the Ergoweb project's website. The purpose of this component is to display information about the Ergo Foundation, a community-driven entity focused on promoting the development and adoption of the Ergo Platform and its native token (ERG). \n\nThe component is composed of two main sections. The first section displays the Ergo Foundation logo using two different versions of the `ErgoFoundationIcon` component, one for light backgrounds and one for dark backgrounds. The second section displays a list of six items that describe the goals of the Ergo Foundation. Each item is displayed using the `FormattedMessage` component, which allows for internationalization of the text. The `FormattedMessage` component takes an `id` and a `defaultMessage` prop, which are used to look up the translated text in a language file. The `values` prop is used to pass in dynamic content, such as the bolded text in each list item.\n\nThe component uses various CSS classes to style the content, including `max-w-[1300px]` to set a maximum width for the section, `mx-auto` to center it horizontally, and `font-vinila-extended` to set a custom font. The component is also responsive, with different font sizes and margins for smaller and larger screens.\n\nThis component can be used as a standalone section on the Ergoweb website or as part of a larger page that includes other sections about the Ergo Platform and its ecosystem. It provides a clear and concise overview of the goals of the Ergo Foundation and helps to promote the adoption of the Ergo Platform.\n## Questions: \n 1. What is the purpose of the `ErgoFoundation` component?\n- The `ErgoFoundation` component is responsible for rendering the content related to the Ergo Foundation, which is a community-driven entity focused on promoting non-breaking development of Ergo Platform protocol, publicizing the widespread adoption and use of Ergo Platform and its native token (ERG), developing the ecosystem around the Ergo Platform, spreading the use of Ergo Platform and blockchain technology for social good, upholding truly decentralized infrastructure, and supporting privacy as a basic human right.\n\n2. What libraries or components are being imported and used in this file?\n- This file imports and uses the `FormattedMessage` component from the `react-intl` library, as well as the `ErgoFoundationIcon` and `ErgoFoundationIconLight` components from a local `icons` file.\n\n3. What is the purpose of the `values` prop being passed to the `FormattedMessage` components?\n- The `values` prop is being used to pass in an object with a `b` key, which is a function that takes in an array of `chunks` and returns a `strong` element with those `chunks` as its children. This is used to bold certain parts of the text within the `FormattedMessage` components.","metadata":{"source":".autodoc/docs/markdown/components/community/ErgoFoundation.md"}}],["16",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/HallOfFame.tsx)\n\nThe code defines a React component called `HallOfFame` that displays a list of people involved in the Ergo project. The component imports several other components and icons, including `Tab` from `@headlessui/react`, `Image` from `next/image`, `Link` from `next/link`, `FormattedMessage` from `react-intl`, and several custom icons. \n\nThe `HallOfFame` component takes an optional prop called `teamMembers`, which is an array of objects representing people involved in the project. Each object has several properties, including `name`, `bio`, `github`, `linkedin`, `twitter`, and `image`. \n\nThe `HallOfFame` component renders a tabbed interface with three tabs: \"CORE\", \"COMMUNITY\", and \"FOUNDATION\". Each tab displays a list of people from the `teamMembers` array whose `group` property matches the name of the tab. The list is displayed using the `GroupPersons` function, which takes two arguments: the `teamMembers` array and the name of the group to display. \n\nThe `GroupPersons` function filters the `teamMembers` array to include only those objects whose `group` property matches the specified group name. It then maps over the filtered array and renders a `HallOfFamePerson` component for each person. \n\nThe `HallOfFamePerson` component takes several props representing information about a person, including their name, bio, social media links, and image. It renders a card with a flip animation that displays the person's image on the front and their bio on the back. The component also displays the person's name and social media links below the card. \n\nOverall, the `HallOfFame` component provides a way to showcase the people involved in the Ergo project and highlight their contributions. The tabbed interface allows users to easily switch between different groups of people, and the `HallOfFamePerson` component provides a visually appealing way to display information about each person.\n## Questions: \n 1. What is the purpose of the `HallOfFame` component?\n- The `HallOfFame` component displays a list of people involved in the Ergo project, grouped by their role in the ecosystem (core team, community, or foundation).\n\n2. What is the `GroupPersons` function used for?\n- The `GroupPersons` function filters the list of people passed as `data` based on their `group` attribute, and returns a list of `HallOfFamePerson` components for each person in the filtered list.\n\n3. What libraries and components are being imported in this file?\n- The file imports `Tab` from `@headlessui/react`, `Image` from `next/image`, `Link` from `next/link`, `FormattedMessage` from `react-intl`, and several custom icons. It also defines two types (`Props` and `HallOfFamePersonProps`) and two components (`HallOfFamePerson` and `HallOfFame`).","metadata":{"source":".autodoc/docs/markdown/components/community/HallOfFame.md"}}],["17",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/OurMission.tsx)\n\nThe code defines a React component called `OurMission` that renders a section of the Ergoweb website. The component displays the title \"Our Mission\" in a large font size and a description of the Ergo Foundation's commitment to the development of the Ergo Platform protocol. The description is displayed in a smaller font size and is followed by three buttons that link to different pages on the website. \n\nEach button is implemented using the `Button` component from the `../Button` file. The `text` prop of each button is a `FormattedMessage` component that displays a localized string. The `url` prop specifies the link that the button should navigate to when clicked. The `newTab` prop specifies whether the link should open in a new tab or not. The `underline` prop specifies whether the button text should be underlined or not. The `textColor` prop specifies the color of the button text. The `background` prop specifies whether the button should have a background color or not. The `icon` prop specifies the name of the icon to display next to the button text. The `iconColor` prop specifies the color of the icon. The `customClass` prop specifies any additional CSS classes to apply to the button.\n\nThe `FormattedMessage` components use the `react-intl` library to provide internationalization support for the website. The `id` prop of each `FormattedMessage` component specifies a unique identifier for the string to be localized. The `defaultMessage` prop specifies the default string to use if a translation for the specified identifier is not available.\n\nOverall, this code defines a reusable component that can be used to display information about the Ergo Foundation's mission on different pages of the Ergoweb website. The use of the `FormattedMessage` and `Button` components allows for easy localization and customization of the component's content and appearance.\n## Questions: \n 1. What is the purpose of the `OurMission` component?\n- The `OurMission` component is responsible for rendering a section of the Ergo Foundation website that displays information about the organization's mission.\n\n2. What libraries or frameworks are being used in this code?\n- The code is using the `react-intl` library for internationalization and the `Button` component from a custom module.\n\n3. What is the layout of the HTML being generated by this code?\n- The code is generating a `div` element with an `id` of \"Foundation\" and a class of \"max-w-[1300px] mx-auto p-4 relative z-10\". Within this `div`, there is a `p` element with a class of \"font-vinila-extended-bold text-[40px] md:text-[80px] mb-8\" that contains the title of the section. Following this, there is another `div` element with a class of \"md:mx-auto md:w-[758px]\" that contains three `Button` components and a `p` element with a class of \"text-[#807e7e] dark:text-[#807e7e] md:text-[16px] md:max-w-3xl\" that contains a sub-description of the section.","metadata":{"source":".autodoc/docs/markdown/components/community/OurMission.md"}}],["18",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/Sigmanauts.tsx)\n\nThe code is a React component that renders a section of the Ergoweb website called \"Sigmanauts\". The purpose of this component is to provide information about the Sigmanaut Training Programme and encourage users to apply for it. \n\nThe component imports two modules from external libraries: `FormattedMessage` and `useIntl` from `react-intl`, and `Button` from a custom component. `FormattedMessage` is used to display localized text, while `useIntl` is used to format the text based on the user's locale. `Button` is a custom component that renders a button with various properties such as text, URL, and icon.\n\nThe `Sigmanauts` component consists of two main sections: an image and a text section. The image section displays an icon retrieved from a custom `icons-map` module using the `getIconComponentByName` function. The text section displays the title, subtitle, and description of the Sigmanaut Training Programme. The title and subtitle are displayed in two different formats depending on the screen size. The description is displayed using the `FormattedMessage` component, which allows for the use of variables and HTML tags.\n\nFinally, the component renders a `Button` component that encourages users to apply for the programme. The text of the button is retrieved from the `intl` object using the `formatMessage` function, which formats the text based on the user's locale. The `Button` component also has various properties such as URL, icon, and color, which are used to customize its appearance.\n\nOverall, the `Sigmanauts` component is an important part of the Ergoweb website as it provides information about a key programme and encourages users to apply for it. The use of localized text and custom components makes the component more accessible and user-friendly.\n## Questions: \n 1. What is the purpose of the `Sigmanauts` component?\n- The `Sigmanauts` component is a training program for Ergo, and this code renders the program's information and a button to apply.\n\n2. What is the role of the `useIntl` hook in this code?\n- The `useIntl` hook is used to format the text for the button based on the user's locale.\n\n3. What is the purpose of the `getIconComponentByName` function?\n- The `getIconComponentByName` function is used to render an icon associated with the `Sigmanauts` program.","metadata":{"source":".autodoc/docs/markdown/components/community/Sigmanauts.md"}}],["19",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/community/Spotlight.tsx)\n\nThe code above is a React component called `Spotlight` that renders a section of a web page. The purpose of this component is to display a title, a subtitle, and a button that links to a blog page. The component imports two modules: `FormattedMessage` and `useIntl` from the `react-intl` library, and `Button` from a local file.\n\nThe `FormattedMessage` component is used to display localized text. It takes two props: `defaultMessage` and `id`. The `defaultMessage` prop is the default text to display if no translation is available, and the `id` prop is a unique identifier for the text that needs to be translated. The `useIntl` hook is used to access the `intl` object, which provides methods for formatting and displaying localized text.\n\nThe `Spotlight` component returns a `div` element that contains a `h1` or `h3` element, depending on the screen size, and a `Button` component. The `h1` or `h3` element displays the title \"Spotlight\" in bold. The `FormattedMessage` component is used to provide a translation for the title. The `Button` component displays a button with the text \"SEE ALL POSTS\" and an arrow icon. The text is translated using the `intl.formatMessage` method, which takes an object with the `id` and `defaultMessage` properties as an argument. The `Button` component also takes several props that customize its appearance and behavior, such as `url`, `newTab`, `textColor`, and `iconColor`.\n\nThis component can be used in a larger project to display a section that highlights recent or popular blog posts. The `Spotlight` component can be customized by changing the title, subtitle, and button text, as well as the button's appearance and behavior. The component can also be translated into different languages by providing translations for the `id` props used in the `FormattedMessage` components. Overall, the `Spotlight` component provides a reusable and flexible way to display a section that promotes blog content.\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to access the internationalization API provided by `react-intl`. In this code, it is used to format the text for the button based on the user's locale.\n2. What is the significance of the `Spotlight` component and how is it rendered?\n   - The `Spotlight` component is a UI component that displays a title and a button. It is rendered as a div with the id \"Spotlight\" and a set of CSS classes that control its layout and appearance.\n3. What are the props passed to the `Button` component and what do they do?\n   - The `Button` component is passed several props that control its text, URL, appearance, and behavior. These include `text` for the button label, `url` for the link destination, `newTab` to open the link in a new tab, `underline` to add an underline to the text, `textColor` and `background` to control the button's color scheme, and `icon` and `iconColor` to add an icon to the button.","metadata":{"source":".autodoc/docs/markdown/components/community/Spotlight.md"}}],["20",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/community)\n\nThe `community` folder contains components related to displaying information about the Ergo community, its members, and resources. These components can be used together to create a comprehensive community section on the Ergoweb website.\n\n### CommunityCard.tsx\n\n`CommunityCard` is a reusable card component that displays a title, icon, text, and a link to an external URL. It can be used to create cards for various community resources, such as social media pages or forums.\n\nExample usage:\n\n```jsx\n<CommunityCard\n  title=\"Join our Discord server\"\n  icon=\"discord\"\n  text=\"Connect with other members of our community on Discord.\"\n  url=\"https://discord.gg/example\"\n/>\n```\n\n### CommunityCardsFeed.tsx\n\n`JoinUs` is a component that renders a section with links to social media platforms and community resources related to the Ergo blockchain platform. It uses the `CommunityCard` component to display each link card.\n\nExample usage:\n\n```jsx\nimport JoinUs from './JoinUs';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to the Ergo Community!</h1>\n      <JoinUs />\n    </div>\n  );\n}\n```\n\n### CommunityHero.tsx\n\n`CommunityHero` is a simple component that renders a section of a webpage with a localized subtitle and a heading. It can be used as part of a larger community page.\n\nExample usage:\n\n```jsx\nimport CommunityHero from './CommunityHero';\n\nfunction CommunityPage() {\n  return (\n    <div>\n      <CommunityHero />\n      {/* other community page content */}\n    </div>\n  );\n}\n```\n\n### ErgoFoundation.tsx\n\n`ErgoFoundation` is a component that displays information about the Ergo Foundation and its goals. It can be used as a standalone section or as part of a larger page about the Ergo Platform.\n\n### HallOfFame.tsx\n\n`HallOfFame` is a component that showcases people involved in the Ergo project and their contributions. It displays a tabbed interface with different groups of people and uses the `HallOfFamePerson` component to display information about each person.\n\n### OurMission.tsx\n\n`OurMission` is a reusable component that displays information about the Ergo Foundation's mission. It uses the `FormattedMessage` and `Button` components for easy localization and customization.\n\n### Sigmanauts.tsx\n\n`Sigmanauts` is a component that provides information about the Sigmanaut Training Programme and encourages users to apply. It uses localized text and custom components for accessibility and user-friendliness.\n\n### Spotlight.tsx\n\n`Spotlight` is a reusable component that displays a section promoting blog content. It can be customized by changing the title, subtitle, and button text, as well as the button's appearance and behavior. The component can also be translated into different languages using the `FormattedMessage` components.","metadata":{"source":".autodoc/docs/markdown/components/community/summary.md"}}],["21",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/darkModeSwitcher/DarkModeSwitcher.tsx)\n\nThe `DarkModeSwitch` component is responsible for toggling between light and dark mode in the ergoweb project. It uses the `useTheme` hook from the `next-themes` library to get the current theme and set the theme when the switch is toggled. \n\nThe component renders a div that contains a circular button with either a sun or moon icon, depending on the current theme. When the button is clicked, the `toggleSwitch` function is called, which sets the theme to the opposite of the current theme. \n\nThe component also uses the `useLoaded` hook from the `utils` directory to determine when the component has finished loading. This is used to determine the position of the button in the div. If the theme is currently light, the button is positioned at the end of the div, and if the theme is dark, the button is positioned at the beginning of the div. \n\nThe `motion` component from the `framer-motion` library is used to animate the button when the theme is toggled. The `spring` object defines the animation properties, including the type of animation, stiffness, and damping. \n\nFinally, the `useEffect` hook is used to update the theme and the class of the `documentElement` when the theme is changed. If the theme is light, the `dark` class is removed from the `documentElement`, and if the theme is dark, the `dark` class is added to the `documentElement`. \n\nOverall, the `DarkModeSwitch` component provides a simple and intuitive way for users to toggle between light and dark mode in the ergoweb project. It is easily customizable and can be used in any part of the project where a dark mode switch is needed.\n## Questions: \n 1. What is the purpose of this code?\n- This code is for a Dark Mode Switch component that toggles between light and dark themes.\n\n2. What libraries or frameworks are being used in this code?\n- This code is using framer-motion, React, next-themes, and classNames libraries.\n\n3. What is the logic behind the toggleSwitch function?\n- The toggleSwitch function sets the theme to 'dark' if the current theme is 'light', and vice versa.","metadata":{"source":".autodoc/docs/markdown/components/darkModeSwitcher/DarkModeSwitcher.md"}}],["22",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/darkModeSwitcher)\n\nThe `DarkModeSwitcher.tsx` file contains the `DarkModeSwitch` component, which is responsible for toggling between light and dark mode in the ergoweb project. This component can be used in any part of the project where a dark mode switch is needed.\n\nThe component uses the `useTheme` hook from the `next-themes` library to get the current theme and set the theme when the switch is toggled. It also uses the `useLoaded` hook from the `utils` directory to determine when the component has finished loading.\n\n```tsx\nimport { useTheme } from 'next-themes';\nimport { useLoaded } from '@/utils';\n```\n\nThe `DarkModeSwitch` component renders a div that contains a circular button with either a sun or moon icon, depending on the current theme. When the button is clicked, the `toggleSwitch` function is called, which sets the theme to the opposite of the current theme.\n\n```tsx\nconst toggleSwitch = () => {\n  setTheme(theme === 'dark' ? 'light' : 'dark');\n};\n```\n\nThe position of the button in the div is determined by the `useLoaded` hook. If the theme is currently light, the button is positioned at the end of the div, and if the theme is dark, the button is positioned at the beginning of the div.\n\nThe `motion` component from the `framer-motion` library is used to animate the button when the theme is toggled. The `spring` object defines the animation properties, including the type of animation, stiffness, and damping.\n\n```tsx\nimport { motion } from 'framer-motion';\n\nconst spring = {\n  type: 'spring',\n  stiffness: 700,\n  damping: 30,\n};\n```\n\nThe `useEffect` hook is used to update the theme and the class of the `documentElement` when the theme is changed. If the theme is light, the `dark` class is removed from the `documentElement`, and if the theme is dark, the `dark` class is added to the `documentElement`.\n\n```tsx\nuseEffect(() => {\n  if (theme === 'light') {\n    document.documentElement.classList.remove('dark');\n  } else {\n    document.documentElement.classList.add('dark');\n  }\n}, [theme]);\n```\n\nTo use the `DarkModeSwitch` component in your project, simply import it and include it in your JSX:\n\n```tsx\nimport { DarkModeSwitch } from '@/components/darkModeSwitcher/DarkModeSwitcher';\n\nfunction MyApp() {\n  return (\n    <div>\n      {/* Your other components */}\n      <DarkModeSwitch />\n    </div>\n  );\n}\n```\n\nIn summary, the `DarkModeSwitch` component provides a simple and intuitive way for users to toggle between light and dark mode in the ergoweb project. It is easily customizable and can be used in any part of the project where a dark mode switch is needed.","metadata":{"source":".autodoc/docs/markdown/components/darkModeSwitcher/summary.md"}}],["23",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/discover/DiscoverHero.tsx)\n\nThe `DiscoverERG` component is a React component that renders a section of the Ergoweb project's website. The purpose of this component is to provide users with various resources to learn about and interact with the Ergo blockchain platform. \n\nThe component imports several dependencies, including `Link` and `FormattedMessage` from the `next/link` and `react-intl` libraries respectively. It also imports the `getIconComponentByName` function from a custom `icons-map` utility file, and two SVG icons, `DiscoverErgHero` and `DiscoverErgHeroLight`, from custom `icons` files. Finally, it imports a custom `Button` component.\n\nThe component defines several variables using the `useIntl` hook to format text messages for internationalization. These variables are used as the text for the various buttons that link to different resources related to Ergo. \n\nThe component renders a container div with the id `DiscoverERG` and several child divs that contain the various resources. The first child div contains an SVG image of the Ergo logo, which changes depending on whether the user has selected a light or dark theme. The second child div contains a title and a paragraph describing Ergo. The remaining child divs contain buttons that link to different resources, such as the Ergo manifesto, documentation, and a YouTube channel. \n\nThe component also uses the `Link` component from the `next/link` library to render a button that links to the Ergonaut website, which provides additional resources for learning about Ergo. \n\nOverall, the `DiscoverERG` component provides users with a centralized location to access various resources related to Ergo, making it easier for users to learn about and interact with the platform.\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n- The `useIntl` hook is used to access the internationalization API provided by the `react-intl` library. It is used in this code to format messages for the buttons displayed on the page.\n\n2. What is the significance of the `DiscoverErgHero` and `DiscoverErgHeroLight` components?\n- These components are used to display different versions of the hero image depending on whether the user has selected a light or dark theme. They are imported from separate files and have different viewBox and className properties.\n\n3. How are the buttons on the page linked to external URLs or internal pages?\n- The buttons are created using the `Button` component and have `url` and `newTab` props that determine the destination of the link and whether it should open in a new tab. The last button is created using the `Link` component from the `next/link` library and has a `href` prop that determines the internal page it links to.","metadata":{"source":".autodoc/docs/markdown/components/discover/DiscoverHero.md"}}],["24",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/discover/Documents.tsx)\n\nThe code defines a React component called `Documents` that displays a list of documents grouped by section. The component takes an optional `documents` prop, which is an object containing an array of document data. The `processDocs` function is called to transform the document data into a format that can be used by the component. \n\nThe `processDocs` function first sorts the documents by title using the `_.sortBy` method from the Lodash library. It then groups the documents by a `group` attribute using the `_.groupBy` method, and maps each group to an object with a `name` property and an array of `documents`. The `adjustDoc` function is used to transform each document object into a simplified format with a `title`, `download`, and `url` property. If the document has no `url` property, the `file.data.attributes.url` property is used instead. The resulting array of group objects is sorted by `section` using `_.sortBy` and returned.\n\nThe `Documents` component uses the `useEffect` hook to load the `tw-elements` library when the component mounts. The `processedDocs` variable is set to the result of calling `processDocs` with the `documents` prop. The component then renders a heading and description, followed by an accordion-style list of documents grouped by section. The `processedDocs` array is mapped to a series of collapsible sections using the `map` method. Each section has a heading button that toggles the visibility of the documents in that section. The document titles are rendered as links that open in a new tab when clicked.\n\nOverall, this code provides a reusable component for displaying a list of documents grouped by section. It uses the Lodash library to sort and group the document data, and the `tw-elements` library for styling. The component can be used in a larger project to display documentation, research papers, or other types of documents.\n## Questions: \n 1. What is the purpose of the `processDocs` function?\n   - The `processDocs` function takes in a `documents` object and processes it by sorting, grouping, and adjusting the data, and returns the processed result.\n\n2. What is the purpose of the `useEffect` hook in the `Documents` component?\n   - The `useEffect` hook is used to load the `tw-elements` library when the component mounts.\n\n3. What is the purpose of the `docs-accordion` section in the `Documents` component?\n   - The `docs-accordion` section displays the processed documents in an accordion format, where each section can be expanded or collapsed to show or hide the documents within it.","metadata":{"source":".autodoc/docs/markdown/components/discover/Documents.md"}}],["25",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/discover/ErgoExplorer.tsx)\n\nThe code is a React component that renders a section of the Ergoweb project's website called \"Explore\". The purpose of this component is to provide users with two buttons that allow them to interact with the Ergo blockchain. The first button takes users to the Ergo Explorer, which is a tool that allows them to view every transaction made on the blockchain in real-time. The second button takes users to ergo.watch, which is a website that provides community-curated metrics on the Ergo blockchain.\n\nThe component uses the `Link` component from the `next/link` library to create links to the Ergo Explorer and ergo.watch. The `useIntl` hook from the `react-intl` library is used to provide internationalization support for the component. The `getIconComponentByName` function from the `../../utils/icons-map` file is used to render an arrow icon next to each button.\n\nThe `Explore` component returns a JSX element that contains two buttons wrapped in `Link` components. Each button has an `onClick` event handler that takes users to the Ergo Explorer or ergo.watch when clicked. The text for each button is obtained using the `intl.formatMessage` method, which takes an object with an `id` and `defaultMessage` property. The `id` property is used to look up the text for the button in a translation file, while the `defaultMessage` property provides a fallback value if the translation is not available.\n\nOverall, this component provides a simple and intuitive way for users to interact with the Ergo blockchain. By clicking on one of the buttons, users can access real-time transaction data or community-curated metrics, depending on their needs. The use of internationalization support ensures that the component is accessible to users from different countries and language backgrounds.\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to format and display internationalized messages. In this code, it is used to set the text for `button1Text` and `button2Text` based on the user's locale.\n2. What is the significance of the `Link` component and how is it used in this code?\n   - The `Link` component is used to create links to external URLs. In this code, it is used to create links to the Ergo Explorer and ergo.watch websites when the corresponding buttons are clicked.\n3. What is the purpose of the `getIconComponentByName` function and where is it defined?\n   - The `getIconComponentByName` function is used to retrieve an icon component based on its name. It is defined in the `icons-map.js` file located in the `utils` directory.","metadata":{"source":".autodoc/docs/markdown/components/discover/ErgoExplorer.md"}}],["26",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/discover/FAQ.tsx)\n\nThe code is a React component that renders a Frequently Asked Questions (FAQ) section on a web page. The component takes in a prop called `faq`, which is an array of objects containing question and answer data. The `processFaq` function sorts the questions in the `faq` array by their `order` attribute and returns the sorted array. \n\nThe rendered FAQ section consists of two columns: the left column contains a title, a subtitle, and a message, while the right column contains the questions and answers. The right column is an accordion-style list of questions and answers, where each question is a button that toggles the display of its corresponding answer. The questions and answers are generated dynamically from the `faq` prop using the `map` function. \n\nThe component uses several third-party libraries to render the FAQ section. The `lodash` library is used to sort the questions in the `processFaq` function. The `react-intl` library is used to internationalize the text in the component. The `react-markdown` library is used to render the answer text as Markdown, with support for GitHub Flavored Markdown (GFM) and line breaks. The `tw-elements` library is loaded using the `useEffect` hook to add some custom styles to the FAQ section. \n\nThe component is responsive, with different layouts for small and large screens. On small screens, the left column is hidden, and the title, subtitle, and message are displayed above the questions and answers. On large screens, the left column is displayed, and the title, subtitle, and message are displayed above the questions and answers in the left column. \n\nOverall, this component provides a reusable and customizable way to display a FAQ section on a web page. The `faq` prop can be populated with different question and answer data to create different FAQ sections. The component can be styled using CSS to match the design of the web page.\n## Questions: \n 1. What is the purpose of the `processFaq` function?\n   \n   The `processFaq` function sorts the questions in the FAQ based on their `order` attribute and returns the sorted list.\n\n2. What external libraries are being used in this code?\n\n   The code is using several external libraries including `lodash`, `react`, `react-intl`, and `react-markdown`.\n\n3. What is the purpose of the `useEffect` hook in this code?\n\n   The `useEffect` hook is being used to load the `tw-elements` library when the component mounts.","metadata":{"source":".autodoc/docs/markdown/components/discover/FAQ.md"}}],["27",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/discover/GrantsAndBounties.tsx)\n\nThe code is a React component that renders a section of the Ergoweb project's website called \"Grants & Bounties\". The purpose of this section is to provide information about how users can contribute to the Ergo ecosystem and potentially receive funding for their projects. \n\nThe component imports the `useIntl` hook from the `react-intl` library, which is used to format and display text in different languages. It also imports the `Button` component from a local file.\n\nThe component defines three variables (`button1Text`, `button2Text`, and `button3Text`) that use the `intl.formatMessage` method to retrieve text from a language file based on the specified message IDs. These variables are then passed as props to three instances of the `Button` component, each with a different URL and text.\n\nThe component returns a div that contains a heading, a paragraph of text, and three buttons. The heading displays the text \"Grants & Bounties\" in bold font. The paragraph of text provides information about the types of projects that are eligible for funding and encourages users to start a raffle to receive funding quickly. The three buttons are labeled \"CONTRIBUTING\", \"START A RAFFLE\", and \"GET IN TOUCH\", and each button has a different URL that corresponds to the action it represents.\n\nOverall, this component serves as a way for users to learn about and engage with the Ergo ecosystem by providing clear calls to action and information about potential funding opportunities. It can be used as a standalone component or integrated into a larger website or application. \n\nExample usage:\n```\nimport GrantsAndBounties from './GrantsAndBounties';\n\nfunction App() {\n  return (\n    <div>\n      <GrantsAndBounties />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to format internationalized messages and is imported from the `react-intl` library. In this code, it is used to format the text for three buttons displayed on the page.\n2. What is the significance of the `GrantsAndBounties` component and where is it used?\n   - The `GrantsAndBounties` component is a functional component that returns JSX for displaying information and buttons related to grants and bounties. It is exported as the default component from this file and can be used in other components or pages as needed.\n3. What is the purpose of the `Button` component and how is it customized in this code?\n   - The `Button` component is a custom component that displays a button with customizable text, URL, and styling. In this code, it is used to display three buttons with different text and URLs, and with a consistent style that includes an arrow icon and orange text color.","metadata":{"source":".autodoc/docs/markdown/components/discover/GrantsAndBounties.md"}}],["28",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/discover)\n\nThe `.autodoc/docs/json/components/discover` folder contains several React components that are part of the Ergoweb project. These components are designed to provide users with various resources and information about the Ergo blockchain platform, as well as ways to interact with it.\n\n1. `DiscoverHero.tsx`: This component renders a section of the Ergoweb project's website that provides users with resources to learn about and interact with the Ergo blockchain platform. It includes buttons linking to the Ergo manifesto, documentation, and a YouTube channel. The component also links to the Ergonaut website for additional resources. Example usage:\n\n   ```jsx\n   import DiscoverHero from './DiscoverHero';\n\n   function App() {\n     return (\n       <div>\n         <DiscoverHero />\n       </div>\n     );\n   }\n   ```\n\n2. `Documents.tsx`: This component displays a list of documents grouped by section. It can be used to display documentation, research papers, or other types of documents. The component takes an optional `documents` prop, which is an object containing an array of document data. Example usage:\n\n   ```jsx\n   import Documents from './Documents';\n\n   function App() {\n     return (\n       <div>\n         <Documents documents={myDocuments} />\n       </div>\n     );\n   }\n   ```\n\n3. `ErgoExplorer.tsx`: This component renders a section called \"Explore\" that provides users with two buttons to interact with the Ergo blockchain. The first button links to the Ergo Explorer, a tool for viewing real-time transaction data, and the second button links to ergo.watch, a website with community-curated metrics. Example usage:\n\n   ```jsx\n   import ErgoExplorer from './ErgoExplorer';\n\n   function App() {\n     return (\n       <div>\n         <ErgoExplorer />\n       </div>\n     );\n   }\n   ```\n\n4. `FAQ.tsx`: This component renders a Frequently Asked Questions (FAQ) section on a web page. It takes a `faq` prop, which is an array of objects containing question and answer data. The component is responsive and can be styled using CSS. Example usage:\n\n   ```jsx\n   import FAQ from './FAQ';\n\n   function App() {\n     return (\n       <div>\n         <FAQ faq={myFaqData} />\n       </div>\n     );\n   }\n   ```\n\n5. `GrantsAndBounties.tsx`: This component renders a \"Grants & Bounties\" section that provides information about contributing to the Ergo ecosystem and potential funding opportunities. It includes buttons for contributing, starting a raffle, and getting in touch. Example usage:\n\n   ```jsx\n   import GrantsAndBounties from './GrantsAndBounties';\n\n   function App() {\n     return (\n       <div>\n         <GrantsAndBounties />\n       </div>\n     );\n   }\n   ```\n\nThese components can be used individually or combined to create a comprehensive Ergo-related website or application. They are designed to be reusable and customizable, with internationalization support and responsive layouts.","metadata":{"source":".autodoc/docs/markdown/components/discover/summary.md"}}],["29",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/ChangingTheWorld.tsx)\n\nThe code is a React component that renders a Swiper slideshow of projects that are aimed at changing the world. The component takes in an optional prop called `chagingTheWorldProjects`, which is an array of objects that contain information about each project. \n\nThe Swiper component is imported from the `swiper/react` library, which is a React wrapper for the Swiper.js library. The Swiper component is used to render the slideshow, and the `Pagination` module is imported and passed as a prop to the Swiper component to enable pagination.\n\nEach project is rendered as a `SwiperSlide` component, which contains a `div` that displays the project's image, subtitle, title, description, and a button that links to the project's URL. The image is displayed using the `next/image` component, which optimizes the image for performance and lazy-loads it. \n\nThe `getIconComponentByName` function is imported from the `utils/icons-map` file and is used to render an arrow icon next to the button. The function takes in the name of the icon and returns the corresponding SVG icon component.\n\nOverall, this component is used to display a slideshow of projects that are aimed at changing the world. It is flexible and can be used in various parts of the larger project, such as a homepage or a dedicated projects page. The component can be customized by passing in different projects as props, and the Swiper.js library provides many options for customizing the slideshow's behavior and appearance. \n\nExample usage:\n\n```\nimport ChangingTheWorld from './ChangingTheWorld';\n\nconst projects = [\n  {\n    title: 'Project 1',\n    subtitle: 'Subtitle 1',\n    description: 'Description 1',\n    button_text: 'Learn More',\n    url: 'https://example.com/project1',\n    attributes: {\n      image: {\n        data: {\n          attributes: {\n            url: 'https://example.com/image1.jpg',\n            width: 800,\n            height: 600\n          }\n        }\n      }\n    }\n  },\n  {\n    title: 'Project 2',\n    subtitle: 'Subtitle 2',\n    description: 'Description 2',\n    button_text: 'Learn More',\n    url: 'https://example.com/project2',\n    attributes: {\n      image: {\n        data: null\n      }\n    }\n  }\n];\n\nfunction App() {\n  return (\n    <div>\n      <ChangingTheWorld chagingTheWorldProjects={projects} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `getIconComponentByName` function imported from `../../utils/icons-map`?\n- The smart developer might wonder what the `getIconComponentByName` function does and how it is used in the code. This function likely returns an icon component based on the name passed to it as an argument.\n\n2. What is the `Swiper` component and how does it work?\n- The developer might be curious about the `Swiper` component and how it is used in this code. It appears to be a component from the `swiper/react` library that allows for the creation of a slideshow with pagination.\n\n3. What is the purpose of the `modules` prop passed to the `Swiper` component?\n- The developer might wonder what the `modules` prop does and how it affects the behavior of the `Swiper` component. It appears to be an array of modules that can be used to extend the functionality of the `Swiper` component, in this case including the `Pagination` module.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/ChangingTheWorld.md"}}],["30",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/DApps.tsx)\n\nThe `DApps` component is a React functional component that renders a list of decentralized applications (DApps) on a web page. The component takes an optional `apps` prop, which is an array of objects representing the DApps to be displayed. Each DApp object contains properties such as `title`, `description`, `url`, and `image`. The component uses the `map` method to iterate over the `apps` array and render each DApp as a card with its title, image, and description.\n\nThe component also renders a header with the text \"DApps\" and a button that links to an external website. The button text is obtained from the `intl` object, which is provided by the `react-intl` library and allows for internationalization of the text. The button component is imported from a local `Button` module.\n\nThe image for each DApp is rendered using the `next/image` component, which is a third-party library that optimizes images for the web. If an image is not available for a DApp, a default image is displayed instead. The `Image` component takes the `src`, `width`, `height`, and `alt` attributes as props.\n\nThe component uses Tailwind CSS classes to style the layout and appearance of the DApp cards and the header. The `max-w-[1300px]` class limits the width of the component to 1300 pixels, while the `-mt-60` and `lg:-mt-[600px]` classes adjust the margin-top property to position the component on the page. The `no-scrollbar` class hides the horizontal scrollbar that appears when the DApps overflow the container.\n\nOverall, the `DApps` component provides a reusable and customizable way to display a list of DApps on a web page. It can be used in conjunction with other components and modules to build a larger decentralized application platform.\n## Questions: \n 1. What is the purpose of the `DApps` component?\n   - The `DApps` component is responsible for rendering a list of DApps (decentralized applications) along with their images, titles, and descriptions.\n2. What external libraries or frameworks are being used in this code?\n   - The code is using the `next/image` library for image optimization and the `react-intl` library for internationalization.\n3. What is the significance of the `apps` prop and how is it used in the component?\n   - The `apps` prop is an optional array of objects that contain information about each DApp to be rendered. It is used in a `.map()` function to dynamically render each DApp's image, title, and description.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/DApps.md"}}],["31",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/EcosystemHero.tsx)\n\nThis code defines a React component called `EcosystemHero` that renders a hero section for the Ergoweb project's ecosystem page. The component imports two modules: `Image` from the `next/image` package and `FormattedMessage` from the `react-intl` package.\n\nThe `EcosystemHero` component returns a JSX element that contains two `Image` components and a `h1` element. The `h1` element displays the title \"Ecosystem\" using the `FormattedMessage` component, which allows for internationalization of the text. The `Image` components display different versions of the Ergoweb logo depending on whether the user is in light or dark mode.\n\nThe `EcosystemHero` component is likely used as a part of a larger page or layout component that displays information about the Ergoweb ecosystem. The hero section is typically the first thing a user sees when visiting a page, so it serves as an introduction to the content on the page. The use of the `FormattedMessage` component suggests that the Ergoweb project is designed to be accessible to users in multiple languages.\n\nHere is an example of how the `EcosystemHero` component might be used in a larger page component:\n\n```\nimport EcosystemHero from './EcosystemHero';\n\nexport default function EcosystemPage() {\n  return (\n    <div>\n      <EcosystemHero />\n      <h2>What is the Ergoweb Ecosystem?</h2>\n      <p>...</p>\n      <h2>How to Get Involved</h2>\n      <p>...</p>\n    </div>\n  );\n}\n```\n\nIn this example, the `EcosystemPage` component renders the `EcosystemHero` component at the top of the page, followed by some explanatory text about the Ergoweb ecosystem.\n## Questions: \n 1. What is the purpose of the `Image` and `FormattedMessage` imports?\n- The `Image` import is used to display images on the page, while the `FormattedMessage` import is used to display localized messages based on the user's language preference.\n\n2. What is the significance of the `EcosystemHero` function?\n- The `EcosystemHero` function is a React component that renders a hero section for the Ergoweb project's ecosystem page.\n\n3. What is the difference between the `ecosystem-hero-gradient` and `ecosystem-light` classes?\n- The `ecosystem-hero-gradient` class is used to display a gradient background for the hero section in dark mode, while the `ecosystem-light` class is used to display a light background for the hero section in light mode.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/EcosystemHero.md"}}],["32",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/Favorites.tsx)\n\nThe `Favorites` component is a React component that displays a list of favorite posts and information about the ErgoRaffle crowdfunding service. The component receives a `favorites` prop, which is an array of post objects. Each post object contains attributes such as `title`, `subtitle`, `description`, `image`, `url`, and `button_text`. The component uses the `Swiper` component from the `swiper/react` library to display the list of posts in a carousel format. The `Swiper` component is also configured to display pagination bullets at the bottom of the carousel.\n\nThe component also displays information about the ErgoRaffle service, including an image of the ErgoRaffle logo, a description of the service, and a button that links to the ErgoRaffle website. The component uses the `useIntl` hook from the `react-intl` library to format the text of the button based on the user's locale.\n\nThe component uses several other components and utilities, including the `Button` component, the `Image` component from the `next/image` library, and the `getIconComponentByName` function from the `../../utils/icons-map` module.\n\nOverall, the `Favorites` component provides a user-friendly interface for displaying a list of favorite posts and promoting the ErgoRaffle crowdfunding service. It is designed to be easily customizable and extensible, allowing developers to add new features and functionality as needed.\n## Questions: \n 1. What is the purpose of the `Favorites` component?\n- The `Favorites` component displays a section of favorite posts, including an introduction to the ErgoRaffle crowdfunding service and a Swiper slideshow of individual posts.\n\n2. What is the role of the `useIntl` hook in this code?\n- The `useIntl` hook is used to format the text for the `button1Text` variable based on the user's locale.\n\n3. What is the purpose of the `getIconComponentByName` function?\n- The `getIconComponentByName` function is used to retrieve an icon component based on its name, which is used to display an arrow icon next to the `EXPLORE ERGO RAFFLE` button.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/Favorites.md"}}],["33",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/FeaturesAndProjects.tsx)\n\nThe code defines a React component called `FeaturesAndProjects` that displays a list of projects with their images, titles, descriptions, and links. The component takes an optional `projects` prop, which is an array of objects representing each project. Each project object has several attributes, including `image`, `group`, `title`, `description`, `url`, and `button_text`.\n\nThe component uses the `next/image` library to display the project images, which are fetched from the `image` attribute of each project object. The images are displayed with a fixed aspect ratio and their dimensions are determined by the `width` and `height` attributes of the `image` attribute.\n\nThe component uses several helper functions to adjust the layout of each project card based on its index in the `projects` array. The `adjustCardPosition` function returns a string of CSS classes that adjust the row and column spans of the project card in a CSS grid layout. The `adjustCardText` and `adjustCardPhoto` functions return a string of CSS classes that adjust the height and margin of the text and photo sections of the project card, respectively.\n\nThe component renders a heading and a grid of project cards using the `map` method to iterate over the `projects` array. Each project card is a `div` element with a fixed width and a set of CSS classes that adjust its layout based on its index. The card contains an `Image` component, a title, a description, and a link to the project URL. The `Image` component displays the project image with the appropriate dimensions and aspect ratio.\n\nOverall, this component provides a reusable way to display a list of projects with their images and details in a responsive and visually appealing manner. It can be used in various parts of the `ergoweb` project, such as the homepage or a dedicated projects page.\n## Questions: \n 1. What is the purpose of the `adjustCardPosition`, `adjustCardText`, and `adjustCardPhoto` functions?\n- These functions adjust the styling of the cards displayed for each project based on their index in the `props.projects` array.\n\n2. What is the purpose of the `Image` import from `next/image`?\n- This import is used to display images for each project, with the `src`, `width`, and `height` attributes being passed in as props.\n\n3. What is the purpose of the `FeaturesAndProjects` component?\n- This component displays a list of projects with their associated images, titles, descriptions, and links. The styling of each project card is adjusted based on its index in the `props.projects` array.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/FeaturesAndProjects.md"}}],["34",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/Roadmap.tsx)\n\nThe `Roadmap` component is responsible for rendering a roadmap view of the Ergo project. It imports several dependencies including `lodash`, `react-intl`, `Button`, and `getIconComponentByName`. The component takes in a single prop `roadmapItems` which is an array of objects containing information about the roadmap items. \n\nThe `processRoadmap` function takes in the `roadmap` and `sectionName` as arguments and returns an array of roadmap items that belong to the specified section. It first sorts the roadmap items by their `order` attribute and then filters them by their `group` attribute which is equal to the `sectionName` argument.\n\nThe `RoadmapItem` component takes in several props including `title`, `url`, `description`, and `status`. It renders a single roadmap item with an icon, title, and description. If the `url` prop is not null, it renders the item as a link. The icon displayed is determined by the `status` prop which can be one of three values: `completed`, `in_progress`, or `planned`. \n\nThe `Roadmap` component renders the entire roadmap view. It first defines an array of `sections` which contains the names and tags of each section. It then renders the title and description of the roadmap along with a button to view more information. Finally, it renders each section of the roadmap by mapping over the `sections` array and calling the `processRoadmap` function to filter the roadmap items by section. It then maps over the resulting array and renders each item using the `RoadmapItem` component.\n\nOverall, the `Roadmap` component provides a high-level view of the Ergo project roadmap and allows users to easily navigate through the different sections and items. It is a key component in providing transparency and communication to the Ergo community about the project's progress and plans.\n## Questions: \n 1. What is the purpose of the `processRoadmap` function?\n- The `processRoadmap` function takes in a roadmap and a section name, sorts the data in the roadmap by order, filters the data by the specified section name, and returns the resulting data.\n\n2. What is the significance of the `RoadmapItem` component?\n- The `RoadmapItem` component is responsible for rendering a single item in the roadmap, including its title, description, status, and icon.\n\n3. What is the purpose of the `sections` array?\n- The `sections` array contains objects representing different sections of the roadmap, each with a name and a tag. These sections are used to filter the roadmap data and display it in separate sections on the page.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/Roadmap.md"}}],["35",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/ecosystem/Wiki.tsx)\n\nThe code is a React component that renders a section of the Ergoweb project's website called \"Wiki\". The purpose of this component is to display information about the Ergonaut community-run wiki, which provides information on the underlying technical details of the Ergo blockchain in easy-to-understand language for non-technical people. \n\nThe component is composed of HTML and CSS, with some dynamic elements provided by the React framework. The HTML is structured using divs and paragraphs, and the CSS is used to style the elements. The dynamic elements are provided by the `Image` and `Button` components imported from Next.js and a custom `Button` component defined in another file. \n\nThe `Image` component is used to display an image of the Ergonaut mascot standing on a moon. The `Button` components are used to provide links to the Ergonaut wiki and to encourage users to explore and learn more about the Ergo blockchain. \n\nThe component is responsive, with different layouts for desktop and mobile devices. On desktop devices, the component displays a large heading, a paragraph of text, and an image of the Ergonaut mascot. On mobile devices, the component displays a smaller heading, a shorter paragraph of text, and a button to learn more about the Ergonaut wiki. \n\nOverall, this component serves as an introduction to the Ergonaut wiki and encourages users to explore and learn more about the Ergo blockchain. It is an important part of the Ergoweb project's website, providing users with valuable information and resources. \n\nExample usage: \n\nTo use this component in a React project, import it from the file where it is located: \n\n```\nimport Wiki from './path/to/Wiki';\n```\n\nThen, use the component in the JSX of another component: \n\n```\nfunction App() {\n  return (\n    <div>\n      <Wiki />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `Image` and `Button` imports?\n- The `Image` import is used to display an image of the Ergo mascot, while the `Button` import is used to create clickable buttons with customizable properties.\n\n2. What is the significance of the `ergonaut-card` class?\n- The `ergonaut-card` class is used to style a specific section of the webpage, which includes an image and text describing the Ergo blockchain and its community-run wiki.\n\n3. What is the purpose of the `customClass` property in the `Button` component?\n- The `customClass` property is used to add a custom CSS class to the `Button` component, which can be used to further customize its appearance or behavior. In this case, it is used to add a negative margin to the button.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/Wiki.md"}}],["36",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/ecosystem)\n\nThe `.autodoc/docs/json/components/ecosystem` folder contains several React components that are part of the Ergoweb project. These components are focused on displaying various aspects of the Ergo ecosystem, such as projects, decentralized applications (DApps), and the Ergonaut community-run wiki.\n\nThe `ChangingTheWorld.tsx` component renders a Swiper slideshow of projects aimed at changing the world. It takes an optional `chagingTheWorldProjects` prop, which is an array of objects containing information about each project. This component can be used in various parts of the project, such as a homepage or a dedicated projects page.\n\n```jsx\nimport ChangingTheWorld from './ChangingTheWorld';\n\nconst projects = [\n  // ...\n];\n\nfunction App() {\n  return (\n    <div>\n      <ChangingTheWorld chagingTheWorldProjects={projects} />\n    </div>\n  );\n}\n```\n\nThe `DApps.tsx` component renders a list of decentralized applications (DApps) on a web page. It takes an optional `apps` prop, which is an array of objects representing the DApps to be displayed. This component can be used in conjunction with other components to build a larger decentralized application platform.\n\nThe `EcosystemHero.tsx` component renders a hero section for the Ergoweb project's ecosystem page. It is likely used as a part of a larger page or layout component that displays information about the Ergoweb ecosystem.\n\n```jsx\nimport EcosystemHero from './EcosystemHero';\n\nexport default function EcosystemPage() {\n  return (\n    <div>\n      <EcosystemHero />\n      {/* ... */}\n    </div>\n  );\n}\n```\n\nThe `Favorites.tsx` component displays a list of favorite posts and information about the ErgoRaffle crowdfunding service. It receives a `favorites` prop, which is an array of post objects. This component provides a user-friendly interface for displaying a list of favorite posts and promoting the ErgoRaffle service.\n\nThe `FeaturesAndProjects.tsx` component displays a list of projects with their images, titles, descriptions, and links. It takes an optional `projects` prop, which is an array of objects representing each project. This component can be used in various parts of the Ergoweb project, such as the homepage or a dedicated projects page.\n\nThe `Roadmap.tsx` component renders a roadmap view of the Ergo project. It takes a single prop `roadmapItems`, which is an array of objects containing information about the roadmap items. This component provides a high-level view of the Ergo project roadmap and allows users to easily navigate through the different sections and items.\n\nThe `Wiki.tsx` component renders a section of the Ergoweb project's website called \"Wiki\". It displays information about the Ergonaut community-run wiki and encourages users to explore and learn more about the Ergo blockchain.\n\n```jsx\nimport Wiki from './path/to/Wiki';\n\nfunction App() {\n  return (\n    <div>\n      <Wiki />\n    </div>\n  );\n}\n```\n\nThese components work together to create a comprehensive view of the Ergo ecosystem, providing users with valuable information and resources. They can be used in various parts of the Ergoweb project to build a larger application that showcases the different aspects of the Ergo ecosystem.","metadata":{"source":".autodoc/docs/markdown/components/ecosystem/summary.md"}}],["37",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/getErg/Exchanges.tsx)\n\nThe code is a React component that renders a section of the Ergoweb project's website displaying a list of exchanges where users can buy, sell, and trade Ergo, a cryptocurrency. The component takes in an array of exchange objects as a prop and maps over it to render each exchange's logo as an Image component. The component also displays a title, a short description, and a button linking to a buying guide blog post.\n\nThe component uses the `useTheme` hook from the `next-themes` package to determine whether to display the light or dark version of each exchange's logo. If the current theme is dark and the exchange has a dark logo, the component displays the dark logo. Otherwise, it displays the light logo.\n\nThe component uses Tailwind CSS classes to style the layout and typography of the section. The section is centered on the page with a maximum width of 1300 pixels and has a padding of 12 units on small screens and 16 units on large screens. The exchanges are displayed in a grid with two columns on small screens, four columns on large screens, and a gap of 0.5 units between each exchange.\n\nThe component is reusable and can be used in other parts of the Ergoweb project to display a list of exchanges. The component can be customized by passing in a different array of exchange objects as a prop or by changing the button's text, URL, and other properties. For example, the component could be used on a different page of the website to display a list of exchanges that support a different cryptocurrency. \n\nExample usage:\n\n```\nimport Exchanges from './Exchanges';\n\nconst exchanges = [\n  {\n    id: 1,\n    attributes: {\n      name: 'Exchange A',\n      url: 'https://exchange-a.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a-dark.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n    },\n  },\n  {\n    id: 2,\n    attributes: {\n      name: 'Exchange B',\n      url: 'https://exchange-b.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-b.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: null,\n    },\n  },\n];\n\nfunction App() {\n  return (\n    <div>\n      <Exchanges exchanges={exchanges} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `Exchanges` component?\n- The `Exchanges` component is used to display a list of exchanges where the Ergo cryptocurrency can be bought, sold, and traded.\n\n2. What is the role of the `useTheme` hook from `next-themes` in this code?\n- The `useTheme` hook is used to determine whether the user has selected a light or dark theme, and to conditionally render the appropriate exchange logo image based on the theme.\n\n3. What is the purpose of the `Button` component being imported and used in this code?\n- The `Button` component is used to display a button with the text \"BUYING GUIDE\" that links to a blog post about buying Ergo. The component allows for customization of the button's text color, background, and icon.","metadata":{"source":".autodoc/docs/markdown/components/getErg/Exchanges.md"}}],["38",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/getErg/GetErgHero.tsx)\n\nThe `GetErgHero` component is a React component that renders a hero section for the Ergoweb project's \"Get ERG\" page. The component imports the `Link` component from the Next.js library, the `FormattedMessage` component from the React Intl library, and the `getIconComponentByName` function from a custom `icons-map` utility module.\n\nThe component defines an array of `cards` that represent the different ways users can obtain and use ERG, the native cryptocurrency of the Ergo blockchain. Each card has a `title`, `text`, `icon`, and `url` property. The `title` and `text` properties are JSX elements that are wrapped in the `FormattedMessageFixed` component, which is a custom wrapper around the `FormattedMessage` component that fixes a bug related to the `defaultMessage` prop. The `icon` property is a string that represents the name of an icon that is passed to the `getIconComponentByName` function to retrieve the corresponding SVG icon component. The `url` property is a string that represents the URL of the page that the card links to.\n\nThe `GetErgHero` component takes a `title` prop and renders a hero section with a heading, a subheading, and a grid of cards. The heading is passed in as the `title` prop and is rendered in bold text. The subheading is a static text that describes the Ergo ecosystem. The grid of cards is rendered using the `cards` array. Each card is wrapped in a `Link` component that links to the URL specified in the `url` property. The card's `title`, `text`, and icon are rendered along with the link.\n\nThe `GetErgHero` component is used in the \"Get ERG\" page of the Ergoweb project to provide users with an overview of the different ways they can obtain and use ERG. The component is reusable and can be used in other pages or components that require a hero section with a grid of cards.\n## Questions: \n 1. What is the purpose of the `getIconComponentByName` function imported from `../../utils/icons-map`?\n- The `getIconComponentByName` function is used to retrieve an icon component based on its name.\n\n2. What is the significance of the `FormattedMessageFixed` function defined within the code?\n- The `FormattedMessageFixed` function is a custom wrapper around the `FormattedMessage` component from `react-intl` that is used to provide default messages and IDs for internationalization.\n\n3. What is the purpose of the `GetErgHero` component and what props does it expect?\n- The `GetErgHero` component is a UI component that displays information about the Ergo ecosystem and provides links to various resources. It expects a `title` prop of type `string`.","metadata":{"source":".autodoc/docs/markdown/components/getErg/GetErgHero.md"}}],["39",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/getErg/Mining.tsx)\n\nThe `Mining` component is a React component that renders a page with information about mining Ergo, a cryptocurrency. The component contains two arrays of objects, `miningPoolsUrls` and `minersUrls`, which contain information about various mining pools and miners respectively. Each object in these arrays contains a `text` property, which is a React component that renders the name of the pool or miner, and a `url` property, which is the URL of the pool or miner's website. \n\nThe component renders a heading, followed by a grid of buttons that link to the various mining pools. The buttons are created using the `Button` component, which is imported from another file. Each button has a text label, an icon, and a link to the corresponding pool's website. The same pattern is repeated for the list of miners.\n\nThe component also contains several paragraphs of text that describe Ergo's mining algorithm and provide links to various resources for miners. The text is rendered using the `FormattedMessage` component from the `react-intl` library, which allows for easy localization of the text. \n\nOverall, the `Mining` component provides a user-friendly interface for miners to learn about and access various mining pools and miners for Ergo. It also provides links to additional resources for miners to learn more about Ergo's mining algorithm and community.\n## Questions: \n 1. What is the purpose of the `FormattedMessageFixed` function?\n- The `FormattedMessageFixed` function is a wrapper for the `FormattedMessage` component from the `react-intl` library, which is used to format messages based on the user's locale.\n\n2. What is the purpose of the `urlsComponent` variable?\n- The `urlsComponent` variable is a JSX element that contains a list of mining pools and miners, each with a corresponding URL and button component. It is used to display the list of mining resources on the page.\n\n3. What is the purpose of the `customClass` prop in the `Button` components?\n- The `customClass` prop is used to add a custom CSS class to the `Button` component, which can be used to apply additional styling or override existing styles.","metadata":{"source":".autodoc/docs/markdown/components/getErg/Mining.md"}}],["40",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/getErg/MiningCalculator.tsx)\n\nThe `MiningCalculator` component is responsible for calculating the daily revenue of mining ERG (Ergo) cryptocurrency based on the user's input of their hashrate. The component takes in four props: `currentPrice`, `currentBlockReward`, `networkHashrate`, and `difficulty`. \n\nThe component uses React's `useState` hook to manage the state of the user's inputted hashrate. The `dailyRevenueERG` variable is initialized to 0 and will be updated based on the user's input. The `blockTime` variable is set to 120 seconds (2 minutes), which is the time it takes to mine a block in the Ergo blockchain. The `blocksPerDay` variable is calculated by dividing the number of seconds in a day (86400) by the `blockTime`. \n\nThe `if` statement checks if the user's input is a valid number. If it is, the `dailyRevenueERG` variable is calculated using the formula: \n\n```\n((1000000 * props.currentBlockReward * parseFloat(hashRate) * blockTime) / props.difficulty) * blocksPerDay;\n```\n\nThis formula takes into account the current block reward, the user's hashrate, the block time, and the network difficulty to calculate the daily revenue in ERG. \n\nThe component returns a JSX element that displays the mining calculator UI. The UI consists of two columns: one for the user's input and one for the calculated results. The user's input is a text input field that accepts a number value for the hashrate. The calculated results display the daily revenue in ERG and the equivalent USD value based on the `currentPrice` prop. The UI also displays the current price, current block reward, and network hashrate for reference. \n\nOverall, the `MiningCalculator` component provides a simple way for users to calculate their potential daily revenue from mining ERG based on their hashrate and the current network conditions. It can be used as a tool for miners to make informed decisions about their mining operations.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a React component for a mining calculator that calculates daily revenue based on user inputted hashrate and current cryptocurrency market data.\n\n2. What external dependencies does this code have?\n- This code imports the `useState` hook from the `react` library.\n\n3. What is the formula used to calculate `dailyRevenueERG`?\n- `dailyRevenueERG` is calculated as `((1000000 * props.currentBlockReward * parseFloat(hashRate) * blockTime) / props.difficulty) * blocksPerDay`, where `hashRate` is the user inputted hashrate, `blockTime` is a constant value of 120 seconds, and `blocksPerDay` is calculated as `86400 / blockTime`.","metadata":{"source":".autodoc/docs/markdown/components/getErg/MiningCalculator.md"}}],["41",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/getErg/Wallets.tsx)\n\nThe `Wallets` component in this code is responsible for rendering a list of digital wallets, their features, and related information. It is designed to help users choose the right wallet for their needs and provide them with relevant resources.\n\nThe component is structured into two main sections: the header and the wallet list. The header contains a title, a brief description of digital wallets, and a button linking to setup guides. The wallet list is a table-like structure displaying various wallets and their features, such as support for mobile, desktop, dApp connectors, and ErgoPay.\n\nEach wallet is represented as a row in the table, with columns for the wallet name, features, and supported platforms. The wallets are grouped into categories like \"Community Favorites\", \"Extra Features\", and \"Reference Client\". Each wallet row is a link to either the wallet's website or its GitHub repository.\n\nHere's an example of a wallet row:\n\n```jsx\n<Link href=\"/ergo-wallet-app\">\n  <a\n    rel=\"noreferrer\"\n    className=\"flex flex-row h-28 border-x-[1px] border-[#585858] lg:border-0\"\n  >\n    <div className=\"w-1/5 p-1 my-auto flex flex-col lg:flex-row lg:justify-start lg:gap-4 lg:ml-4\">\n      <Logo className=\"w-6 h-6 mx-auto lg:mx-0 lg:w-12 lg:h-12\" viewBox=\"0 0 82 82\" />\n      <p className=\"text-center lg:my-auto\">Ergo Wallet App</p>\n    </div>\n    ...\n  </a>\n</Link>\n```\n\nThe component uses various imported icons and the `Button` component to create a visually appealing and informative layout. The responsive design ensures that the component looks good on both small and large screens.\n## Questions: \n 1. **Question:** What is the purpose of the `Wallets` component in this code?\n   **Answer:** The `Wallets` component is responsible for rendering a list of digital wallets with their features, such as mobile or desktop support, cold storage, dApp connector, and ErgoPay support. It also provides links to setup guides and other wallet-related resources.\n\n2. **Question:** How are the different wallet options being displayed in the `Wallets` component?\n   **Answer:** The wallet options are displayed using a combination of flexbox layouts and custom CSS classes. Each wallet option is represented as a flex row with five columns, displaying the wallet name, a feature description, and three icons representing cold storage, dApp connector, and ErgoPay support.\n\n3. **Question:** How are the wallet links being handled in this code?\n   **Answer:** The wallet links are handled using the `Link` component from the `next/link` package for internal navigation (e.g., Ergo Wallet App) and the standard anchor tag (`<a>`) with `target=\"_blank\"` and `rel=\"noreferrer\"` attributes for external links (e.g., Nautilus, Satergo, SAFEW, Minotaur, and Ergo Node).","metadata":{"source":".autodoc/docs/markdown/components/getErg/Wallets.md"}}],["42",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/getErg)\n\nThe `.autodoc/docs/json/components/getErg` folder contains React components and related code for displaying information about Ergo, a cryptocurrency, on the Ergoweb project's website. The components in this folder are focused on providing users with resources and tools related to obtaining and using Ergo, such as exchanges, wallets, and mining.\n\n`Exchanges.tsx` is a reusable component that renders a list of exchanges where users can buy, sell, and trade Ergo. It takes an array of exchange objects as a prop and displays each exchange's logo, along with a title, description, and a button linking to a buying guide blog post. The component can be customized by passing in a different array of exchange objects or changing the button's properties.\n\n`GetErgHero.tsx` is a component that renders a hero section for the \"Get ERG\" page, providing an overview of the different ways users can obtain and use Ergo. It displays a grid of cards, each with a title, text, icon, and URL, representing various methods of obtaining Ergo. The component is reusable and can be used in other pages or components that require a hero section with a grid of cards.\n\n`Mining.tsx` is a component that renders a page with information about mining Ergo, including a list of mining pools and miners, along with additional resources for miners to learn more about Ergo's mining algorithm and community.\n\n`MiningCalculator.tsx` is a component that calculates the daily revenue of mining Ergo based on the user's input of their hashrate. It takes in four props: `currentPrice`, `currentBlockReward`, `networkHashrate`, and `difficulty`. The component provides a simple way for users to calculate their potential daily revenue from mining Ergo based on their hashrate and the current network conditions.\n\n`Wallets.tsx` is a component that renders a list of digital wallets, their features, and related information. It helps users choose the right wallet for their needs and provides them with relevant resources. The component displays a table-like structure with wallet names, features, and supported platforms, grouped into categories like \"Community Favorites\", \"Extra Features\", and \"Reference Client\".\n\nExample usage of `Exchanges.tsx`:\n\n```jsx\nimport Exchanges from './Exchanges';\n\nconst exchanges = [\n  {\n    id: 1,\n    attributes: {\n      name: 'Exchange A',\n      url: 'https://exchange-a.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: {\n        data: {\n          attributes: {\n            url: '/images/exchange-a-dark.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n    },\n  },\n  {\n    id: 2,\n    attributes: {\n      name: 'Exchange B',\n      url: 'https://exchange-b.com',\n      image: {\n        data: {\n          attributes: {\n            url: '/images/exchange-b.png',\n            width: 100,\n            height: 100,\n          },\n        },\n      },\n      image_dark: null,\n    },\n  },\n];\n\nfunction App() {\n  return (\n    <div>\n      <Exchanges exchanges={exchanges} />\n    </div>\n  );\n}\n```\n\nThese components work together to provide a comprehensive set of resources and tools for users interested in obtaining and using Ergo. They can be used in various parts of the Ergoweb project to display relevant information and provide a user-friendly interface for interacting with Ergo.","metadata":{"source":".autodoc/docs/markdown/components/getErg/summary.md"}}],["43",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/Autolykos.tsx)\n\nThe code is a React component that renders a section of the Ergoweb website called Autolykos. The Autolykos section provides information about the Proof of Work algorithm used in the Ergo blockchain. The component imports two modules from the react-intl library: FormattedMessage and useIntl. FormattedMessage is used to format messages based on the user's locale, while useIntl is a hook that provides access to the internationalization API.\n\nThe Autolykos component renders two different layouts depending on the screen size. On small screens, the component renders a single column layout, while on larger screens, it renders a two-column layout. Both layouts contain the same information, but the two-column layout has a different arrangement of the content.\n\nThe component uses the useIntl hook to format the text of the button that links to the \"Get ERG\" page. The button text is obtained from the message with the ID \"components.autolykos.button\" and the default message \"MINE ERG\". The formatted message is stored in the button variable and passed as a prop to the Button component.\n\nThe Autolykos component also uses the FormattedMessage component to format the header, title, and text of the Autolykos section. The header is obtained from the message with the ID \"components.autolykos.header\", while the title is obtained from the message with the ID \"components.autolykos.title\". The text is obtained from the message with the ID \"components.autolykos.text\". The text message contains HTML tags, which are rendered using the values prop of the FormattedMessage component.\n\nThe Button component is a custom component that renders a button with an optional icon. The component accepts several props that control the appearance and behavior of the button, such as text, textColor, url, newTab, underline, background, iconColor, and icon.\n\nOverall, the Autolykos component provides an informative section about the Proof of Work algorithm used in the Ergo blockchain and encourages users to mine ERG by linking to the \"Get ERG\" page. The component uses the react-intl library to provide internationalization support and the Button component to render a customizable button.\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to access the internationalization API provided by the `react-intl` library. It is used in this code to format the text for the button component based on the user's locale.\n2. What is the significance of the `Autolykos` component and how is it structured?\n   - The `Autolykos` component appears to be a reusable component that renders a section of the Ergoweb website related to the Autolykos algorithm. It is structured as a functional component that returns JSX code for two different layouts depending on the screen size.\n3. What is the purpose of the `FormattedMessage` component and how is it used in this code?\n   - The `FormattedMessage` component is used to format text strings based on the user's locale. It is used in this code to format the header, title, and text content for the Autolykos section of the website. The `values` prop is used to insert HTML markup into the text content.","metadata":{"source":".autodoc/docs/markdown/components/home/Autolykos.md"}}],["44",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/Highlights.tsx)\n\nThe code is a React component that renders a slideshow of highlights for the Ergo blockchain platform. The component uses the Swiper library to create a responsive and interactive slideshow that displays information about the platform's features and values. \n\nThe component imports the FormattedMessage component from the react-intl library, which is used to display localized messages. It also imports the Swiper and Navigation components from the Swiper library, which are used to create the slideshow. Finally, it imports the getIconComponentByName function from the utils/icons-map module, which is used to display SVG icons.\n\nThe component defines an array of objects called slides, each of which contains information about a specific highlight. Each slide object contains a titleMessage, quoteMessage, textMessage, and an SVG icon. The titleMessage, quoteMessage, and textMessage properties are all FormattedMessage components that display localized messages. The SVG icon is displayed using the getIconComponentByName function, which takes the name of the icon and some additional properties like the viewBox, height, and width.\n\nThe component then defines a FormattedMessageFixed function that simply returns a FormattedMessage component. This function is used to fix a bug in the react-intl library that causes an error when a FormattedMessage component is used inside a SwiperSlide component.\n\nFinally, the component defines a Highlights function that renders the slideshow. The function returns a div element that contains the Swiper component and some other elements like a title and some text. The Swiper component iterates over the slides array and renders a SwiperSlide component for each slide. The SwiperSlide component contains the content for each slide, which includes the SVG icon, the title, the quote, and the text.\n\nThe Highlights component is used in the larger Ergo web application to showcase the platform's features and values to users. The component is responsive and interactive, making it easy for users to navigate through the highlights and learn more about the platform. The use of localized messages and SVG icons also helps to make the component more accessible and user-friendly.\n## Questions: \n 1. What is the purpose of the `Highlights` component?\n- The `Highlights` component is responsible for rendering a slideshow of three slides that highlight different features of the Ergo platform.\n\n2. What is the role of the `FormattedMessageFixed` function?\n- The `FormattedMessageFixed` function is a custom wrapper around the `FormattedMessage` component from the `react-intl` library. It is used to provide default messages and values for the `titleMessage`, `quoteMessage`, and `textMessage` properties of each slide.\n\n3. What is the significance of the `getIconComponentByName` function?\n- The `getIconComponentByName` function is used to dynamically render an SVG icon based on its name. It is imported from the `../../utils/icons-map` module and is used to display the icon associated with each slide.","metadata":{"source":".autodoc/docs/markdown/components/home/Highlights.md"}}],["45",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/HomeHero.tsx)\n\nThe `HomeHero` component is a React component that renders a hero section on the homepage of the ErgoWeb project. The hero section consists of a title, a description, and a call-to-action button. The component also includes a background video that changes depending on the user's color scheme preference.\n\nThe `useIntl` hook from the `react-intl` library is used to provide internationalization support for the component. The `intl` object is used to format the text for the call-to-action button based on the user's locale.\n\nThe title and description are rendered using the `FormattedMessage` component from the `react-intl` library. This component allows for the dynamic rendering of text based on the user's locale. The `id` prop is used to identify the text to be rendered, and the `defaultMessage` prop is used as a fallback in case the text is not available in the user's locale.\n\nThe call-to-action button is rendered using the `Button` component from the `../Button` module. The `text` prop is used to set the text of the button, and the `url` prop is used to set the URL that the button links to. The `background` prop is used to set the background color of the button, and the `icon` prop is used to set the icon that appears on the button.\n\nThe background video is rendered using the `video` element. The `autoPlay`, `playsInline`, `loop`, and `muted` props are used to configure the video playback. The `disablePictureInPicture` and `controlsList` props are used to disable picture-in-picture mode and the download button, respectively. The `source` element is used to specify the video file to be played.\n\nOverall, the `HomeHero` component provides an engaging and informative introduction to the ErgoWeb project, with support for internationalization and dynamic content rendering.\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to access the internationalization API provided by the `react-intl` library. In this code, it is used to format the text for the button component based on the user's locale.\n2. What is the significance of the `id` prop in the `FormattedMessage` components?\n   - The `id` prop is used to identify the message that needs to be translated. It is used as a key to look up the translated message in the translation files.\n3. What is the purpose of the `values` prop in the `FormattedMessage` component for the `components.homeHero.text` message?\n   - The `values` prop is used to pass dynamic values to the translated message. In this code, it is used to insert a line break (`<br />`) in the text of the message.","metadata":{"source":".autodoc/docs/markdown/components/home/HomeHero.md"}}],["46",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/HomeInfo.tsx)\n\nThe `HomeInfo` component is responsible for displaying various statistics related to the Ergo blockchain on the homepage of the Ergoweb project. The component receives four props: `blockReward`, `circulatingSupply`, `transactionPerDay`, and `hashRate`, which are used to display the corresponding statistics. If any of these props are not provided, default values are used instead.\n\nThe component uses the `react-countup` library to animate the counting up of the statistics when they come into view. The `useInView` hook from the `react-intersection-observer` library is used to detect when the component is in view and trigger the animation.\n\nThe component renders differently depending on the screen size. On larger screens, the statistics are displayed in a row with vertical lines separating them. On smaller screens, the statistics are displayed in a column with horizontal lines separating them.\n\nEach statistic is displayed with a title and a value. The title is an internationalized string that is translated based on the user's locale using the `react-intl` library. The value is the corresponding statistic, which is formatted with commas and, in the case of `hashRate`, with two decimal places and a \"TH/s\" suffix.\n\nOverall, the `HomeInfo` component provides an eye-catching and informative display of key statistics related to the Ergo blockchain, which can help users understand the current state of the network.\n## Questions: \n 1. What is the purpose of the `useInView` hook and how is it used in this code?\n- The `useInView` hook is used to determine if a component is currently in view on the screen. It is used in this code to trigger the animation of the CountUp component when it comes into view.\n\n2. What is the significance of the default values for the Props object?\n- The default values for the Props object are used in case the component is rendered without any props being passed in. This ensures that the component will still function properly even if the necessary props are not provided.\n\n3. What is the purpose of the `CountUp` component and how is it used in this code?\n- The `CountUp` component is used to animate the display of numerical values. It is used in this code to display the values for block reward, circulating supply, transactions per day, and hash rate with a counting animation effect.","metadata":{"source":".autodoc/docs/markdown/components/home/HomeInfo.md"}}],["47",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/News.tsx)\n\nThe `News` component is responsible for rendering the latest news and blog posts on the Ergoweb website. It receives a prop called `news`, which is an array of objects containing information about each post, such as the title, subtitle, date, and URL. \n\nThe component is built using React and several third-party libraries, including `react-intl` for internationalization, `swiper` for the carousel, and a custom `Button` component. \n\nThe component is divided into two main sections: the title and the carousel. The title is a simple heading that displays the words \"News & Blog\" in a stylized format. The carousel is a Swiper component that displays each post as a slide. \n\nEach slide contains the post's date, title, subtitle, and a \"READ\" button that links to the full post. The date is formatted using the `FormattedDate` component from `react-intl`, which formats the date based on the user's locale. The \"READ\" button is a custom `Button` component that takes several props, including the text to display, the URL to link to, and the color scheme. \n\nThe carousel is responsive and includes pagination bullets that allow the user to navigate between slides. The pagination is implemented using the `Pagination` module from `swiper`. \n\nOverall, the `News` component is a key part of the Ergoweb website, providing users with easy access to the latest news and blog posts. It is flexible and customizable, allowing developers to easily add new posts and customize the styling and functionality of the carousel. \n\nExample usage:\n\n```jsx\nimport News from './News';\n\nconst news = [\n  {\n    attributes: {\n      title: 'New Product Launch',\n      subtitle: 'Introducing our latest ergonomic chair',\n      date: '2022-01-01',\n      url: '/blog/new-product-launch',\n    },\n  },\n  {\n    attributes: {\n      title: 'Ergonomic Tips for Remote Work',\n      subtitle: 'Stay comfortable and productive while working from home',\n      date: '2021-12-01',\n      url: '/blog/ergonomic-tips-for-remote-work',\n    },\n  },\n  // more posts...\n];\n\nfunction App() {\n  return (\n    <div>\n      <News news={news} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What external libraries or modules are being used in this code?\n- The code is importing `react-intl`, `swiper/react`, and `swiper` modules, as well as a custom `Button` component.\n\n2. What is the purpose of the `News` component and what props does it expect?\n- The `News` component is rendering a section of the website that displays a list of news articles. It expects a `news` prop, which should be an array of objects containing attributes such as `date`, `title`, `subtitle`, and `url`.\n\n3. What styling classes or inline styles are being applied to the rendered HTML elements?\n- The code is applying various classes from the Tailwind CSS framework, such as `max-w-7xl`, `p-4`, `text-right`, `mx-20`, and `mb-6`. It is also applying an inline style to the outermost `div` element with a `zIndex` of 12.","metadata":{"source":".autodoc/docs/markdown/components/home/News.md"}}],["48",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/Partners.tsx)\n\nThe `Partners` component is responsible for rendering a list of partners on a web page. It receives a prop called `partners`, which is an array of objects containing information about each partner. The component uses the `useTheme` hook from the `next-themes` library to determine the current theme of the website. It then maps over the `partners` array and renders a `div` for each partner.\n\nEach partner `div` contains an `a` tag that links to the partner's website. The `Image` component from the `next/image` library is used to display the partner's logo. The `Image` component takes several props, including the `src` of the image, its `width` and `height`, and an `alt` text for accessibility purposes.\n\nThe `Image` component is conditionally rendered based on the current theme of the website. If the theme is `dark` and the partner has a `dark` logo, that logo is displayed. Otherwise, the regular logo is displayed. This allows for a consistent look and feel across the website, regardless of the user's chosen theme.\n\nThe `Partners` component also includes some styling using Tailwind CSS classes. The `max-w-[1300px]` class sets a maximum width for the component, while the `py-12` and `px-4` classes add padding to the top and bottom and left and right of the component, respectively. The `grid` and `grid-cols-2` classes create a grid layout with two columns, and the `md:grid-cols-3` class changes the number of columns to three on medium-sized screens. Finally, the `text-center` class centers the heading text.\n\nOverall, the `Partners` component is a reusable component that can be used on any page that needs to display a list of partners. It is flexible enough to handle different numbers of partners and different logo sizes, and it ensures a consistent look and feel across the website.\n## Questions: \n 1. What is the purpose of the `Partners` component?\n   - The `Partners` component is used to display a list of partners with their respective images and URLs.\n\n2. What is the role of the `useTheme` hook from `next-themes`?\n   - The `useTheme` hook is used to get the current theme of the website, which is then used to conditionally render the partner images based on whether the theme is dark or not.\n\n3. What is the expected data type for the `partners` prop?\n   - The `partners` prop is expected to be an array of objects, where each object represents a partner and contains attributes such as `id`, `name`, `url`, and `image`.","metadata":{"source":".autodoc/docs/markdown/components/home/Partners.md"}}],["49",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/UniqueErgo.tsx)\n\nThe `UniqueErgo` component is a React component that renders a section of the Ergo website that showcases the unique features of the Ergo blockchain. The component consists of a set of cards, each of which represents a unique feature of the Ergo blockchain. Each card contains a title, a text description, an icon, and a button that links to more information about the feature.\n\nThe component uses the `useEffect` hook to add a click event listener to each card. When a card is clicked, it becomes the active card and its description is displayed. The active card is highlighted with a border and a label that displays the card's icon and title.\n\nThe component uses the `FormattedMessage` component from the `react-intl` library to provide internationalization support for the card titles and descriptions. The `Button` component is also used to render the buttons on each card.\n\nOverall, the `UniqueErgo` component is an important part of the Ergo website as it helps to showcase the unique features of the Ergo blockchain in an interactive and engaging way.\n## Questions: \n 1. What is the purpose of the `useEffect` hook in this code?\n- The `useEffect` hook is used to add event listeners to each card element and set the initial active card. \n\n2. What is the significance of the `active` class in the card elements?\n- The `active` class is used to visually indicate which card is currently selected by the user. \n\n3. What is the role of the `Button` component in this code?\n- The `Button` component is used to render a clickable button with customizable text, URL, and icon properties. It is used in each card to provide a way for the user to explore more information related to that card.","metadata":{"source":".autodoc/docs/markdown/components/home/UniqueErgo.md"}}],["50",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/home/UsingErg.tsx)\n\nThe code defines a React component called `UsingErg` that renders a section of a webpage. The section contains four cards, each with a title, text, and icon, and each linking to a different page on the website. The purpose of this component is to provide users with information on how to use the Ergo cryptocurrency.\n\nThe `cards` array contains four objects, each representing a card. Each object has a `title`, `text`, `icon`, and `url` property. The `title` and `text` properties are React components that contain localized text. The `icon` property is a string that represents the name of an icon to be displayed on the card. The `url` property is a string that represents the URL of the page to which the card links.\n\nThe `UsingErg` component renders the section of the webpage using the `cards` array. It first renders a subtitle, title, and description above the cards. The subtitle and title are localized text, and the description is a paragraph of text that describes the Ergo ecosystem. The cards are then rendered in a grid using the `cards.map()` method. Each card is a `Link` component that links to the URL specified in its `url` property. The card's `title`, `text`, and `icon` are displayed using the `getIconComponentByName()` function, which returns a React component that displays the specified icon.\n\nOverall, this component provides users with an easy-to-use interface for learning about and accessing different aspects of the Ergo cryptocurrency ecosystem. By clicking on the cards, users can quickly navigate to different pages on the website to learn more about mining, buying, storing, and using Ergo.\n## Questions: \n 1. What is the purpose of the `cards` array?\n   - The `cards` array contains objects with information about different ways to use or obtain ERG, including titles, descriptions, icons, and URLs.\n2. What is the `FormattedMessageFixed` function used for?\n   - The `FormattedMessageFixed` function is a wrapper around the `FormattedMessage` component from the `react-intl` library, used to provide internationalization support for the text content of the `cards`.\n3. What is the purpose of the `getIconComponentByName` function?\n   - The `getIconComponentByName` function is used to dynamically retrieve and render SVG icons based on their names, which are stored in the `icon` property of each `card` object.","metadata":{"source":".autodoc/docs/markdown/components/home/UsingErg.md"}}],["51",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/home)\n\nThe `.autodoc/docs/json/components/home` folder contains several React components that are responsible for rendering various sections of the ErgoWeb project's homepage. These components showcase the unique features of the Ergo blockchain, display key statistics, and provide users with the latest news and blog posts.\n\nThe `Autolykos.tsx` component renders a section about the Proof of Work algorithm used in the Ergo blockchain. It uses the `react-intl` library for internationalization support and a custom `Button` component for linking to the \"Get ERG\" page. Example usage:\n\n```jsx\nimport Autolykos from './Autolykos';\n\nfunction App() {\n  return (\n    <div>\n      <Autolykos />\n    </div>\n  );\n}\n```\n\nThe `Highlights.tsx` component renders a responsive and interactive slideshow that displays information about the platform's features and values using the Swiper library. Example usage:\n\n```jsx\nimport Highlights from './Highlights';\n\nfunction App() {\n  return (\n    <div>\n      <Highlights />\n    </div>\n  );\n}\n```\n\nThe `HomeHero.tsx` component renders a hero section on the homepage with a title, description, call-to-action button, and a background video. It uses the `react-intl` library for internationalization support. Example usage:\n\n```jsx\nimport HomeHero from './HomeHero';\n\nfunction App() {\n  return (\n    <div>\n      <HomeHero />\n    </div>\n  );\n}\n```\n\nThe `HomeInfo.tsx` component displays key statistics related to the Ergo blockchain using the `react-countup` library for animating the counting up of the statistics. Example usage:\n\n```jsx\nimport HomeInfo from './HomeInfo';\n\nfunction App() {\n  return (\n    <div>\n      <HomeInfo />\n    </div>\n  );\n}\n```\n\nThe `News.tsx` component renders the latest news and blog posts using a Swiper carousel. It takes a `news` prop, which is an array of objects containing information about each post. Example usage:\n\n```jsx\nimport News from './News';\n\nconst news = [\n  // news objects...\n];\n\nfunction App() {\n  return (\n    <div>\n      <News news={news} />\n    </div>\n  );\n}\n```\n\nThe `Partners.tsx` component renders a list of partners with their logos and links to their websites. It takes a `partners` prop, which is an array of objects containing information about each partner. Example usage:\n\n```jsx\nimport Partners from './Partners';\n\nconst partners = [\n  // partner objects...\n];\n\nfunction App() {\n  return (\n    <div>\n      <Partners partners={partners} />\n    </div>\n  );\n}\n```\n\nThe `UniqueErgo.tsx` component showcases the unique features of the Ergo blockchain using a set of interactive cards. Example usage:\n\n```jsx\nimport UniqueErgo from './UniqueErgo';\n\nfunction App() {\n  return (\n    <div>\n      <UniqueErgo />\n    </div>\n  );\n}\n```\n\nThe `UsingErg.tsx` component renders a section with four cards that provide information on how to use the Ergo cryptocurrency. Example usage:\n\n```jsx\nimport UsingErg from './UsingErg';\n\nfunction App() {\n  return (\n    <div>\n      <UsingErg />\n    </div>\n  );\n}\n```\n\nThese components work together to create a comprehensive and informative homepage for the ErgoWeb project, providing users with an engaging and informative introduction to the Ergo blockchain platform.","metadata":{"source":".autodoc/docs/markdown/components/home/summary.md"}}],["52",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ArrowRightBlack.js)\n\nThe code defines a React component called `SvgArrowRightBlack` that renders an SVG image of a black arrow pointing to the right. The arrow is made up of two line segments, one horizontal and one diagonal, and is centered vertically within the SVG container. The component takes in props, which can be used to modify the width and height of the SVG image.\n\nThis component can be used in the larger ergoweb project to display a visual representation of a right arrow. It can be imported into other React components and used as a child element within the JSX code. For example, if we have a button that navigates to the next page, we can use this arrow image to indicate the direction of the navigation:\n\n```\nimport React from 'react';\nimport SvgArrowRightBlack from './SvgArrowRightBlack';\n\nconst NextButton = () => {\n  return (\n    <button>\n      Next Page <SvgArrowRightBlack width={12} height={10} />\n    </button>\n  );\n};\n```\n\nIn this example, we import the `SvgArrowRightBlack` component and use it as a child element within a button component. We also pass in props to modify the width and height of the arrow image. When the button is rendered, it will display the text \"Next Page\" followed by the arrow image pointing to the right.\n\nOverall, this code serves as a reusable component that can be used throughout the ergoweb project to display a consistent visual representation of a right arrow.\n## Questions: \n 1. What is the purpose of this code?\n   This code exports a React component that renders a black arrow pointing to the right.\n\n2. What are the dimensions of the SVG element?\n   The SVG element has a width of 18 and a height of 16.\n\n3. What is the meaning of the path data?\n   The path data defines two lines that form an arrow pointing to the right, with a vertical line in the middle. The stroke color is black and the stroke width is 2. The strokeLinecap and strokeLinejoin props are set to \"round\".","metadata":{"source":".autodoc/docs/markdown/components/icons/ArrowRightBlack.md"}}],["53",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ArrowRightOrange.js)\n\nThe code defines a React component called `SvgArrowRightOrange` that renders an SVG image of an orange arrow pointing to the right. The arrow is made up of two line segments, one horizontal and one diagonal, and is colored orange with a stroke width of 2. The component takes in props, which can be used to customize the SVG image, such as changing its width and height.\n\nThis component can be used in the larger ergoweb project to display an arrow pointing to the right in various contexts, such as in a navigation menu or as a visual cue to indicate the direction of a process flow. The component can be easily imported and used in other React components by simply calling it and passing in any necessary props.\n\nExample usage:\n\n```\nimport React from 'react';\nimport SvgArrowRightOrange from './SvgArrowRightOrange';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Click the arrow to continue</h2>\n      <button>\n        <SvgArrowRightOrange width={30} height={25} />\n      </button>\n    </div>\n  );\n};\n```\n\nIn this example, the `SvgArrowRightOrange` component is used inside a button element to indicate that clicking the button will take the user to the next step in a process. The width and height of the arrow are customized to fit the design of the button.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an orange arrow pointing to the right.\n\n2. What are the dimensions of the SVG element?\n- The SVG element has a width of 18 and a height of 16.\n\n3. What is the significance of the stroke color and stroke width properties?\n- The stroke color is set to #FF5E18, which is an orange color. The stroke width is set to 2, which determines the thickness of the arrow's outline.","metadata":{"source":".autodoc/docs/markdown/components/icons/ArrowRightOrange.md"}}],["54",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/BlogFacebook.js)\n\nThe code defines a React component called `SvgBlogFacebook` that renders an SVG image of the Facebook logo. The logo is colored in a shade of orange (#FF5E18) and is enclosed in a circular border with a stroke of the same color. The logo itself is made up of a single path element that defines the shape of the logo. The path is drawn using a series of commands that specify the start and end points of lines and curves.\n\nThis component can be used in the larger project to display the Facebook logo in various parts of the user interface. For example, it could be used as an icon in a social media sharing feature or as a link to the project's Facebook page. The component can be imported into other React components using the `import` statement and then rendered using JSX syntax. Here's an example of how the component could be used:\n\n```\nimport React from 'react';\nimport SvgBlogFacebook from './SvgBlogFacebook';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Welcome to our project!</h1>\n      <p>Follow us on Facebook:</p>\n      <a href=\"https://www.facebook.com/myproject\">\n        <SvgBlogFacebook />\n      </a>\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nIn this example, the `SvgBlogFacebook` component is used inside an anchor tag to create a clickable link to the project's Facebook page. The component is also used to display the Facebook logo in the link.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component that renders an SVG icon of the Facebook logo with a red fill.\n\n2. What are the dimensions of the SVG icon?\n   The SVG icon has a width of 50 and a height of 51.\n\n3. Why is the Facebook logo path filled with a specific color?\n   The Facebook logo path is filled with the color #FF5E18, which is the official Facebook brand color.","metadata":{"source":".autodoc/docs/markdown/components/icons/BlogFacebook.md"}}],["55",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/BlogLink.js)\n\nThe code defines a React component called `SvgBlogLink` that renders an SVG image of two interlocking links with a circular background. The purpose of this component is likely to be used as an icon or visual representation of a link to a blog or blogging feature within the larger ergoweb project.\n\nThe SVG image is defined using three `path` and `rect` elements. The `path` elements define the shape of the interlocking links, with one link pointing up and the other pointing down. The `rect` element defines the circular background of the image, with rounded corners specified by the `rx` attribute.\n\nThe `stroke` and `strokeWidth` attributes are used to specify the color and thickness of the lines that make up the image. In this case, the color is a bright orange (#FF5E18) and the thickness is 2 pixels. The `strokeLinecap` and `strokeLinejoin` attributes are used to specify the style of the line endings and corners, respectively.\n\nThe component takes in `props` as an argument, but does not use them in the rendering of the SVG image. The `width` and `height` of the image are fixed at 50 and 51 pixels, respectively.\n\nThe component is exported as the default export of the module, which means that it can be imported and used in other parts of the ergoweb project like so:\n\n```\nimport SvgBlogLink from 'path/to/SvgBlogLink';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h2>Check out our latest blog post:</h2>\n      <a href=\"/blog\">\n        <SvgBlogLink />\n        <span>Read the blog</span>\n      </a>\n    </div>\n  );\n}\n```\n\nIn this example, the `SvgBlogLink` component is used as part of a link to the blog section of the ergoweb project. The component adds a visual element to the link that helps to communicate its purpose to the user.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component that renders an SVG image of two interlocking links inside a rounded rectangle with a stroke color of #FF5E18.\n\n2. What are the dimensions of the SVG image?\n   The SVG image has a width of 50 and a height of 51.\n\n3. What is the significance of the stroke color #FF5E18?\n   The stroke color #FF5E18 is used for all the paths and the rectangle in the SVG image, and it is likely a branding color or a color associated with a specific feature or functionality in the project.","metadata":{"source":".autodoc/docs/markdown/components/icons/BlogLink.md"}}],["56",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/BlogTwitter.js)\n\nThis code defines a React component called `SvgBlogTwitter` that renders an SVG image of the Twitter logo. The logo is filled with a bright orange color (#FF5E18) and is contained within a rectangular border with rounded corners. The component takes in props, but none are used in this code.\n\nThis component can be used in the larger project to display the Twitter logo in various places, such as on a social media sharing button or in a list of social media icons. The component can be imported into other React components using the `import` statement and then rendered within the JSX code using the component name, like so:\n\n```\nimport SvgBlogTwitter from 'path/to/SvgBlogTwitter';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <SvgBlogTwitter />\n      <p>Follow us on Twitter!</p>\n    </div>\n  );\n}\n```\n\nThis will render the Twitter logo within a `div` element, followed by a text message. The logo can be styled using CSS, and the `SvgBlogTwitter` component can be reused throughout the project wherever the Twitter logo is needed.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component that renders an SVG image of the Twitter logo inside a rounded rectangle with a stroke.\n\n2. What are the props that can be passed to this component?\n- The component accepts any props that can be passed to an SVG element, which are spread using the spread operator. However, the component does not use any of these props directly.\n\n3. What is the significance of the fill and stroke properties used in this code?\n- The fill property sets the color of the Twitter logo to a specific shade of orange, while the stroke property sets the color of the stroke around the rounded rectangle to the same shade of orange.","metadata":{"source":".autodoc/docs/markdown/components/icons/BlogTwitter.md"}}],["57",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/BpsaaLogo.js)\n\nThis code defines a React functional component called `SvgBpsaaLogo` that renders an SVG image. The SVG image is a logo, which is likely used in the ergoweb project as a branding element. The component takes `props` as an argument, which allows users to pass additional properties to the SVG element.\n\nThe SVG image consists of multiple `<path>` elements, each with a `d` attribute containing the path data for the shape. These shapes are filled with different colors and gradients, defined using `<linearGradient>` elements inside the `<defs>` section. The gradients have unique IDs, which are then referenced in the `fill` attribute of the corresponding `<path>` elements.\n\nHere's an example of how to use the `SvgBpsaaLogo` component in a larger React project:\n\n```jsx\nimport React from 'react';\nimport SvgBpsaaLogo from './SvgBpsaaLogo';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to Ergoweb</h1>\n      <SvgBpsaaLogo />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `SvgBpsaaLogo` component is imported and used inside the `App` component. When rendered, the logo will appear below the\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgBpsaaLogo` that renders an SVG image. The image appears to be a logo for a project called \"ergoweb\".\n\n2. **What are the different fill colors used in the SVG paths?**\n\n   The fill colors used in the SVG paths are defined using linear gradients and solid colors. The linear gradients have IDs `bpsaa-logo_svg__a`, `bpsaa-logo_svg__b`, `bpsaa-logo_svg__c`, `bpsaa-logo_svg__d`, and `bpsaa-logo_svg__e`. The solid colors used are `#8BE4EE`, `#92C8E2`, `#8FB9D4`, `#829DB4`, `#3580B0`, `#1D4D75`, `#86D2EB`, `#84A7CE`, `#1F75B2`, `#225EA6`, `#30ADD9`, and `#1B639F`.\n\n3. **How can the size of the SVG be customized?**\n\n   The size of the SVG can be customized by passing the desired `width` and `height` as props to the `SvgBpsaaLogo` component. The default values are 227 for width and 102 for height.","metadata":{"source":".autodoc/docs/markdown/components/icons/BpsaaLogo.md"}}],["58",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/CheckDark.js)\n\nThis code defines a React component called `SvgCheckDark` that renders a checkmark icon with a dark color scheme. The icon is created using SVG elements, specifically an ellipse and a path. The ellipse is used to create the circular background of the icon, while the path is used to create the checkmark shape.\n\nThe component takes in `props` as an argument, which allows for customization of the SVG attributes such as width and height. The `width` and `height` attributes are set to 43 and 42 respectively, which determines the size of the icon when it is rendered.\n\nThe `fill` attribute is used to set the color of the SVG elements. The ellipse is filled with a dark gray color (#585858), while the path is filled with a slightly lighter gray color (#807e7e).\n\nThis component can be used in the larger project as a reusable icon component for displaying a checkmark with a dark color scheme. It can be imported into other React components and rendered as needed. For example, if a form is submitted successfully, this icon can be displayed to indicate that the submission was successful.\n\nExample usage:\n\n```\nimport React from 'react';\nimport SvgCheckDark from './SvgCheckDark';\n\nconst SuccessMessage = () => {\n  return (\n    <div>\n      <p>Form submitted successfully!</p>\n      <SvgCheckDark width={20} height={20} />\n    </div>\n  );\n};\n\nexport default SuccessMessage;\n```\n\nIn this example, the `SvgCheckDark` component is imported and rendered within a `SuccessMessage` component to display a checkmark icon alongside a success message. The `width` and `height` attributes are customized to make the icon smaller.\n## Questions: \n 1. What is the purpose of this SVG image?\n   - This SVG image is a checkmark icon with a dark color scheme.\n\n2. What library or framework is being used in this code?\n   - This code is using React, a popular JavaScript library for building user interfaces.\n\n3. What are the dimensions of the SVG image?\n   - The SVG image has a width of 43 and a height of 42.","metadata":{"source":".autodoc/docs/markdown/components/icons/CheckDark.md"}}],["59",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/CheckDarkHighlited.js)\n\nThe code defines a React component called `SvgCheckDarkHighlited` that renders an SVG image of a checkmark. The checkmark is composed of an ellipse and two paths. The ellipse is filled with a dark gray color (#585858) and serves as the background of the checkmark. The two paths are filled with a bright orange color (#FF5E18) and form the shape of the checkmark itself.\n\nThis component can be used in the larger project to display a checkmark icon in various contexts, such as to indicate that a task has been completed or that an item has been selected. The component can be imported into other React components and used like any other React component. For example, the following code snippet shows how the `SvgCheckDarkHighlited` component can be used in a `Task` component to display a checkmark when the task is completed:\n\n```\nimport React from 'react';\nimport SvgCheckDarkHighlited from './SvgCheckDarkHighlited';\n\nconst Task = ({ title, completed }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {completed && <SvgCheckDarkHighlited />}\n    </div>\n  );\n};\n\nexport default Task;\n```\n\nIn this example, the `Task` component takes two props: `title` and `completed`. If `completed` is true, the `SvgCheckDarkHighlited` component is rendered next to the task title to indicate that the task has been completed. If `completed` is false, no checkmark is displayed. This is a simple example of how the `SvgCheckDarkHighlited` component can be used in the larger project to provide visual feedback to users.\n## Questions: \n 1. What is the purpose of this SVG image?\nAnswer: This SVG image is a checkmark icon with a dark highlighted color.\n\n2. What library or framework is being used in this code?\nAnswer: This code is using React library.\n\n3. What are the dimensions of the SVG image?\nAnswer: The width of the SVG image is 54 and the height is 47.","metadata":{"source":".autodoc/docs/markdown/components/icons/CheckDarkHighlited.md"}}],["60",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/CheckGreen.js)\n\nThe code defines a React component called `SvgCheckGreen` that renders an SVG image of a green checkmark. The checkmark is composed of an ellipse filled with a linear gradient and a path that defines the shape of the checkmark. The path is filled with a solid black color.\n\nThis component can be used in the larger project to display a green checkmark icon in various contexts, such as to indicate a successful action or completion of a task. The component can be imported and used in other React components like so:\n\n```\nimport SvgCheckGreen from 'path/to/SvgCheckGreen';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Task Complete!</h2>\n      <SvgCheckGreen />\n    </div>\n  );\n};\n```\n\nThe `SvgCheckGreen` component can be customized by passing in props like `width` and `height` to adjust the size of the SVG image. Other props can also be passed in to modify the appearance of the checkmark, such as changing the colors of the gradient or the solid fill.\n\nOverall, this code provides a reusable and customizable component for displaying a green checkmark icon in a React project.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders a green checkmark inside an ellipse.\n\n2. What are the dimensions of the SVG element?\n   - The SVG element has a width of 43 and a height of 42.\n\n3. What is the significance of the linear gradient defined in the code?\n   - The linear gradient is used to fill the ellipse with a gradient that goes from a light green (#00C68A) to a brighter green (#98FFD4).","metadata":{"source":".autodoc/docs/markdown/components/icons/CheckGreen.md"}}],["61",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/CheckOrange.js)\n\nThe code defines a React component called `SvgCheckOrange` that renders an SVG image of an orange checkmark. The checkmark is composed of an orange gradient-filled ellipse with a white checkmark path on top of it. The component takes in props, which can be used to modify the SVG's width, height, and other attributes.\n\nThis component can be used in the larger project to display a checkmark icon in various contexts, such as to indicate a successful action or completion of a task. The component can be imported into other React components and rendered as needed. For example, the following code snippet imports the `SvgCheckOrange` component and renders it with a width of 30 pixels:\n\n```\nimport React from 'react';\nimport SvgCheckOrange from './SvgCheckOrange';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Task Completed!</h1>\n      <SvgCheckOrange width={30} />\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nOverall, this code provides a reusable and customizable checkmark icon that can be used throughout the ergoweb project.\n## Questions: \n 1. What is the purpose of this code?\n   \n   This code defines a React component that renders an orange checkmark icon.\n\n2. What are the dimensions of the icon?\n   \n   The icon has a width of 51 and a height of 50.\n\n3. What is the purpose of the filter and gradient elements?\n   \n   The filter element applies a drop shadow effect to the icon, while the gradient element defines a linear gradient that is used to fill the ellipse shape in the icon.","metadata":{"source":".autodoc/docs/markdown/components/icons/CheckOrange.md"}}],["62",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/CheckOrangeHighlighted.js)\n\nThe code defines a React component called `SvgCheckOrangeHighlighted` that renders an SVG image of an orange checkmark with a highlighted gradient background. The SVG image has a width of 54 and a height of 47. \n\nThe `ellipse` element creates the orange gradient background for the checkmark. It has a center point of (21.497, 25.297), a horizontal radius of 21.497, and a vertical radius of 20.753. The gradient is defined in the `defs` section of the SVG using a linear gradient with two stops, one at `#FF5E18` and the other at `#FF7C44`.\n\nThe `path` elements create the checkmark itself. The first `path` element defines the shape of the checkmark using a series of coordinates. The second `path` element fills the checkmark with white color. The third `path` element fills the bottom right corner of the SVG with a darker shade of orange.\n\nThis component can be used in the larger project to display a checkmark icon with a highlighted background. It can be imported into other React components and used like any other React component. For example:\n\n```\nimport SvgCheckOrangeHighlighted from './SvgCheckOrangeHighlighted';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Success!</h1>\n      <SvgCheckOrangeHighlighted />\n    </div>\n  );\n}\n```\n\nThis would render the checkmark icon with the highlighted background below the \"Success!\" heading.\n## Questions: \n 1. What is the purpose of this SVG image?\n   - This SVG image is a checkmark icon with an orange highlight, likely used to indicate successful completion of a task or action.\n\n2. What library or framework is being used to create this SVG?\n   - This SVG is being created using React, as indicated by the `import * as React` statement at the beginning of the code.\n\n3. What is the significance of the `defs` element in this SVG?\n   - The `defs` element is used to define linear gradients that are used to fill the `ellipse` element in the SVG.","metadata":{"source":".autodoc/docs/markdown/components/icons/CheckOrangeHighlighted.md"}}],["63",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Coingecko.js)\n\nThe code defines a React component called `SvgCoingecko` that renders an SVG image of the Coingecko logo. The logo consists of three black and white shapes: a rounded triangle, a circle, and a rounded rectangle. The triangle and rectangle are black, while the circle is white. The shapes are arranged to form the letter \"C\" in the center of the image.\n\nThe component takes in props, but does not use them in the rendering of the image. Instead, it sets the width and height of the SVG to 40 pixels, and applies a class of \"fill-current text-black dark:text-white\" to the SVG element. This class is likely used for styling purposes elsewhere in the project.\n\nThe SVG image is created using the `path` element, which defines a path for a shape to follow. Each `path` element in the code corresponds to one of the shapes in the Coingecko logo. The `d` attribute of each `path` element defines the shape of the path using a series of commands and coordinates.\n\nOverall, this code is a small but important part of the Coingecko project, as it provides a visual representation of the Coingecko logo that can be used throughout the project. It is likely used in various places, such as the project's website or mobile app, to help users identify the Coingecko brand.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as a logo or icon for the Ergoweb project.\n\n2. What library or framework is being used to create this SVG image?\n- The code is using React to create the SVG image.\n\n3. What is the significance of the different fill colors used in the paths of the SVG image?\n- The different fill colors are used to create a two-tone effect in the image, with the black and white sections representing different parts of the image.","metadata":{"source":".autodoc/docs/markdown/components/icons/Coingecko.md"}}],["64",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Discord.js)\n\nThe code defines a React component called `SvgDiscord` that renders an SVG image of the Discord logo. The component takes in `props` as an argument, which can be used to customize the SVG's attributes. The SVG has a fixed width of 50 and height of 40, and is styled with the classes \"fill-current text-black dark:text-white\". \n\nThe SVG image is defined using a `path` element with a `d` attribute that specifies the shape of the image. The shape is defined using a series of commands that move the pen to different points on the canvas and draw lines and curves between them. The specifics of the `d` attribute are not important for understanding the high-level purpose of the code.\n\nThis component can be used in the larger project to display the Discord logo wherever it is needed. For example, it could be used in a navigation bar to link to the project's Discord server, or in a footer to acknowledge the project's use of Discord for communication. \n\nHere is an example of how the `SvgDiscord` component could be used in a React component:\n\n```\nimport React from 'react';\nimport SvgDiscord from './SvgDiscord';\n\nconst DiscordLink = () => {\n  return (\n    <a href=\"https://discord.gg/myproject\">\n      <SvgDiscord />\n      Join our Discord server\n    </a>\n  );\n};\n\nexport default DiscordLink;\n```\n\nIn this example, the `SvgDiscord` component is used inside an anchor tag to create a link to the project's Discord server. The SVG image is displayed alongside the text \"Join our Discord server\".\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of the Discord logo.\n\n2. What are the dimensions of the SVG image?\n- The width is 50 and the height is 40.\n\n3. What is the significance of the class name \"fill-current text-black dark:text-white\"?\n- This class name is likely used for styling purposes and indicates that the SVG should be filled with the current color, which is black in light mode and white in dark mode.","metadata":{"source":".autodoc/docs/markdown/components/icons/Discord.md"}}],["65",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Discourse.js)\n\nThis code defines a React component called `SvgDiscourse` that renders an SVG image of a speech bubble. The image is defined using a `path` element with a series of coordinates that define the shape of the bubble. The `viewBox` attribute sets the dimensions of the image, and the `width` and `height` attributes set the size of the image when it is rendered. \n\nThe component takes in `props` as an argument, which allows for additional customization of the image. The `className` prop sets the CSS classes for the image, which in this case sets the fill color to black and the text color to white when the page is in dark mode. \n\nThis component can be used in the larger project as a reusable component for displaying speech bubbles or other similar shapes. It can be imported into other React components and used like any other React component. For example, if we have a component called `ChatBubble` that displays a message in a speech bubble, we could use the `SvgDiscourse` component to render the bubble shape like this:\n\n```\nimport React from 'react';\nimport SvgDiscourse from './SvgDiscourse';\n\nconst ChatBubble = ({ message }) => {\n  return (\n    <div className=\"chat-bubble\">\n      <SvgDiscourse />\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default ChatBubble;\n```\n\nThis code defines a `ChatBubble` component that renders a speech bubble with a message inside. The `SvgDiscourse` component is used to render the bubble shape, and the `message` prop is used to display the message inside the bubble. The `className` prop can also be passed down to the `SvgDiscourse` component to customize the appearance of the bubble.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of the Discourse logo.\n\n2. What are the props that can be passed to this component?\n- The component accepts any props that can be passed to an SVG element, such as `className`, `width`, and `height`.\n\n3. What is the significance of the numbers in the `viewBox` attribute?\n- The `viewBox` attribute defines the position and dimensions of the SVG viewport. In this case, the numbers indicate that the viewport has a width of 24 units and a height of 24 units, and that the top-left corner of the viewport is at position (0, 0).","metadata":{"source":".autodoc/docs/markdown/components/icons/Discourse.md"}}],["66",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ErgoFoundationIcon.js)\n\nThe code defines a React component called `SvgErgoFoundationIcon` that renders an SVG image of the Ergo Foundation logo. The logo consists of two overlapping shapes: a white eight-pointed star and a red circle with a white eight-pointed star inside. The logo is centered in a square with a transparent background.\n\nThe component takes in `props` as an argument, which are then spread onto the `svg` element. This allows for any additional props to be passed in when the component is used. The `path` elements define the shapes that make up the logo. The first `path` element defines the white eight-pointed star and the red circle with a white eight-pointed star inside. The second `path` element defines the white eight-pointed star in the center of the logo. The third `path` element defines a white rectangle that is used to cover up part of the red circle to create the shape of the logo.\n\nThe component is exported as the default export, which means that it can be imported into other files using `import SvgErgoFoundationIcon from 'path/to/file'`. The component can then be used in other React components by rendering it as a JSX element, like so:\n\n```\nimport SvgErgoFoundationIcon from 'path/to/file';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Welcome to my app!</h1>\n      <SvgErgoFoundationIcon width={100} height={100} />\n    </div>\n  );\n};\n```\n\nThis would render the Ergo Foundation logo with a width and height of 100 pixels. The component can be customized with additional props, such as `className` or `style`, to change its appearance or behavior. Overall, this component is a reusable piece of UI that can be used throughout the ErgoWeb project to display the Ergo Foundation logo.\n## Questions: \n 1. What is the purpose of this code?\n   - This code exports a React component that renders an SVG icon for the Ergo Foundation.\n\n2. What libraries or dependencies are being used in this code?\n   - This code imports the React library and uses it to define a functional component that renders an SVG icon.\n\n3. What does the SVG icon look like?\n   - The SVG icon consists of two overlapping shapes: a white outline of a hexagon with rounded corners, and a smaller red hexagon with rounded corners inside the white hexagon. The red hexagon is positioned off-center to the right and slightly below the center of the white hexagon.","metadata":{"source":".autodoc/docs/markdown/components/icons/ErgoFoundationIcon.md"}}],["67",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ErgoFoundationIconLight.js)\n\nThe code defines a React component called `SvgErgoFoundationIconLight` that renders an SVG image of the Ergo Foundation icon. The icon consists of two filled paths, one in black and one in red. The black path forms the shape of the icon, which is a stylized letter \"E\" with rounded corners. The red path overlays part of the black path to create a diagonal stripe across the center of the icon.\n\nThe component takes in props, but it does not use them in any way. The SVG image has a fixed width and height of 248 pixels, and the paths are defined using absolute coordinates. The first path defines the shape of the icon using a series of line segments and Bezier curves. The second path defines the red stripe by drawing a rectangle and then clipping it to the shape of the icon using a mask.\n\nThis component can be used in the larger ErgoWeb project as a visual representation of the Ergo Foundation. It can be included in other React components or pages as an image asset, and it can be styled using CSS to change its size, color, or position. For example, the icon could be used in a header or footer to indicate that the page is affiliated with the Ergo Foundation. Here is an example of how the component could be used in a React component:\n\n```jsx\nimport React from 'react';\nimport SvgErgoFoundationIconLight from './SvgErgoFoundationIconLight';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Welcome to My Website</h1>\n      <SvgErgoFoundationIconLight style={{ width: '50px', height: '50px' }} />\n      <p>Powered by Ergo Foundation</p>\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nIn this example, the `SvgErgoFoundationIconLight` component is imported and rendered inside a `div` element. The component is given a `style` prop that sets its width and height to 50 pixels. The icon is displayed below the heading and above the paragraph to indicate that the website is powered by the Ergo Foundation.\n## Questions: \n 1. What is the purpose of this code?\n   \n   This code defines a React component that renders an SVG icon for the Ergo Foundation.\n\n2. What are the dimensions of the SVG icon?\n   \n   The SVG icon has a width and height of 248 pixels.\n\n3. What do the different paths in the SVG represent?\n   \n   The different paths in the SVG represent the different shapes and colors that make up the icon. The red paths represent the \"E\" shape in the icon, while the black paths represent the other shapes.","metadata":{"source":".autodoc/docs/markdown/components/icons/ErgoFoundationIconLight.md"}}],["68",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ErgoNode.js)\n\nThe code defines a React component called `SvgErgoNode` that renders an SVG image. The image consists of two paths that create a stylized shape resembling a node or a hub. The first path creates the main shape of the node, while the second path creates a smaller shape inside the node. The colors of the shapes are white, and the background is transparent.\n\nThis component can be used in the larger project to display a visual representation of a node or a hub. It can be used in conjunction with other components to create a more complex UI, such as a network diagram or a dashboard. The component can be customized by passing props to it, such as width and height, to adjust its size, or fill to change the color of the shapes.\n\nExample usage:\n\n```\nimport SvgErgoNode from 'path/to/SvgErgoNode';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <SvgErgoNode width={50} height={50} fill=\"#ff0000\" />\n    </div>\n  );\n};\n```\n\nIn this example, the `SvgErgoNode` component is imported and used inside a parent component called `MyComponent`. The component is passed width and height props of 50, which makes it smaller than the default size of 125x48. The fill prop is set to red (#ff0000), which changes the color of the shapes from white to red.\n## Questions: \n 1. What is the purpose of this SVG image?\nAnswer: This SVG image is likely used as a visual element in the ergoweb project, but without more context it is unclear what specific purpose it serves.\n\n2. What library or framework is being used to create this SVG image?\nAnswer: The code is using React to create the SVG image, as indicated by the import statement at the beginning of the code.\n\n3. Are there any specific attributes or properties being applied to the SVG image?\nAnswer: Yes, the SVG image has a width of 125 and a height of 48, and is filled with white (#fff). It also includes two path elements with specific fill and d attributes.","metadata":{"source":".autodoc/docs/markdown/components/icons/ErgoNode.md"}}],["69",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ErgoRaffle.js)\n\nThe code defines a React component called `SvgErgoRaffle` that renders an SVG image. The SVG image consists of two `path` elements that define the shape and color of the image. The first `path` element is filled with white color in light mode and black color in dark mode. The second `path` element is filled with a bright red color. \n\nThe purpose of this component is to display an image of the Ergo Raffle logo. It can be used in various parts of the ErgoWeb project, such as in the header or footer of the website, or in marketing materials. \n\nTo use this component in a React application, it can be imported and rendered like any other React component. For example:\n\n```\nimport SvgErgoRaffle from 'path/to/SvgErgoRaffle';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome to ErgoWeb</h1>\n      <SvgErgoRaffle />\n    </div>\n  );\n}\n```\n\nThis will render the Ergo Raffle logo below the heading. The component can also accept props to customize its size and other attributes of the SVG image.\n## Questions: \n 1. What is the purpose of this SVG image?\n- The SVG image appears to be a logo or icon for the ErgoRaffle project.\n\n2. What library or framework is being used to create this SVG image?\n- The code is using React to create the SVG image.\n\n3. Are there any dependencies or external files required for this code to work?\n- It is unclear from this code whether there are any dependencies or external files required for this code to work.","metadata":{"source":".autodoc/docs/markdown/components/icons/ErgoRaffle.md"}}],["70",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ErgoWiki.js)\n\nThe `SvgErgoWiki` component is a React component that renders an SVG image. The image is a logo for the ErgoWiki project, which is likely a part of the larger ErgoWeb project. The logo consists of a stylized letter \"E\" with a curved shape that suggests a globe or a planet. The logo is black and white, with a thick black stroke around the edges of the shape.\n\nThe SVG image is defined using a series of `path` elements, which define the shape of the logo. The `className` attributes on these elements define the styles that are applied to the logo. The `defs` element contains a `style` element that defines the styles used by the `path` elements.\n\nThe `SvgErgoWiki` component takes a single prop, `props`, which is spread onto the `svg` element using the spread operator. This allows any additional props to be passed to the component and applied to the SVG element.\n\nThe logo is designed to be used as a visual identifier for the ErgoWiki project, and can be used in various contexts such as on the project's website, documentation, or marketing materials. The component can be imported and used in other React components as needed, allowing the logo to be easily reused throughout the project. For example:\n\n```\nimport SvgErgoWiki from 'path/to/SvgErgoWiki';\n\nconst Header = () => (\n  <header>\n    <SvgErgoWiki />\n    <h1>ErgoWiki</h1>\n  </header>\n);\n```\n\nThis code would render the ErgoWiki logo and the project name in a header element.\n## Questions: \n 1. What is the purpose of this SVG image and where is it being used in the ergoweb project?\n   - The purpose of this SVG image is not clear from the code alone, but a smart developer might investigate where it is being imported and used in the ergoweb project to determine its purpose.\n\n2. What is the significance of the `className` attributes in the `path` elements?\n   - The `className` attributes in the `path` elements are likely being used to apply CSS styles to the SVG image. A smart developer might investigate the CSS file associated with this component to see how these classes are being styled.\n\n3. Why are some elements using spread syntax (`{...props}`) while others are not?\n   - It is not clear from the code alone why some elements are using spread syntax while others are not. A smart developer might investigate the parent component that is rendering this SVG image to see what props are being passed down and how they are being used.","metadata":{"source":".autodoc/docs/markdown/components/icons/ErgoWiki.md"}}],["71",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Github.js)\n\nThis code defines a React component called `SvgGithub` that renders an SVG image of the GitHub logo. The component takes in props, but none are required. The SVG image has a width of 39 and a height of 40, and is styled with the classes \"fill-current text-black dark:text-white\". The actual image is defined by a `path` element with a long string of coordinates that draw the shape of the logo.\n\nThis component can be used in the larger project to display the GitHub logo wherever it is needed, such as on a login page or in a footer. It can be imported and used like any other React component:\n\n```\nimport SvgGithub from 'path/to/SvgGithub';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome to my app!</h1>\n      <SvgGithub />\n    </div>\n  );\n}\n```\n\nOverall, this code is a simple and reusable way to display the GitHub logo in a React app.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of the Github logo.\n\n2. What are the dimensions of the SVG image?\n- The width of the SVG image is 39 and the height is 40.\n\n3. What is the significance of the path data in the SVG element?\n- The path data defines the shape of the Github logo in the SVG image.","metadata":{"source":".autodoc/docs/markdown/components/icons/Github.md"}}],["72",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Heart.js)\n\nThis code defines a React component called `SvgHeart` that renders an SVG image of a heart. The heart is filled with a bright orange color and has a width of 20 pixels and a height of 18 pixels. The heart is defined using a path element with a complex set of coordinates that create the shape of the heart.\n\nThis component can be used in a larger project that requires the display of a heart icon, such as a social media app that allows users to \"like\" posts. The component can be imported into other React components and used like any other React component. For example, if we have a component called `Post` that displays a post and allows users to like it, we can use the `SvgHeart` component like this:\n\n```\nimport React from 'react';\nimport SvgHeart from './SvgHeart';\n\nconst Post = ({ title, content, likes }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      <p>{content}</p>\n      <button>\n        <SvgHeart />\n        {likes}\n      </button>\n    </div>\n  );\n};\n\nexport default Post;\n```\n\nIn this example, we import the `SvgHeart` component and use it inside a button element to display the heart icon next to the number of likes. The `SvgHeart` component takes no props, so we can simply include it as a self-closing tag. The `Post` component can then be used in other parts of the app to display posts and allow users to like them.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component that renders an SVG heart icon.\n\n2. What are the props that can be passed to this component?\n- The component accepts any props that can be passed to an SVG element, as specified by the spread operator in the JSX code.\n\n3. What is the significance of the path data in the SVG element?\n- The path data defines the shape of the heart icon using SVG path commands.","metadata":{"source":".autodoc/docs/markdown/components/icons/Heart.md"}}],["73",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlight.js)\n\nThe code defines a React component called `SvgHighlight` that renders an SVG image of a highlighter pen. The SVG image has a width of 12 and a height of 11, and is filled with a bright orange color (#FF5E18). The `SvgHighlight` component takes in `props` as an argument, which can be used to customize the SVG image if needed.\n\nThis component can be used in the larger project to display a highlighter icon or button, for example in a text editor or note-taking app. The component can be imported and used in other React components like so:\n\n```\nimport SvgHighlight from 'path/to/SvgHighlight';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Component</h1>\n      <button>\n        <SvgHighlight />\n        Highlight\n      </button>\n    </div>\n  );\n};\n```\n\nIn this example, the `SvgHighlight` component is used inside a button element to display the highlighter icon next to the text \"Highlight\". The `SvgHighlight` component can be customized by passing in props like so:\n\n```\n<SvgHighlight width={24} height={22} fill=\"#FFA500\" />\n```\n\nThis would render the highlighter icon with a width of 24, height of 22, and a different fill color (#FFA500). Overall, the `SvgHighlight` component provides a simple and reusable way to display a highlighter icon in the larger project.\n## Questions: \n 1. What is the purpose of this code?\n   \n   This code defines a React component called `SvgHighlight` that renders an SVG image of a highlighter with a specific color.\n\n2. What are the props that can be passed to this component?\n   \n   The component accepts any props that can be passed to an SVG element, as indicated by the spread operator `{...props}`. However, the component does not use any of these props in its own implementation.\n\n3. What is the expected output of this component?\n   \n   The expected output is an SVG image of a highlighter with the color `#FF5E18`. The image has a width of 12 and a height of 11, and consists of a complex path made up of multiple subpaths.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlight.md"}}],["74",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlights1.js)\n\nThe code defines a React component called `SvgHighlights1` that renders an SVG image. The image consists of two elements: a circle and a path. The circle is filled with a linear gradient that goes from light gray to transparent black. The path is filled with a linear gradient that goes from orange to transparent orange. Both elements have filters applied to them to create drop shadows and inner shadows.\n\nThis component can be used in the larger project as a decorative element, such as a background or a banner. It can be imported into other React components and rendered as part of the UI. For example:\n\n```\nimport SvgHighlights1 from './SvgHighlights1';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Welcome to my website!</h1>\n      <SvgHighlights1 />\n      <p>Here's some text about me and what I do.</p>\n    </div>\n  );\n};\n```\n\nThe `SvgHighlights1` component will render the SVG image as a background behind the heading and paragraph. The linear gradients and filters create a visually interesting effect that draws attention to the content. The component can be customized by passing props to it, such as width and height, to fit different layouts and screen sizes.\n## Questions: \n 1. What is the purpose of the SvgHighlights1 component?\n   \n   The SvgHighlights1 component is a React component that renders an SVG image with two groups of shapes, each with its own filter and gradient.\n\n2. What do the filters with ids \"highlights-1_svg__a\" and \"highlights-1_svg__c\" do?\n   \n   The filter with id \"highlights-1_svg__a\" applies a drop shadow effect to the circle shape, while the filter with id \"highlights-1_svg__c\" applies a drop shadow effect and an inner shadow effect to the path shape.\n\n3. What do the linear gradients with ids \"highlights-1_svg__b\" and \"highlights-1_svg__d\" do?\n   \n   The linear gradient with id \"highlights-1_svg__b\" is applied as a fill to the circle shape, while the linear gradient with id \"highlights-1_svg__d\" is applied as a fill to the path shape. Both gradients use two stop colors to create a gradient effect.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlights1.md"}}],["75",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlights1big.js)\n\nThe `SvgHighlights1` component is a React component that renders an SVG image. The image consists of two parts: a circle and a path. The circle is created using the `circle` element and is filled with a linear gradient defined in the `defs` section of the SVG. The path is created using the `path` element and is filled with another linear gradient defined in the `defs` section of the SVG. The `filter` attribute is used to apply drop shadows and inner shadows to the circle and path elements.\n\nThis component can be used in the larger project as a decorative element on a web page. It can be imported and rendered like any other React component. For example:\n\n```\nimport SvgHighlights1 from 'path/to/SvgHighlights1';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome to my page!</h1>\n      <SvgHighlights1 />\n      <p>Here is some text...</p>\n    </div>\n  );\n}\n```\n\nThe `SvgHighlights1` component can be customized by passing props to it. For example, the `width` and `height` props can be used to adjust the size of the SVG image. Other props can be used to adjust the colors of the linear gradients or the strength of the drop shadows and inner shadows.\n\nOverall, the `SvgHighlights1` component is a simple but visually appealing SVG image that can be used to enhance the design of a web page.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used for visual design purposes, as it contains a circle and a path with gradients and filters applied.\n\n2. What library or framework is being used to create this SVG image?\n- The code is using React, as indicated by the import statement at the beginning of the code.\n\n3. What is the significance of the numbers used in the SVG attributes?\n- The numbers used in the SVG attributes determine the size, position, and shape of the elements in the image. For example, the \"width\" and \"height\" attributes of the SVG element set the dimensions of the image, while the \"cx\", \"cy\", and \"r\" attributes of the circle element determine its position and size.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlights1big.md"}}],["76",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlights2.js)\n\nThe `SvgHighlights2` component is a React component that renders an SVG image. The image is a filled path that resembles a curved shape with a gradient fill. The purpose of this component is likely to provide a visual element for the larger project, which may be a website or application. \n\nThe component takes in `props` as an argument, but it is not used within the component. Instead, the component returns an SVG element with a `width` of 416 and a `height` of 402. The `fill` attribute of the `path` element is set to a linear gradient that is defined in the `defs` section of the SVG. The gradient has two stops, one with a stop color of `#FF5E18` and the other with a stop color of `#F6F6F6`. \n\nThis component can be used in the larger project by importing it and rendering it wherever it is needed. For example, if the larger project is a website, this component can be used to add a decorative element to a page. \n\nExample usage:\n\n```\nimport SvgHighlights2 from './SvgHighlights2';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome to my website</h1>\n      <SvgHighlights2 />\n      <p>Here is some content</p>\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of this code?\n   - This code is a React component that renders an SVG image of a shape filled with a linear gradient.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width of 416 and a height of 402.\n\n3. What is the purpose of the linear gradient defined in the code?\n   - The linear gradient is used to fill the shape in the SVG image with a color that changes from #FF5E18 to #F6F6F6.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlights2.md"}}],["77",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlights2big.js)\n\nThe `SvgHighlights2` component is a React functional component that renders an SVG image. The image is a filled path that resembles a curved shape with a gradient fill. The purpose of this component is likely to provide a visual highlight or decoration for a section of a web page or application. \n\nThe SVG image is defined using the `path` element, which contains a `d` attribute that specifies the shape of the path. The `fill` attribute is set to a linear gradient that is defined in the `defs` section of the SVG. The gradient starts with a stop color of `#FF5E18` and ends with a stop color of `#F6F6F6`. The `x1`, `y1`, `x2`, and `y2` attributes of the `linearGradient` element define the start and end points of the gradient.\n\nThe component takes in `props` as an argument, but it is not used in the component. The component is exported as the default export of the module, which means that it can be imported and used in other parts of the project like so:\n\n```\nimport SvgHighlights2 from 'path/to/SvgHighlights2';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>My Component</h1>\n      <SvgHighlights2 />\n      <p>This is some text.</p>\n    </div>\n  );\n}\n```\n\nIn this example, the `SvgHighlights2` component is used to add a decorative element to the `MyComponent` component. The SVG image is rendered between the `h1` and `p` elements. The `SvgHighlights2` component can be customized by passing props to it, such as `className`, `style`, or `onClick`, which can be used to add CSS classes, inline styles, or event handlers to the SVG element.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image with a gradient fill.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width of 416 and a height of 402.\n\n3. What is the source of the gradient fill?\n   - The gradient fill is defined in a linearGradient element with an id of \"highlights-2big_svg__a\", and it goes from a stop color of #FF5E18 to a stop color of #F6F6F6.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlights2big.md"}}],["78",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlights3.js)\n\nThe `SvgHighlights3` component is a React functional component that renders an SVG image. The image consists of three parts: a background gradient, a circle, and a path. The background gradient is defined in the `defs` section of the SVG and is applied to the path. The circle is centered in the middle of the SVG and has a radius of 107. The path is a complex shape that is drawn using a series of lines and curves. It is colored in a solid gray color.\n\nThe purpose of this component is likely to be used as a decorative element in a larger web application. The SVG can be easily customized by changing the colors of the circle and path or by modifying the shape of the path. The component can be imported into other React components and used like any other React component. For example:\n\n```\nimport SvgHighlights3 from './SvgHighlights3';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to my website</h1>\n      <SvgHighlights3 />\n      <p>Here is some text about my website</p>\n    </div>\n  );\n}\n```\n\nIn this example, the `SvgHighlights3` component is used to add a decorative element to the top of the page. The component is wrapped in a `div` element along with some text. The resulting output will be a page with a decorative SVG at the top, followed by some text.\n## Questions: \n 1. What is the purpose of this SVG image?\n- The SVG image is a graphic representation of a highlighter pen, with a gradient color scheme and a circle in the middle.\n\n2. What library or framework is being used to create this SVG image?\n- The code is using React, a popular JavaScript library for building user interfaces.\n\n3. What is the significance of the numbers used in the SVG element?\n- The numbers in the SVG element specify the width and height of the image, as well as the coordinates and dimensions of the various shapes and paths within the image.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlights3.md"}}],["79",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Highlights3big.js)\n\nThe code defines a React component called `SvgHighlights3` that renders an SVG image. The image consists of three parts: a large curved shape filled with a gradient, a circle filled with a solid color, and a group of shapes filled with a solid color. The purpose of this component is likely to be used as a decorative element in a larger web application or website.\n\nThe large curved shape is defined by a `path` element with a `d` attribute that specifies a set of coordinates for the shape. The coordinates create a symmetrical curve that spans the width of the SVG canvas and is centered vertically. The shape is filled with a gradient that starts with a bright orange color at the top and transitions to a light gray color at the bottom. The gradient is defined by a `linearGradient` element with an `id` attribute that is referenced by the `fill` attribute of the `path` element.\n\nThe circle is defined by a `circle` element with `cx`, `cy`, and `r` attributes that specify the center coordinates and radius of the circle. The circle is filled with a light gray color.\n\nThe group of shapes is defined by a `path` element with a `d` attribute that specifies a set of coordinates for the shapes. The coordinates create a set of interconnected shapes that resemble a star or flower. The shapes are filled with a dark gray color.\n\nThe component is exported as the default export, which means it can be imported and used in other parts of the application like so:\n\n```\nimport SvgHighlights3 from 'path/to/SvgHighlights3';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>My Component</h1>\n      <SvgHighlights3 />\n    </div>\n  );\n}\n```\n\nThis would render the `SvgHighlights3` component as an SVG image within the `MyComponent` component. The image could be styled with CSS or passed props to modify its appearance or behavior.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is used for highlighting content on a webpage.\n\n2. What library or framework is being used to create this SVG image?\n- This SVG image is created using React.\n\n3. What is the significance of the linear gradient defined in the `defs` section?\n- The linear gradient is used to fill the main path of the SVG image with a gradient that goes from `#FF5E18` to `#F6F6F6`.","metadata":{"source":".autodoc/docs/markdown/components/icons/Highlights3big.md"}}],["80",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/LanguageSelector.js)\n\nThe code is a React component that renders an SVG icon for a language selector. The icon is a triangle pointing downwards, with a black fill and a white fill in dark mode. The component takes in props, but it does not use them in any way. The width and height of the SVG are fixed at 17 and 10 respectively.\n\nThis component can be used in a larger project that requires a language selector icon. It can be imported and used in other React components like so:\n\n```\nimport SvgLanguageSelector from 'path/to/SvgLanguageSelector';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Select a language:</h1>\n      <SvgLanguageSelector />\n    </div>\n  );\n};\n```\n\nThe above code will render the language selector icon below the heading \"Select a language\". The component can be styled using CSS to change the color of the fill or the size of the icon.\n\nOverall, this code is a simple and reusable component that can be used in a larger project to provide a language selector icon.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component that renders an SVG icon for language selection.\n\n2. What are the dimensions of the SVG icon?\n   The SVG icon has a width of 17 and a height of 10.\n\n3. What is the meaning of the path attribute in the SVG element?\n   The path attribute defines the shape of the icon using SVG path commands. In this case, it draws a triangle shape.","metadata":{"source":".autodoc/docs/markdown/components/icons/LanguageSelector.md"}}],["81",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/LanguageSelectorWhite.js)\n\nThe code above is a React component that renders an SVG image of a language selector icon in white color. The component takes in props as an argument, which can be used to customize the SVG image. The SVG image has a width of 17 and a height of 10, and it is defined using the path element. The path element defines a path to be drawn between two points on the SVG canvas. In this case, the path is a triangle shape that is used to represent a language selector icon.\n\nThis component can be used in the larger project to display a language selector icon in the user interface. The component can be imported into other React components and used as a child component to render the icon. For example, if we have a language selector button component, we can use this SVG component to render the icon inside the button. \n\n```jsx\nimport React from 'react';\nimport SvgLanguageSelectorWhite from './SvgLanguageSelectorWhite';\n\nconst LanguageSelectorButton = () => {\n  return (\n    <button>\n      <SvgLanguageSelectorWhite />\n      Select Language\n    </button>\n  );\n};\n\nexport default LanguageSelectorButton;\n```\n\nIn the example above, we import the SvgLanguageSelectorWhite component and use it inside a button element to render the language selector icon. This button component can then be used in other parts of the application to allow users to select their preferred language.\n\nOverall, this code provides a reusable component that can be used to display a language selector icon in the user interface. By using this component, we can ensure consistency in the design of the language selector across the application.\n## Questions: \n 1. What is the purpose of this component?\n   This component is a React SVG component that renders a white language selector icon.\n\n2. What are the dimensions of the SVG element?\n   The width of the SVG element is 17 and the height is 10.\n\n3. What is the meaning of the path data in the SVG element?\n   The path data defines the shape of the icon and creates a triangle with a notch in the middle.","metadata":{"source":".autodoc/docs/markdown/components/icons/LanguageSelectorWhite.md"}}],["82",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Ledger.js)\n\nThe code defines a React component called `SvgLedger` that renders an SVG image of a ledger. The SVG image has a width of 90 and a height of 34, and is filled with white color. The ledger image is composed of several paths that define the shapes of the ledger and its contents.\n\nThis component can be used in the larger project to display a ledger icon or image. It can be imported and used in other React components like any other React component. For example, if a component called `LedgerPage` needs to display a ledger icon, it can import the `SvgLedger` component and render it like this:\n\n```\nimport React from 'react';\nimport SvgLedger from './SvgLedger';\n\nconst LedgerPage = () => {\n  return (\n    <div>\n      <h1>Ledger Page</h1>\n      <SvgLedger />\n    </div>\n  );\n};\n\nexport default LedgerPage;\n```\n\nThis will render the `SvgLedger` component inside the `LedgerPage` component, displaying the ledger icon.\n\nOverall, this code provides a reusable component for displaying a ledger icon or image in the larger project.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as an icon or graphic element in a React-based web application.\n\n2. What is the significance of the props being spread onto the SVG element?\n- The spread operator is used to pass down any additional props that may have been passed to the component, allowing for greater flexibility and customization.\n\n3. What is the meaning behind the path data used in the SVG element?\n- Without additional context, it is difficult to determine the meaning behind the path data. It is likely specific to the application and its use case.","metadata":{"source":".autodoc/docs/markdown/components/icons/Ledger.md"}}],["83",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Line.js)\n\nThe code defines a React component called `SvgLine` that renders an SVG image of a curved line. The `path` element within the `svg` element defines the shape of the line using a series of coordinates and commands. The `props` parameter allows for additional properties to be passed to the component, such as `className` or `style`.\n\nThis component can be used in the larger project to display a decorative or functional line element. It can be styled using CSS to change the color, thickness, or position of the line. For example, the component can be imported into another React component and rendered within a `div` element with a class name of `line-container`:\n\n```\nimport React from 'react';\nimport SvgLine from './SvgLine';\n\nconst MyComponent = () => (\n  <div className=\"line-container\">\n    <SvgLine />\n  </div>\n);\n```\n\nThen, the `line-container` class can be styled in a CSS file to position the line element:\n\n```\n.line-container {\n  position: relative;\n  width: 100%;\n  height: 50px;\n}\n\n.line-container svg {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  stroke: #000;\n  stroke-width: 2px;\n}\n```\n\nThis will render the line element in the center of the container with a black stroke and a thickness of 2 pixels. The `SvgLine` component can be reused throughout the project wherever a line element is needed.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component called `SvgLine` that renders an SVG image of a line with a specific path.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 345.333 and a height of 337.333, but the viewBox attribute is set to \"0 0 259 253\".\n\n3. What is the format of the path data used to draw the line?\n- The path data is defined by the `d` attribute of the `path` element and consists of a series of commands and coordinates that specify the shape of the line. The specific path data used in this code is a long string of numbers and letters that would need to be parsed to understand the exact shape of the line.","metadata":{"source":".autodoc/docs/markdown/components/icons/Line.md"}}],["84",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Linkedin.js)\n\nThis code defines a React component called `SvgLinkedin` that renders an SVG image of the LinkedIn logo. The component takes in props, which are spread onto the SVG element. The SVG has a width and height of 28, and its fill color is set to #FF5E18.\n\nThe SVG image consists of a single `path` element that defines the shape of the logo. The `d` attribute of the path contains a series of commands that specify the path's shape. The path starts at the top left corner of the image (point 0,0), moves horizontally to the right edge (point 26,0), then moves vertically down to the bottom edge (point 26,28), and so on, until the path is closed.\n\nThe logo is composed of several shapes, including a square, a circle, and a stylized \"in\" symbol. These shapes are defined using a combination of straight lines and curves.\n\nThis component can be used in a larger project that requires the LinkedIn logo to be displayed. For example, it could be used in a company's careers page to link to their LinkedIn profile. The component can be imported and used like any other React component:\n\n```\nimport SvgLinkedin from './SvgLinkedin';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Connect with us on LinkedIn</h1>\n      <a href=\"https://www.linkedin.com/company/my-company\">\n        <SvgLinkedin />\n      </a>\n    </div>\n  );\n}\n```\n\nOverall, this code provides a simple and reusable way to display the LinkedIn logo in a React application.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component that renders an SVG icon for LinkedIn.\n\n2. What are the dimensions of the SVG icon?\n- The SVG icon has a width and height of 28 pixels.\n\n3. What color is the icon?\n- The icon is filled with a color specified by the hexadecimal code #FF5E18.","metadata":{"source":".autodoc/docs/markdown/components/icons/Linkedin.md"}}],["85",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Logo.js)\n\nThe code defines a React component called `SvgLogo` that renders an SVG image of a logo. The logo consists of two paths, both of which have the class `fill-black` (or `dark:fill-white` in a dark mode). The first path is a complex shape that resembles a stylized letter \"E\". The second path is a simple shape that outlines the logo.\n\nThis component can be used in the larger project as a visual representation of the ergoweb brand. It can be placed in various parts of the UI, such as the header or footer, to provide a consistent branding experience. \n\nHere is an example of how to use this component in a React application:\n\n```jsx\nimport React from 'react';\nimport SvgLogo from './SvgLogo';\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <SvgLogo />\n        <h1>Ergoweb</h1>\n      </header>\n      <main>\n        {/* rest of the app */}\n      </main>\n      <footer>\n        <SvgLogo />\n        <p>&copy; 2021 Ergoweb</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn this example, the `SvgLogo` component is used in the header and footer to display the ergoweb logo. The logo is accompanied by the name of the brand in the header and a copyright notice in the footer. This helps to reinforce the brand identity and provide a professional look and feel to the application.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG logo.\n\n2. What are the dimensions of the SVG logo?\n- The width and height of the SVG logo are both 82.\n\n3. What is the significance of the class names \"fill-black\" and \"dark:fill-white\"?\n- These class names are used to set the fill color of the SVG paths based on the theme of the website. \"fill-black\" sets the fill color to black, while \"dark:fill-white\" sets the fill color to white when the website is in dark mode.","metadata":{"source":".autodoc/docs/markdown/components/icons/Logo.md"}}],["86",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/LogoBlack.js)\n\nThe code defines a React component called `SvgLogo` that renders an SVG image of a logo. The logo consists of two black paths: one is a complex shape that resembles a stylized letter \"E\", and the other is a simple shape that outlines a hexagon. The logo is 82 pixels wide and 82 pixels tall.\n\nThe `SvgLogo` component takes in a single prop, `props`, which is an object that contains any additional attributes to be applied to the SVG element. These attributes are spread onto the SVG element using the spread operator (`...props`).\n\nThis component can be used in the larger project as a reusable logo component that can be easily inserted into any part of the UI that requires a logo. For example, it could be used in the header of a website or in the footer of an email. Here is an example of how the `SvgLogo` component could be used in a React component:\n\n```\nimport React from 'react';\nimport SvgLogo from './SvgLogo';\n\nconst Header = () => {\n  return (\n    <header>\n      <SvgLogo className=\"logo\" />\n      <nav>\n        {/* navigation links */}\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\nIn this example, the `SvgLogo` component is used in the `Header` component to display the logo in the top left corner of the header. The `className` prop is used to apply a CSS class to the SVG element, which can be used to style the logo with CSS.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG logo.\n\n2. What are the dimensions of the SVG logo?\n- The SVG logo has a width and height of 82.\n\n3. What is the significance of the class names used in the code?\n- The class names \"fill-black\" are used to style the SVG paths with a black fill color.","metadata":{"source":".autodoc/docs/markdown/components/icons/LogoBlack.md"}}],["87",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/LogoWhite.js)\n\nThe code defines a React component called `SvgLogoWhite` that renders a white logo in the shape of a stylized letter \"E\". The logo is composed of two paths, one that forms the letter \"E\" and another that outlines the shape of the logo.\n\nThe `SvgLogoWhite` component takes in `props` as an argument, which can be used to customize the SVG element's attributes. The SVG element has a width and height of 82 pixels and has no fill color by default. The `fill` attribute is set to white for both paths, resulting in a white logo.\n\nThis component can be used in the larger project as a reusable logo component that can be easily inserted into other components or pages. For example, it can be used as the logo for the Ergoweb website or as an icon for a button that links back to the homepage.\n\nHere is an example of how the `SvgLogoWhite` component can be used in a React component:\n\n```\nimport React from 'react';\nimport SvgLogoWhite from './SvgLogoWhite';\n\nconst Header = () => {\n  return (\n    <header>\n      <SvgLogoWhite />\n      <nav>\n        {/* navigation links */}\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\nIn this example, the `SvgLogoWhite` component is used in the `Header` component to display the logo at the top of the page. The logo is followed by a navigation menu.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders a white logo in SVG format.\n\n2. What are the dimensions of the SVG logo?\n- The width and height of the SVG logo are both 82.\n\n3. What is the significance of the path data used in the SVG logo?\n- The path data is used to define the shape of the logo. It consists of a series of commands and coordinates that specify the position and curvature of the lines and curves that make up the logo.","metadata":{"source":".autodoc/docs/markdown/components/icons/LogoWhite.md"}}],["88",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/LogoWithText.js)\n\nThe code defines a React component called `SvgLogoWithText` that renders an SVG image of a logo with text. The SVG image has a width of 213 and a height of 82. The logo is made up of two `path` elements that define the shape of the logo and the text. The `className` attribute of the `path` elements is used to set the fill color of the logo and text to black or white depending on the theme (light or dark). \n\nThe component takes in `props` as an argument, but it is not used in the component. The component is exported as the default export of the module, which means it can be imported and used in other parts of the project.\n\nThis component can be used in the larger project as a logo for the application. It can be imported and rendered in the header or footer of the application to provide branding and visual identity. The component can also be customized by passing in props to change the size, color, or other attributes of the logo and text. \n\nExample usage:\n\n```\nimport SvgLogoWithText from 'path/to/SvgLogoWithText';\n\nconst Header = () => (\n  <header>\n    <SvgLogoWithText width={150} height={50} />\n  </header>\n);\n```\n\nIn this example, the `SvgLogoWithText` component is imported and rendered in the header of the application with a width of 150 and a height of 50. This allows for customization of the logo size to fit the design of the application.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component called `SvgLogoWithText` which renders an SVG image with a logo and some text.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 213 and a height of 82.\n\n3. What is the significance of the class names \"fill-black\" and \"dark:fill-white\"?\n- These class names are used to set the fill color of the SVG paths. The \"fill-black\" class sets the fill color to black, while the \"dark:fill-white\" class sets the fill color to white in dark mode.","metadata":{"source":".autodoc/docs/markdown/components/icons/LogoWithText.md"}}],["89",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/LogoWithTextWhite.js)\n\nThe code defines a React component called `SvgLogoWithText` that renders an SVG image of a logo with accompanying text. The SVG image is 213 pixels wide and 82 pixels tall. The logo and text are drawn using two `path` elements with the class `fill-white`, which fills the paths with white color.\n\nThe logo and text are drawn using a series of path commands that define the shape of the paths. The `d` attribute of each path element contains a string of path commands that define the shape of the path. The path commands include `M` (move to), `H` (horizontal line to), `V` (vertical line to), `L` (line to), and `Z` (close path). The `fillRule` and `clipRule` attributes control how the paths are filled and clipped.\n\nThe component takes in `props` as an argument, but it is not used in the component. The component is exported as the default export of the module, which means it can be imported and used in other parts of the project.\n\nThis component can be used in the larger project as a logo or branding element. It can be imported and rendered in other React components using the following code:\n\n```jsx\nimport SvgLogoWithText from 'path/to/SvgLogoWithText';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <SvgLogoWithText />\n      <h1>Welcome to my website</h1>\n    </div>\n  );\n};\n```\n\nThis code imports the `SvgLogoWithText` component and renders it along with a heading element. The logo and text will be displayed on the page. The component can be styled using CSS to change the color or size of the logo and text.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG logo with text.\n\n2. What are the dimensions of the SVG logo?\n- The width is 213 and the height is 82.\n\n3. What is the significance of the class names used in the code?\n- The \"fill-white\" class is used to specify the fill color of certain SVG paths.","metadata":{"source":".autodoc/docs/markdown/components/icons/LogoWithTextWhite.md"}}],["90",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/MenuClose.js)\n\nThe code defines a React component called `SvgMenuClose` that renders an SVG image of a close icon for a menu. The component takes in props as an argument, which can be used to customize the SVG image. The SVG image has a width of 50 and a height of 51, and it is filled with white color.\n\nThe SVG image consists of two paths that form an X shape. The first path starts from the top left corner of the SVG and goes to the bottom right corner, while the second path starts from the bottom left corner and goes to the top right corner. Both paths are filled with white color.\n\nThis component can be used in a larger project that requires a close icon for a menu. For example, it can be used in a mobile app that has a navigation drawer that can be closed by tapping on a close icon. The component can be imported and used in the code as follows:\n\n```\nimport SvgMenuClose from 'path/to/SvgMenuClose';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My App</h1>\n      <nav>\n        <ul>\n          <li>Menu Item 1</li>\n          <li>Menu Item 2</li>\n          <li>Menu Item 3</li>\n        </ul>\n        <SvgMenuClose />\n      </nav>\n    </div>\n  );\n};\n```\n\nIn this example, the `SvgMenuClose` component is used as the close icon for the navigation menu. When the user taps on the icon, the menu will be closed. The component can also be customized by passing props to it, such as changing the color of the icon or the size of the SVG image.\n## Questions: \n 1. What is the purpose of this code?\n   This code exports a React component that renders an SVG icon for a menu close button.\n\n2. What are the dimensions of the SVG icon?\n   The SVG icon has a width of 50 and a height of 51.\n\n3. What is the significance of the fill attribute in the SVG paths?\n   The fill attribute sets the color of the SVG paths to white (#fff).","metadata":{"source":".autodoc/docs/markdown/components/icons/MenuClose.md"}}],["91",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/MenuOpen.js)\n\nThe code defines a React component called `SvgMenuOpen` that renders an SVG image of three horizontal bars stacked on top of each other. The component takes in `props` as an argument, which allows for additional customization of the SVG image. The SVG image has a fixed width of 50 and a height of 25. The `xmlns` attribute specifies the namespace for the SVG image. The `className` attribute sets the color of the SVG image to black in light mode and white in dark mode. \n\nThis component can be used in the larger project as an icon for a menu button. By importing and rendering this component, the project can easily display a menu icon without having to create a custom SVG image or use an external library. \n\nExample usage:\n\n```\nimport SvgMenuOpen from 'path/to/SvgMenuOpen';\n\nfunction MenuButton() {\n  return (\n    <button>\n      <SvgMenuOpen />\n      <span>Menu</span>\n    </button>\n  );\n}\n```\n\nIn this example, the `SvgMenuOpen` component is imported and rendered inside a button element. The button also includes a text label for accessibility purposes. When the button is clicked, it can trigger a menu to open or close. \n\nOverall, this code provides a simple and reusable solution for displaying a menu icon in a React project.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component that renders an SVG icon of three horizontal lines, commonly used to represent a menu or navigation toggle.\n\n2. What are the dimensions of the SVG icon?\n   The SVG icon has a width of 50 and a height of 25.\n\n3. What is the significance of the \"fill-current text-black dark:text-white\" class name?\n   This class name is likely used for styling purposes and indicates that the SVG icon should be filled with the current color, which is black in light mode and white in dark mode.","metadata":{"source":".autodoc/docs/markdown/components/icons/MenuOpen.md"}}],["92",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/PersonPlaceholder.js)\n\nThe code defines a React component called `SvgPersonPlaceholder` that renders an SVG image of a person placeholder. The SVG image has a width of 324 and a height of 342, and is filled with the color #141414.\n\nThe SVG image consists of a path element that defines the shape of the person placeholder. The path element is defined using a string of commands and parameters that specify the path's movements and curves. The path starts at the point (81, 81), and moves to the right and down to create a circular shape with a radius of 81. The path then ends by moving back to the starting point.\n\nThe component takes in props as an argument, but does not use them in the rendering of the SVG image. This means that the component will always render the same image regardless of the props passed to it.\n\nThis component may be used in the larger project as a placeholder for user avatars or profile images. It can be easily customized by changing the fill color to match the project's color scheme. For example, the component can be used in a user profile page like this:\n\n```jsx\nimport SvgPersonPlaceholder from 'path/to/SvgPersonPlaceholder';\n\nconst UserProfile = ({ user }) => (\n  <div>\n    <SvgPersonPlaceholder />\n    <h1>{user.name}</h1>\n    <p>{user.bio}</p>\n  </div>\n);\n```\n\nIn this example, the `SvgPersonPlaceholder` component is used to display a placeholder image for the user's profile picture. The user's name and bio are displayed below the image.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component called `SvgPersonPlaceholder` that renders an SVG image of a person placeholder.\n\n2. What are the dimensions of the SVG image?\n   The SVG image has a width of 324 and a height of 342.\n\n3. What is the meaning of the path data in the SVG image?\n   The path data defines the shape of the person placeholder image, including the head and body, and also includes a rectangular shape at the bottom that represents the person's feet.","metadata":{"source":".autodoc/docs/markdown/components/icons/PersonPlaceholder.md"}}],["93",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Power.js)\n\nThe code defines a React component called `SvgPower` that renders an SVG image of a power button. The button is an ellipse filled with a linear gradient that goes from white to a dark gray color. The button also has a path element that represents the symbol for power. The symbol is filled with black color. \n\nThe component takes in props, which are spread onto the SVG element. This allows the component to accept any valid SVG attribute as a prop. The width and height of the SVG are fixed at 43 and 42 respectively. \n\nThe purpose of this component is to provide a reusable power button that can be used throughout the ergoweb project. It can be used in various parts of the UI where a power button is needed, such as a settings page or a device control panel. \n\nHere is an example of how the component can be used:\n\n```jsx\nimport SvgPower from 'path/to/SvgPower';\n\nfunction DeviceControlPanel() {\n  return (\n    <div>\n      <h2>Device Control Panel</h2>\n      <button>\n        <SvgPower />\n        Turn On\n      </button>\n    </div>\n  );\n}\n```\n\nIn this example, the `SvgPower` component is used inside a button element to create a power button that says \"Turn On\". The component can be used in this way anywhere in the project where a power button is needed.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders a power button icon with an ellipse and a path.\n\n2. What are the dimensions of the SVG element?\n   - The SVG element has a width of 43 and a height of 42.\n\n3. What is the significance of the linear gradient defined in the code?\n   - The linear gradient is used to fill the ellipse with a gradient that goes from white to gray.","metadata":{"source":".autodoc/docs/markdown/components/icons/Power.md"}}],["94",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Reddit.js)\n\nThe code defines a React component called `SvgReddit` that renders an SVG image of the Reddit logo. The logo is a white alien head on an orange background. The component takes in props, but does not use them in the rendering of the image. \n\nThe SVG image has a width and height of 40 pixels and is styled with the classes \"fill-current text-black dark:text-white\". The `fill-current` class sets the fill color of the SVG to the current text color, which is black in light mode and white in dark mode. \n\nThe image consists of several paths that define the shape of the alien head and the background. The paths are defined using the `path` element and the `d` attribute, which specifies a series of commands and coordinates that define the path. \n\nThe component is exported as the default export, which means it can be imported into other files using the `import` statement. For example, if this file is located in a directory called `components`, it can be imported into another file like this:\n\n```\nimport SvgReddit from './components/SvgReddit';\n```\n\nThe `SvgReddit` component can then be used in the rendering of other components, like this:\n\n```\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome to Reddit</h1>\n      <SvgReddit />\n    </div>\n  );\n}\n```\n\nThis code would render a heading that says \"Welcome to Reddit\" and the Reddit logo next to it. The logo could be styled using CSS to change its size, color, or position on the page.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of the Reddit logo.\n\n2. What are the props that can be passed to this component?\n- The component accepts any props that can be passed to an SVG element, in addition to a className prop that sets the fill color of the image.\n\n3. What is the structure of the SVG image being rendered?\n- The image consists of a single path element that defines the shape of the Reddit logo. The logo is composed of several curved and straight lines.","metadata":{"source":".autodoc/docs/markdown/components/icons/Reddit.md"}}],["95",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/RoadmapCompleted.js)\n\nThe code defines a React component called `SvgRoadmapCompleted` that renders an SVG image of a completed roadmap. The image consists of an ellipse filled with a linear gradient and a path that represents a checkmark. The checkmark is positioned in the center of the ellipse and is colored black. The linear gradient used to fill the ellipse starts with a green color at the top and fades to white at the bottom.\n\nThis component can be used in the larger project to represent the completion of a roadmap or a milestone. It can be used in conjunction with other components to create a dashboard or a progress tracker. For example, it can be used in a dashboard that displays the progress of a project and highlights the milestones that have been completed. \n\nHere is an example of how this component can be used in a React application:\n\n```\nimport React from 'react';\nimport SvgRoadmapCompleted from './SvgRoadmapCompleted';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Project</h1>\n      <SvgRoadmapCompleted />\n      <p>Roadmap completed!</p>\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nIn this example, the `SvgRoadmapCompleted` component is used to indicate that the roadmap for the project has been completed. The component is rendered inside a `div` element along with a heading and a paragraph that provides additional information. \n\nOverall, this code provides a simple and reusable way to represent the completion of a roadmap or a milestone in a React application.\n## Questions: \n 1. What is the purpose of this component?\n   - This component is a SVG icon for a completed roadmap item.\n2. What library or framework is being used in this code?\n   - This code is using React.\n3. What is the significance of the linear gradient defined in the `defs` section?\n   - The linear gradient is used to fill the ellipse shape with a gradient that goes from green to light green.","metadata":{"source":".autodoc/docs/markdown/components/icons/RoadmapCompleted.md"}}],["96",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/RoadmapInProgress.js)\n\nThe `SvgRoadmapInProgress` component is a React component that renders an SVG image of a circular progress bar with a road map icon in the center. The progress bar is filled with a linear gradient that goes from orange to light orange. The purpose of this component is to display a visual representation of a work in progress, such as a project roadmap or a task list. \n\nThe component takes in props, which can be used to customize the appearance of the SVG image. The `width` and `height` props determine the size of the image. Other props can be used to set attributes such as `class` or `id`. \n\nThe SVG image consists of two main elements: an ellipse and a path. The ellipse is used to create the circular progress bar, while the path is used to create the road map icon in the center. The path is created using a series of commands that define the shape of the icon. \n\nThe component uses the `fill` attribute to set the color of the ellipse and the path. The color of the ellipse is set to a linear gradient that goes from orange to light orange. The color of the path is set to black. \n\nThe component also uses the `defs` element to define the linear gradient used for the ellipse. The `linearGradient` element defines the start and end points of the gradient, as well as the colors used in the gradient. \n\nThis component can be used in the larger project to display a visual representation of a work in progress. It can be used to show the progress of a project roadmap, a task list, or any other work that is in progress. The component can be customized to match the style of the larger project by passing in props to set attributes such as `class` or `id`. \n\nExample usage:\n\n```\nimport SvgRoadmapInProgress from 'path/to/SvgRoadmapInProgress';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Project Roadmap</h1>\n      <SvgRoadmapInProgress width={200} height={200} />\n    </div>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of this SVG image?\n   - This SVG image represents a roadmap in progress and includes an ellipse and a path with various shapes and colors.\n\n2. What library or framework is being used to create this SVG image?\n   - This SVG image is being created using React, as indicated by the import statement at the beginning of the code.\n\n3. What is the significance of the linear gradient defined in the `defs` section?\n   - The linear gradient is used to fill the ellipse with a color that changes from #FF5E18 to #FF7C44 from top to bottom.","metadata":{"source":".autodoc/docs/markdown/components/icons/RoadmapInProgress.md"}}],["97",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/RoadmapPlanned.js)\n\nThe `SvgRoadmapPlanned` component is a React component that renders an SVG image of a circle with a gradient fill and a path element that creates a shape within the circle. The circle has a width of 29 and a height of 28, and its fill is defined by a linear gradient that goes from white to a dark gray color. The path element creates a shape that resembles a flag or a banner, and it is filled with a solid black color.\n\nThis component is likely used in the larger project as an icon or a visual element to represent a planned or upcoming feature or milestone in a roadmap or a project plan. It can be imported and used in other React components like this:\n\n```jsx\nimport SvgRoadmapPlanned from 'path/to/SvgRoadmapPlanned';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Upcoming Features</h2>\n      <ul>\n        <li>\n          <SvgRoadmapPlanned />\n          Feature A\n        </li>\n        <li>\n          <SvgRoadmapPlanned />\n          Feature B\n        </li>\n        <li>\n          <SvgRoadmapPlanned />\n          Feature C\n        </li>\n      </ul>\n    </div>\n  );\n};\n```\n\nIn this example, the `SvgRoadmapPlanned` component is used to create a visual indicator for upcoming features in a list. The component can be reused multiple times with different feature names to create a consistent and recognizable visual language for the project.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component that renders an SVG image of a planned roadmap.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 29 and a height of 28.\n\n3. What is the significance of the linear gradient defined in the code?\n- The linear gradient is used to fill the ellipse in the SVG image with a gradient that goes from white to a dark gray color.","metadata":{"source":".autodoc/docs/markdown/components/icons/RoadmapPlanned.md"}}],["98",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Sigmaverse.js)\n\nThe code defines a React component called `SvgSigmaverse` that renders an SVG image. The SVG image consists of two `path` elements that define the shape of the image. The `viewBox` attribute of the `svg` element defines the coordinate system used by the image. The `width` and `height` attributes set the size of the image. The `className` attribute sets the CSS classes applied to the image. The `style` attribute sets the rendering properties of the image, such as the quality of the rendering and the fill and clip rules used.\n\nThis component can be used in a larger React application to display the `SvgSigmaverse` image wherever it is needed. For example, it could be used as a logo or icon for the application. The component can be imported and used like any other React component:\n\n```\nimport SvgSigmaverse from './SvgSigmaverse';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to my app!</h1>\n      <SvgSigmaverse />\n    </div>\n  );\n}\n```\n\nThe `SvgSigmaverse` component can also be customized by passing props to it. For example, the `fill` prop could be used to change the color of the image:\n\n```\n<SvgSigmaverse fill=\"red\" />\n```\n\nOverall, this code provides a reusable component for rendering an SVG image in a React application.\n## Questions: \n 1. What is the purpose of this SVG image?\n   - This SVG image is likely used for visual representation on a website or application. It may be part of a larger design or used as a standalone graphic.\n\n2. What library or framework is being used in this code?\n   - This code is using React, a popular JavaScript library for building user interfaces.\n\n3. What are the dimensions of the SVG image?\n   - The SVG image has a width of 40 and a height of 40, but the viewBox attribute suggests that the image can be scaled to fit a larger area. The actual dimensions of the image may depend on how it is used in the context of a website or application.","metadata":{"source":".autodoc/docs/markdown/components/icons/Sigmaverse.md"}}],["99",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Sync.js)\n\nThe code defines a React component called `SvgSync` that renders an SVG image of a circular arrow with a gradient fill. The arrow represents a sync or refresh action, and the component can be used in a larger project as an icon or button to trigger a data refresh or synchronization.\n\nThe SVG image consists of an ellipse with a gradient fill and a path that defines the arrow shape. The arrow path is drawn using a series of lines and curves, and its shape is defined by a set of coordinates. The path is filled with a solid color, and its edges are defined by a stroke that is not visible in this code.\n\nThe component takes in a set of props that can be used to customize its appearance or behavior. These props are passed to the SVG element using the spread operator. The width and height of the SVG element are fixed at 43 pixels, but they could be made dynamic by passing in props for these values.\n\nThe component exports the `SvgSync` function as the default export, which can be imported and used in other React components. For example, a parent component could render the `SvgSync` component inside a button element and attach an event handler to trigger a data refresh when the button is clicked:\n\n```jsx\nimport React, { useState } from 'react';\nimport SvgSync from './SvgSync';\n\nfunction RefreshButton() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  function handleRefresh() {\n    setIsLoading(true);\n    // make API call to refresh data\n    // set isLoading to false when done\n  }\n\n  return (\n    <button onClick={handleRefresh} disabled={isLoading}>\n      {isLoading ? 'Loading...' : <SvgSync />}\n      Refresh Data\n    </button>\n  );\n}\n```\n\nIn this example, the `RefreshButton` component renders a button element with a label and the `SvgSync` component inside it. When the button is clicked, an event handler is called that sets a loading state and makes an API call to refresh the data. The `SvgSync` component is used as an icon to indicate the refresh action, and it can be styled or positioned using CSS to fit the design of the parent component.\n## Questions: \n 1. What is the purpose of this code?\n   - This code exports a React component that renders an SVG image of a sync icon with a gradient fill.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width and height of 43 pixels.\n\n3. What is the significance of the ellipse and path elements in the SVG image?\n   - The ellipse element creates the background shape of the sync icon, while the path element creates the arrow shape.","metadata":{"source":".autodoc/docs/markdown/components/icons/Sync.md"}}],["100",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Telegram.js)\n\nThe code defines a React component called `SvgTelegram` that renders an SVG image of the Telegram logo. The component takes in props, which can be used to customize the SVG's attributes. The SVG has a fixed width of 39 and height of 40, and is styled with the classes \"fill-current text-black dark:text-white\". \n\nThe SVG image itself consists of a single path element, which defines the shape of the logo. The path is defined using a series of commands that specify how to draw lines and curves. The logo is made up of a circular shape with two lines extending from the bottom, forming a stylized letter \"T\". \n\nThis component can be used in the larger project to display the Telegram logo wherever it is needed. For example, it could be used in a social media sharing component that allows users to share content on Telegram. It could also be used in a messaging feature that integrates with the Telegram API. \n\nHere is an example of how the `SvgTelegram` component could be used in a React component:\n\n```\nimport React from 'react';\nimport SvgTelegram from './SvgTelegram';\n\nconst ShareOnTelegramButton = () => {\n  return (\n    <button>\n      <SvgTelegram />\n      Share on Telegram\n    </button>\n  );\n};\n\nexport default ShareOnTelegramButton;\n```\n\nIn this example, the `SvgTelegram` component is used inside a button element to create a \"Share on Telegram\" button. The Telegram logo is displayed alongside the button text.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of the Telegram logo.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 39 and a height of 40.\n\n3. What is the significance of the path data in the SVG image?\n- The path data defines the shape of the Telegram logo by specifying a series of points and curves.","metadata":{"source":".autodoc/docs/markdown/components/icons/Telegram.md"}}],["101",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ThemeDarkBig.js)\n\nThe code defines a React component called `SvgThemeDarkBig` that renders an SVG image. The image consists of a dark background with a curved shape on the right side that has a gradient fill. The component takes in props that can be used to modify the SVG's width, height, and other attributes.\n\nThe SVG image is made up of two groups, each with a filter applied to it. The first group contains a path that defines the dark background of the image. The filter applied to this group creates a drop shadow effect by offsetting the shape and applying a Gaussian blur to it. The second group contains a path that defines the curved shape on the right side of the image. This path has a gradient fill that goes from orange to red. The filter applied to this group creates an inner shadow effect by offsetting the shape and applying a Gaussian blur to it.\n\nThis component can be used in the larger project as a decorative element or icon. It can be imported into other React components and rendered as part of a larger UI. For example, it could be used as a background for a section of a website or as an icon in a navigation menu. The component's props can be used to customize the size and other attributes of the SVG image to fit the needs of the specific use case. \n\nExample usage:\n\n```\nimport SvgThemeDarkBig from './SvgThemeDarkBig';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Welcome to my website</h1>\n      <SvgThemeDarkBig width={200} height={100} />\n      <p>Explore my content below</p>\n    </div>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image with a dark theme.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 81 and a height of 38.\n\n3. What is the purpose of the filters and gradients defined in the code?\n- The filters and gradients are used to apply visual effects to the SVG image, such as shadows and color gradients.","metadata":{"source":".autodoc/docs/markdown/components/icons/ThemeDarkBig.md"}}],["102",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ThemeDarkSmall.js)\n\nThe code defines a React component called `SvgThemeDarkSmall` that renders an SVG image. The image consists of a dark background with a curved shape in the foreground that has a gradient fill. The purpose of this component is likely to provide a small icon or logo for the Ergoweb project that can be used in various places throughout the application.\n\nThe SVG image is defined using various path and filter elements. The `filter` elements apply various visual effects to the image, such as a drop shadow and inner shadow. The `defs` element defines reusable elements such as filters and gradients that are used within the SVG image.\n\nThe component takes in props, but they are not used in the rendering of the SVG image. The width and height of the image are fixed at 50 and 38 respectively. The component is exported as the default export, which means it can be imported and used in other parts of the application like so:\n\n```\nimport SvgThemeDarkSmall from 'ergoweb/SvgThemeDarkSmall';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <SvgThemeDarkSmall />\n      <p>Some text</p>\n    </div>\n  );\n}\n```\n\nOverall, this code defines a small, reusable React component that renders an SVG image with a dark background and a curved shape with a gradient fill. It is likely used as a logo or icon for the Ergoweb project.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image with a dark theme.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 50 and a height of 38.\n\n3. What is the purpose of the filters and gradients defined in the code?\n- The filters are used to apply drop shadows and inner shadows to the SVG elements, while the gradient is used to fill a path with a linear gradient.","metadata":{"source":".autodoc/docs/markdown/components/icons/ThemeDarkSmall.md"}}],["103",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ThemeLightBig.js)\n\nThe `SvgThemeLightBig` component is a React functional component that renders an SVG image. The image consists of a light gray rounded rectangle with a circle in the center. The circle has a gradient fill that goes from orange to dark orange. The SVG image has a width of 81 pixels and a height of 38 pixels.\n\nThe purpose of this component is to provide a visual representation of a light theme for the larger project. It can be used as a decorative element in various parts of the user interface, such as the header or the settings page. The component can be imported and used in other React components like this:\n\n```jsx\nimport SvgThemeLightBig from 'path/to/SvgThemeLightBig';\n\nfunction Header() {\n  return (\n    <header>\n      <SvgThemeLightBig />\n      <h1>My App</h1>\n    </header>\n  );\n}\n```\n\nThe SVG image is composed of two main elements: a rounded rectangle and a circle. The rounded rectangle is created using the `path` element and has a light gray fill color. The circle is created using the `circle` element and has a gradient fill that goes from orange to dark orange. The gradient is defined in the `linearGradient` element with the `id` of `theme-light-big_svg__b`. The gradient goes from the coordinates (35.763, 8) to (14.769, 9.76) and is applied to the circle using the `fill` attribute.\n\nThe SVG image also has a drop shadow effect applied to it using the `filter` element with the `id` of `theme-light-big_svg__a`. The drop shadow is created using a series of filter effects, including `feOffset`, `feGaussianBlur`, and `feComposite`. The result is a subtle drop shadow that gives the image a sense of depth.\n\nOverall, the `SvgThemeLightBig` component is a simple but effective way to provide a visual representation of a light theme in the larger project. It can be easily customized by changing the fill colors or the dimensions of the SVG image.\n## Questions: \n 1. What is the purpose of this SVG image?\n   - This SVG image is a representation of a light theme and is used for visual purposes in the ergoweb project.\n\n2. What is the significance of the linear gradient defined in the `defs` section?\n   - The linear gradient is used to define the fill color of the circle element in the SVG image. It starts with a stop color of `#FF7C44` and ends with a stop color of `#FF5E18`.\n\n3. What is the purpose of the filter defined in the `defs` section?\n   - The filter is used to apply a drop shadow effect to the SVG image. It uses various filter primitives such as `feOffset`, `feGaussianBlur`, and `feComposite` to achieve the desired effect.","metadata":{"source":".autodoc/docs/markdown/components/icons/ThemeLightBig.md"}}],["104",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/ThemeLightSmall.js)\n\nThe `SvgThemeLightSmall` component is a React functional component that renders an SVG icon. The icon consists of a rounded rectangle with a light gray fill and a circle with a gradient fill that is centered within the rectangle. The purpose of this icon is to represent a light theme option in the larger project.\n\nThe SVG icon is defined using various SVG elements such as `path`, `circle`, `linearGradient`, and `filter`. The `path` element defines the rounded rectangle shape with a light gray fill. The `circle` element defines the circle shape with a gradient fill that is centered within the rectangle. The `linearGradient` element defines the gradient fill for the circle. The `filter` element defines a drop shadow effect for the entire icon.\n\nThe `SvgThemeLightSmall` component takes in props, but none of them are used in the component. The component returns the SVG icon with a width of 50 and a height of 34. The icon is also given a filter effect using the `filter` attribute.\n\nThis component can be used in the larger project to represent a light theme option. It can be imported and used in other React components as needed. For example, it can be used as an option in a settings menu or as a button to toggle between light and dark themes. Here is an example of how this component can be used in another React component:\n\n```\nimport React from 'react';\nimport SvgThemeLightSmall from './SvgThemeLightSmall';\n\nconst ThemeOption = ({ theme, onClick }) => {\n  return (\n    <div className=\"theme-option\" onClick={onClick}>\n      {theme === 'light' ? <SvgThemeLightSmall /> : <SvgThemeDarkSmall />}\n      <span>{theme}</span>\n    </div>\n  );\n};\n\nexport default ThemeOption;\n```\n\nIn this example, the `SvgThemeLightSmall` component is used to render the light theme option icon. The `ThemeOption` component takes in props for the current theme and an `onClick` function to handle when the option is clicked. The `SvgThemeLightSmall` component is conditionally rendered based on the current theme prop.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG icon for a light theme.\n\n2. What are the dimensions of the SVG icon?\n   - The SVG icon has a width of 50 and a height of 34.\n\n3. What is the purpose of the linear gradient defined in the code?\n   - The linear gradient is used to fill a circle in the SVG icon with a gradient that goes from a lighter to a darker shade of orange.","metadata":{"source":".autodoc/docs/markdown/components/icons/ThemeLightSmall.md"}}],["105",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Twitter.js)\n\nThis code defines a React component called `SvgTwitter` that renders an SVG image of the Twitter logo. The component takes in `props` as an argument, which allows for any additional props to be passed in when the component is used. The SVG image has a width and height of 40, and a class of `fill-current text-black dark:text-white`, which sets the fill color of the image to black in light mode and white in dark mode.\n\nThe SVG image itself is defined by a `path` element with a `d` attribute that contains a series of coordinates that define the shape of the Twitter bird logo. The coordinates are used to draw lines and curves that form the shape of the bird.\n\nThis component can be used in the larger project to display the Twitter logo wherever it is needed. For example, it could be used in a social media sharing component that allows users to share content on Twitter. The component could also be used in a footer or header component to display links to the organization's social media accounts.\n\nHere is an example of how the `SvgTwitter` component could be used in another React component:\n\n```\nimport React from 'react';\nimport SvgTwitter from './SvgTwitter';\n\nconst SocialMediaLinks = () => {\n  return (\n    <div>\n      <a href=\"https://twitter.com/myorg\">\n        <SvgTwitter />\n      </a>\n    </div>\n  );\n};\n\nexport default SocialMediaLinks;\n```\n\nIn this example, the `SvgTwitter` component is used inside a link element that directs users to the organization's Twitter page. The component is wrapped in an anchor tag to make it clickable.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG icon for Twitter.\n\n2. What are the dimensions of the SVG icon?\n- The SVG icon has a width and height of 40.\n\n3. What is the significance of the \"fill-current text-black dark:text-white\" class name?\n- The class name is used for styling purposes and sets the fill color of the SVG icon to black in light mode and white in dark mode.","metadata":{"source":".autodoc/docs/markdown/components/icons/Twitter.md"}}],["106",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo1.js)\n\nThe code defines a React component called `SvgUniqueErgo1` that renders an SVG image. The image consists of three paths that form a logo for the Ergoweb project. The first path is a large circle with a stroke of white color. The second path is a complex shape that forms the main part of the logo. It is filled with a gradient that goes from transparent to a bright orange color. The third path is a small circle that is filled with white color and placed in the bottom left corner of the image.\n\nThe `SvgUniqueErgo1` component takes an object of props as an argument, but it does not use them in any way. The component returns the SVG image with all the paths and gradients defined inside it. The component can be used in other React components or HTML pages to display the Ergoweb logo.\n\nHere is an example of how to use the `SvgUniqueErgo1` component in a React component:\n\n```jsx\nimport React from 'react';\nimport SvgUniqueErgo1 from './SvgUniqueErgo1';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Welcome to Ergoweb!</h1>\n      <SvgUniqueErgo1 />\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nThis code defines a new React component called `MyComponent` that displays the Ergoweb logo along with a welcome message. The `SvgUniqueErgo1` component is used inside the `MyComponent` component to render the logo.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely part of the UI design of a website or application, as it is a visual element that can be rendered on a webpage.\n\n2. What library or framework is being used to create this SVG image?\n- The code is using React, a popular JavaScript library for building user interfaces.\n\n3. What do the different paths and gradients in the SVG image represent?\n- The different paths and gradients in the SVG image likely represent different shapes and colors used to create the overall design of the image. The specific details of what each element represents would depend on the context and purpose of the image.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo1.md"}}],["107",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo1Light.js)\n\nThe code defines a React component called `SvgUniqueErgo1Light` that renders an SVG image. The image consists of three paths that form a logo for the ErgoWeb project. The first path is a large circle with a stroke color of black. The second path is a complex shape that forms the main part of the logo. It is filled with a gradient color that goes from transparent to orange. The third path is a small circle that is filled with an orange color. \n\nThe component takes in props, but it does not use them in the rendering of the SVG image. The image has a fixed width of 290 and a height of 150. \n\nThis component can be used in the larger ErgoWeb project as a logo that can be displayed on various parts of the website. It can be imported into other React components and rendered as a simple image. \n\nExample usage: \n\n```\nimport SvgUniqueErgo1Light from './SvgUniqueErgo1Light';\n\nconst Header = () => {\n  return (\n    <header>\n      <SvgUniqueErgo1Light />\n      <h1>Welcome to ErgoWeb</h1>\n    </header>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely part of a larger project called \"ergoweb\" and is used to display a unique Ergo logo.\n\n2. What libraries or frameworks are being used in this code?\n- This code is using the React library.\n\n3. What is the significance of the different gradients used in this SVG image?\n- The different gradients are used to fill different parts of the image with different colors, creating a unique and visually appealing design.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo1Light.md"}}],["108",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo2.js)\n\nThe `SvgUniqueErgo2` component is a React component that renders an SVG image. The image consists of three paths that form a unique shape. The first two paths create a circle with a smaller circle inside it. The third path creates a complex shape that fills the smaller circle. The image is colored with a gradient that goes from orange to transparent.\n\nThe purpose of this component is to display the unique shape of the Ergo cryptocurrency logo. It can be used in the Ergo website or any other project related to Ergo. The component can be imported and used like any other React component. For example:\n\n```\nimport SvgUniqueErgo2 from 'path/to/SvgUniqueErgo2';\n\nconst MyComponent = () => (\n  <div>\n    <h1>Welcome to Ergo</h1>\n    <SvgUniqueErgo2 />\n  </div>\n);\n```\n\nThis will render the Ergo logo in the `MyComponent` component.\n\nThe component uses several SVG attributes to create the image. The `width` and `height` attributes set the size of the image. The `fill` attribute sets the color of the paths. The `stroke` and `strokeWidth` attributes set the color and width of the path outlines. The `fillRule` and `clipRule` attributes control how the paths are filled.\n\nThe component also uses two gradients defined in the `defs` section of the SVG. The `radialGradient` creates a circular gradient that goes from orange to transparent. The `linearGradient` creates a linear gradient that goes from orange to transparent. These gradients are used to fill the paths in the image.\n\nOverall, the `SvgUniqueErgo2` component is a simple but effective way to display the Ergo logo in a React project.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as a logo or icon for the ergoweb project.\n\n2. What is the significance of the different paths in the SVG?\n- The different paths in the SVG define the shape and color of the image. They are used to create the main shape of the logo as well as the smaller details like the dot in the middle.\n\n3. What is the purpose of the `defs` section at the end of the code?\n- The `defs` section defines the gradients used in the SVG. These gradients are used to create the color effects seen in the logo.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo2.md"}}],["109",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo2Light.js)\n\nThe code defines a React component called `SvgUniqueErgo2Light` that renders an SVG image. The image consists of three paths that form a unique shape with a gradient fill. The first two paths draw two circles with different sizes and strokes. The third path is the most complex and draws a shape with rounded corners that resembles a stylized letter \"E\". This path has a gradient fill that goes from solid orange to transparent. \n\nThe component takes in `props` as an argument, but it is not used in the code. The SVG image has a fixed width and height of 148 and 151 pixels, respectively. The `defs` section defines two gradients that are used in the third path's fill. \n\nThis component can be used in a larger project as a decorative element or icon. It can be imported and rendered in other React components like any other React component. For example, if we have a `Header` component that needs an icon, we can import and use `SvgUniqueErgo2Light` like this:\n\n```\nimport React from 'react';\nimport SvgUniqueErgo2Light from './SvgUniqueErgo2Light';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>My App</h1>\n      <SvgUniqueErgo2Light />\n    </header>\n  );\n};\n\nexport default Header;\n```\n\nThis will render the `SvgUniqueErgo2Light` component as an SVG image inside the `Header` component. The image can be styled with CSS like any other SVG image.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as a visual element in the ergoweb project, possibly as a logo or icon.\n\n2. What library or framework is being used to create this SVG image?\n- The code is using React to create the SVG image.\n\n3. What do the different paths and gradients in the SVG image represent?\n- The different paths and gradients likely represent different visual elements of the image, such as the outer shape, inner shape, and color gradients.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo2Light.md"}}],["110",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo3.js)\n\nThe `SvgUniqueErgo3` component in this code file is a React functional component that renders an SVG graphic. The primary purpose of this component is to display a custom-designed graphic, which can be used as a visual element in the larger Ergoweb project.\n\nThe component accepts `props` as an argument, which allows users to pass additional properties to the SVG element. The SVG has a fixed width of 151 and height of 150, and it uses various `<path>` elements to create the desired graphic. The paths are defined using the `d` attribute, which contains a series of commands and coordinates to draw the shapes.\n\nThe SVG graphic uses several gradients and colors to create a visually appealing design. These gradients are defined within the `<defs>` section of the SVG, and they are referenced by their respective IDs in the `<path>` elements. The gradients include linear and radial gradients, with varying colors and opacity levels.\n\nSome examples of the gradients used in this SVG are:\n\n- A linear gradient with ID `unique-ergo-3_svg__a`, which transitions from white with 0% opacity to `#DBDBDB` at 50.5% and finally to `#FF5E18` at 100%.\n- A radial gradient with ID `unique-ergo-3_svg__b`, which uses `#FF5E18` color and has varying opacity levels.\n\nThe component also uses various stroke properties, such as `strokeWidth`, `strokeLinecap`, and `strokeLinejoin`, to style the paths.\n\nTo use this component in the larger project, simply import it and include it as a JSX element:\n\n```javascript\nimport SvgUniqueErgo3 from './SvgUniqueErgo3';\n\nfunction App() {\n  return (\n    <div>\n      <SvgUniqueErgo3 />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThis will render the `SvgUniqueErgo3` graphic within the `App` component.\n## Questions: \n 1. **Question**: What is the purpose of the `SvgUniqueErgo3` component?\n   **Answer**: The `SvgUniqueErgo3` component is a React functional component that renders an SVG image. It takes `props` as an argument and passes them to the `svg` element.\n\n2. **Question**: What are the different gradient definitions used in this SVG?\n   **Answer**: There are 5 gradient definitions used in this SVG: `unique-ergo-3_svg__a`, `unique-ergo-3_svg__b`, `unique-ergo-3_svg__c`, `unique-ergo-3_svg__d`, and `unique-ergo-3_svg__e`. These gradients are used to fill or stroke various paths in the SVG image.\n\n3. **Question**: How can I customize the size of the SVG image?\n   **Answer**: The size of the SVG image is set by the `width` and `height` attributes of the `svg` element. You can change these values to customize the size of the image. Alternatively, you can pass custom `width` and `height` values through the `props` argument when using the `SvgUniqueErgo3` component.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo3.md"}}],["111",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo3Light.js)\n\nThe `SvgUniqueErgo3Light` component in this code is a React functional component that renders an SVG image. The primary purpose of this component is to display a custom graphic, which is likely used as a visual element within the larger Ergoweb project.\n\nThe SVG image consists of several paths and shapes, each with their own styling and attributes. The image is composed of a combination of linear and radial gradients, as well as solid colors. The gradients are defined in the `<defs>` section, and then applied to the various paths using their respective `id` attributes.\n\nFor example, the first path has a linear gradient with the id `unique-ergo-3-light_svg__a`, which transitions from transparent white to a shade of gray, and finally to a bright orange color (`#FF5E18`). This gradient is applied to the path using the `fill` attribute.\n\nThe component accepts a `props` parameter, which allows for customization of the SVG image when it is used within the larger project. The `width`, `height`, and other attributes of the SVG element can be modified by passing the appropriate values through the `props` parameter.\n\nHere's an example of how to use the `SvgUniqueErgo3Light` component in another part of the project:\n\n```javascript\nimport SvgUniqueErgo3Light from './SvgUniqueErgo3Light';\n\nfunction App() {\n  return (\n    <div>\n      <SvgUniqueErgo3Light width={200} height={200} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn this example, the component is imported and used within the `App` component, with custom `width` and `height` values of 200.\n## Questions: \n 1. **Question:** What is the purpose of this code?\n   **Answer:** This code defines a React functional component called `SvgUniqueErgo3Light` that renders an SVG image. The image appears to be a custom graphic with various shapes and gradients.\n\n2. **Question:** How can I customize the size of the rendered SVG?\n   **Answer:** The width and height of the SVG are hardcoded to 151 and 150, respectively. To customize the size, you can modify these values or pass in custom `width` and `height` values through the `props` parameter.\n\n3. **Question:** How can I change the colors used in the SVG?\n   **Answer:** The colors are defined using various gradient definitions in the `<defs>` section of the SVG. To change the colors, you can modify the `stopColor` attributes in the `<stop>` elements within the gradient definitions.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo3Light.md"}}],["112",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo4.js)\n\nThe `SvgUniqueErgo4` component is a React functional component that renders an SVG image. The SVG image consists of three paths that form a unique shape. The first path is a filled shape that forms the outer boundary of the image. The second path is a stroked shape that forms the inner boundary of the image. The third path is a filled shape that forms a small circle in the center of the image.\n\nThe purpose of this component is to provide a unique visual representation of the Ergo cryptocurrency. It can be used in the larger Ergoweb project as a visual element on web pages that relate to Ergo. For example, it could be used as a logo on the Ergoweb homepage or as an icon on a page that displays Ergo transaction data.\n\nThe component takes in props, but none of them are used in the rendering of the SVG image. The SVG image has a fixed width of 140 and a fixed height of 151. The paths that make up the image are defined using SVG path commands. The `fill` and `stroke` properties are used to set the colors of the paths. The `defs` section of the SVG image defines three gradients that are used to fill the paths.\n\nHere is an example of how the `SvgUniqueErgo4` component could be used in a React application:\n\n```jsx\nimport React from 'react';\nimport SvgUniqueErgo4 from './SvgUniqueErgo4';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Welcome to Ergoweb</h1>\n      <p>Ergoweb is the best place to learn about Ergo cryptocurrency.</p>\n      <SvgUniqueErgo4 />\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\nIn this example, the `SvgUniqueErgo4` component is used to display the Ergo logo on the homepage of the Ergoweb website.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as a visual element in a React web application, as it is imported as a component.\n\n2. What do the different paths in the SVG represent?\n- The different paths in the SVG likely represent different shapes and colors that make up the image.\n\n3. What is the significance of the linear and radial gradients defined in the SVG?\n- The linear and radial gradients defined in the SVG are used to fill the different paths with color, and create a gradient effect.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo4.md"}}],["113",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UniqueErgo4Light.js)\n\nThe code defines a React component called `SvgUniqueErgo4Light` that renders an SVG image of the Ergo logo. The logo consists of two paths, one that fills the logo with a gradient and another that outlines the logo with a stroke. The logo is made up of a series of curves and shapes that form a unique design. \n\nThe component takes in `props` as an argument, but it is not used in the code. The SVG image has a fixed width of 140 and a height of 151. The `fill` and `stroke` properties are used to set the colors of the logo. The `fill` property uses a linear gradient defined in the `defs` section of the code. The `stroke` property sets the color of the outline of the logo and the `strokeWidth`, `strokeLinecap`, and `strokeLinejoin` properties are used to style the stroke.\n\nThe `defs` section defines three gradients that are used in the SVG image. Two of the gradients are linear and one is radial. The gradients are used to create the color effects in the logo. \n\nThis component can be used in the larger project to display the Ergo logo in various parts of the application. For example, it can be used in the header or footer of the website to display the logo. It can also be used in marketing materials or social media posts to display the logo. \n\nExample usage of the component:\n\n```\nimport SvgUniqueErgo4Light from './SvgUniqueErgo4Light';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to my Ergo website!</h1>\n      <SvgUniqueErgo4Light />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as a visual element in the ergoweb project, possibly as a logo or icon.\n\n2. What libraries or frameworks are being used in this code?\n- This code is using the React library.\n\n3. What is the significance of the different gradients defined in the `defs` section?\n- The gradients defined in the `defs` section are used to fill different parts of the SVG image with color. They are defined using different colors and opacity values to create a specific visual effect.","metadata":{"source":".autodoc/docs/markdown/components/icons/UniqueErgo4Light.md"}}],["114",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgBuyIt.js)\n\nThis code defines a React functional component named `SvgUsingErgBuyIt` that renders an SVG image. The component takes a `props` object as its argument, which can be used to pass additional properties to the SVG element.\n\nThe SVG image has a viewBox of \"0 0 224 414\" and is designed to be responsive with its width and height set to \"auto\". The image consists of several paths and gradients, which together create a visually appealing graphic. The graphic appears to be related to purchasing or using an \"Erg\" product, as suggested by the component name.\n\nThe SVG image uses linear gradients for coloring various parts of the image. For example, the gradient with id \"paint0_linear_1_1463\" goes from a solid orange color (#FF5E18) to a transparent version of the same color. This gradient is used to fill a path that represents a part of the image.\n\nThe component exports the `SvgUsingErgBuyIt` function as its default export, which means it can be easily imported and used in other parts of the ErgoWeb project. To use this component in another part of the project, you would simply import it and include it as a JSX element:\n\n```javascript\nimport SvgUsingErgBuyIt from './path/to/SvgUsingErgBuyIt';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Example Usage of SvgUsingErgBuyIt</h1>\n      <SvgUsingErgBuyIt />\n    </div>\n  );\n}\n```\n\nIn summary, this code defines a reusable React component that renders an SVG image related to purchasing or using an \"Erg\" product. The image is created using paths and gradients, and the component can be easily imported and used in other parts of the ErgoWeb project.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgBuyIt` that renders an SVG image. The image appears to be related to a project called \"ergoweb\".\n\n2. **What are the props that can be passed to this component?**\n\n   The component accepts a `props` object, which can contain any attributes that you want to pass to the SVG element. These attributes will be spread onto the SVG element using the `{...props}` syntax.\n\n3. **How can I use this component in another part of the project?**\n\n   To use this component in another part of the project, you can import it using `import SvgUsingErgBuyIt from 'path/to/this/file';` and then include it in your JSX code like this: `<SvgUsingErgBuyIt />`. You can also pass any additional props to customize the SVG element as needed.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgBuyIt.md"}}],["115",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgBuyItLight.js)\n\nThis code defines a React functional component named `SvgUsingErgBuyItLight` that renders an SVG image. The component takes `props` as its input and passes them to the `svg` element. The SVG image has a viewBox of \"0 0 224 414\" and is designed to be responsive with its width and height set to \"auto\".\n\nThe SVG image consists of multiple paths and shapes, which are grouped together using the `<g>` element. The group has a clipPath attribute, which references a defined clipping path to constrain the rendering of the image within the specified boundaries.\n\nThe SVG image uses linear gradients for coloring some of its paths. These gradients are defined within the `<defs>` element with unique IDs, and are later referenced by the `fill` attribute of the corresponding paths. The gradients have different starting and ending colors, as well as varying opacity levels.\n\nThe image also includes some text elements, which are styled using the `fill` and `stroke` attributes. Some paths have a `stroke` attribute with a specified width, line cap, and line join properties to control the appearance of the stroke.\n\nThe `SvgUsingErgBuyItLight` component can be used in the larger project as a reusable visual element. To include this SVG image in another component, simply import the `SvgUsingErgBuyItLight` component and use it as a JSX element:\n\n```jsx\nimport SvgUsingErgBuyItLight from './path/to/SvgUsingErgBuyItLight';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>My Page</h1>\n      <SvgUsingErgBuyItLight />\n    </div>\n  );\n}\n```\n\nThis will render the SVG image as part of the `MyComponent` component's output.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgBuyItLight` that renders an SVG image. The image appears to be related to a project called \"ergoweb\".\n\n2. **How can I customize the size of the SVG image?**\n\n   The width and height of the SVG image are set to \"auto\" by default. You can customize the size by passing the desired width and height as props to the `SvgUsingErgBuyItLight` component.\n\n3. **How can I change the colors used in the SVG image?**\n\n   The colors are defined using linear gradients with IDs like `using-erg-buy-it-light_svg__b`, `using-erg-buy-it-light_svg__c`, etc. To change the colors, you can modify the `stopColor` attributes of the corresponding `<stop>` elements within the `<linearGradient>` definitions in the `<defs>` section.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgBuyItLight.md"}}],["116",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgMineIt.js)\n\nThis code defines a React functional component named `SvgUsingErgMineIt` that renders an SVG image. The component takes `props` as an argument and passes them to the root `<svg>` element. The SVG image has a viewBox of \"0 0 258 397\" and is designed to be used within the larger ergoweb project.\n\nThe SVG image consists of multiple `<path>` elements, each with different fill and stroke properties, which together create a complex illustration. Some of the paths use linear gradients for their fill, which are defined in the `<defs>` section with unique IDs. These gradients are then referenced in the corresponding `<path>` elements using the `url()` function.\n\nThe component also includes a `<clipPath>` element with a unique ID, which is used to clip the contents of the `<g>` element. This ensures that the rendered image stays within the specified boundaries.\n\nHere's an example of how to use the `SvgUsingErgMineIt` component in a React application:\n\n```jsx\nimport React from 'react';\nimport SvgUsingErgMineIt from './SvgUsingErgMineIt';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Using Erg Mine It SVG</h1>\n      <SvgUsingErgMineIt />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn summary, the `SvgUsingErgMineIt` component is a reusable React component that renders a complex SVG image. It can be easily imported and used in other parts of the ergoweb project.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgMineIt` that renders an SVG image. The image appears to be related to mining or extracting resources, based on the naming and the visual elements in the SVG paths.\n\n2. **How can I customize the size of the SVG image?**\n\n   The width and height of the SVG image are set to \"auto\" by default. You can customize the size by passing `width` and `height` properties to the `SvgUsingErgMineIt` component when using it, like this: `<SvgUsingErgMineIt width=\"100\" height=\"150\" />`.\n\n3. **How can I change the colors used in the SVG image?**\n\n   The colors are defined using linear gradients with IDs like `paint0_linear_1_1488`, `paint1_linear_1_1488`, and `paint2_linear_1_1488`. To change the colors, you can update the `stop-color` attributes within the `<linearGradient>` elements in the `<defs>` section of the SVG.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgMineIt.md"}}],["117",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgMineItLight.js)\n\nThis code defines a React functional component called `SvgUsingErgMineItLight` that renders an SVG image. The component takes `props` as an argument and passes them to the `svg` element. The SVG image has a viewBox of \"0 0 258 397\" and is designed to be used within the larger ergoweb project.\n\nThe SVG image consists of several paths, each with different fill and stroke properties. The paths are grouped together using the `<g>` element, which has a `clipPath` attribute to define the visible region of the image. The SVG also contains several linear gradients with different color stops, which are used to fill some of the paths.\n\nThe image appears to be a combination of various shapes and lines, possibly representing a mining or industrial scene. Some of the shapes are filled with solid colors, while others have gradient fills. The image also includes text elements and some decorative elements.\n\nHere's an example of how to use the `SvgUsingErgMineItLight` component in a larger React application:\n\n```jsx\nimport React from 'react';\nimport SvgUsingErgMineItLight from './SvgUsingErgMineItLight';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Example Application</h1>\n      <SvgUsingErgMineItLight />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `SvgUsingErgMineItLight` component is imported and used within the `App` component. The resulting image will be displayed on the page when the `App` component is rendered.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgMineItLight` that renders an SVG image. The image seems to be related to a mining or extraction concept, based on the naming and the visual elements in the SVG paths.\n\n2. **What are the props being passed to this component?**\n\n   The component accepts a `props` object, which is then spread onto the `svg` element using `{...props}`. This means that any additional properties passed to the `SvgUsingErgMineItLight` component will be applied directly to the `svg` element, allowing for customization of the SVG's attributes.\n\n3. **What are the different gradient and clipPath elements used for in this SVG?**\n\n   The gradient elements (`linearGradient` with ids `using-erg-mine-it-light_svg__b`, `using-erg-mine-it-light_svg__c`, and `using-erg-mine-it-light_svg__d`) are used to define linear gradients with different colors and opacity stops. These gradients are then applied as fill colors to various paths in the SVG. The `clipPath` element with id `using-erg-mine-it-light_svg__a` is used to define a clipping region for the SVG, ensuring that any content outside the specified region is not displayed.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgMineItLight.md"}}],["118",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgStoreIt.js)\n\nThis code defines a React functional component called `SvgUsingErgStoreIt` that renders an SVG image. The component takes `props` as an argument and passes them to the `svg` element. The SVG image has a viewBox of \"0 0 258 388\" and is designed to be responsive with its width and height set to \"auto\".\n\nThe SVG image consists of multiple paths and shapes, which are filled and stroked with various colors and gradients. The gradients are defined in the `defs` section with unique IDs and are used as fill properties in the paths. The image also uses clip paths to restrict the drawing area of certain elements.\n\nThe main purpose of this component is to render a specific SVG image, which could be used as an icon, logo, or illustration within the larger Ergoweb project. The component can be imported and used in other parts of the project like this:\n\n```jsx\nimport SvgUsingErgStoreIt from './SvgUsingErgStoreIt';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Example Usage</h1>\n      <SvgUsingErgStoreIt />\n    </div>\n  );\n}\n\nexport default MyComponent;\n```\n\nIn this example, the `SvgUsingErgStoreIt` component is imported and used within another component, rendering the SVG image as part of the component's output.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgStoreIt` that renders an SVG image. The image seems to be related to the ergoweb project, and it is likely used as an icon or illustration within the project.\n\n2. **How can the size of the SVG be customized?**\n\n   The width and height of the SVG are set to \"auto\" by default, but they can be customized by passing the desired width and height as props to the `SvgUsingErgStoreIt` component. For example, `<SvgUsingErgStoreIt width=\"100\" height=\"100\" />` would render the SVG with a width and height of 100 units.\n\n3. **How can the colors of the SVG be customized?**\n\n   The colors of the SVG are defined using linear gradients with specific IDs (e.g., `paint0_linear_1_1515`, `paint1_linear_1_1515`, etc.). To customize the colors, you would need to modify the `stop-color` attributes of the `<stop>` elements within the `<linearGradient>` elements in the `<defs>` section of the SVG code.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgStoreIt.md"}}],["119",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgStoreItLight.js)\n\nThis code defines a React functional component named `SvgUsingErgStoreItLight` that renders an SVG image. The component takes `props` as an input argument and passes them to the `svg` element using the spread syntax `{...props}`. This allows users to pass custom properties to the component when using it in the larger project.\n\nThe SVG image has a viewBox of \"0 0 258 388\" and consists of several `path` elements with different fill rules, clip rules, and gradient definitions. The image appears to be a combination of shapes and text, possibly representing a logo or an icon related to the ergoweb project.\n\nThe code also defines several linear gradients with different color stops and gradient directions. These gradients are used to fill the `path` elements, giving the image a visually appealing appearance.\n\nHere's an example of how this component can be used in the larger project:\n\n```jsx\nimport React from 'react';\nimport SvgUsingErgStoreItLight from './SvgUsingErgStoreItLight';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Example Usage of SvgUsingErgStoreItLight</h1>\n      <SvgUsingErgStoreItLight width=\"100\" height=\"150\" />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `SvgUsingErgStoreItLight` component is imported and used in another component called `App`. The `width` and `height` properties are passed to customize the size of the rendered SVG image.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgStoreItLight` that renders an SVG image. The image seems to be related to a project called \"ergoweb\".\n\n2. **How can the size of the SVG be customized?**\n\n   The width and height of the SVG are set to \"auto\" by default. To customize the size, you can pass the desired width and height as props to the `SvgUsingErgStoreItLight` component.\n\n3. **What are the different fill colors used in this SVG?**\n\n   The SVG uses various fill colors, including linear gradients with different color stops. Some of the colors used are `#141414`, `#FF5E18`, and `#fff`. The linear gradients have IDs like `using-erg-store-it-light_svg__a`, `using-erg-store-it-light_svg__b`, and so on, which are used to apply the gradient fills to different paths in the SVG.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgStoreItLight.md"}}],["120",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgUseIt.js)\n\nThis code defines a React functional component named `SvgUsingErgUseIt` that renders an SVG image. The component takes a `props` object as an argument and passes it down to the root `<svg>` element. The SVG image has a viewBox of \"0 0 259 412\" and is designed to automatically scale its width and height to fit its container.\n\nThe SVG image consists of several `<path>` elements, each with their own `fill-rule`, `clip-rule`, `d`, `fill`, and other attributes. These paths define the shapes and colors of the image. The image also uses linear gradients for some of its colors, which are defined in the `<defs>` section and referenced by their respective `id` attributes.\n\nIn the larger project, this component can be imported and used as an inline SVG image. For example, to include this image in another React component, you would first import it:\n\n```javascript\nimport SvgUsingErgUseIt from './path/to/SvgUsingErgUseIt';\n```\n\nThen, you can use it in your component's JSX like this:\n\n```jsx\n<div>\n  <h1>Example Usage</h1>\n  <SvgUsingErgUseIt />\n</div>\n```\n\nThis will render the SVG image as a child of the `<div>` element, automatically scaling its size to fit the container.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgUseIt` that renders an SVG image. The component takes `props` as an argument and passes them to the `svg` element.\n\n2. **What are the dimensions of the SVG?**\n\n   The SVG has a width and height set to \"auto\" and a viewBox of \"0 0 259 412\". This means that the SVG will scale to fit its container while maintaining its aspect ratio.\n\n3. **What are the different paths and gradients used in the SVG?**\n\n   The SVG contains multiple `path` elements, each with different `fill-rule`, `clip-rule`, `d`, and `fill` attributes. These paths define the various shapes and lines in the SVG image. Additionally, there are several linear gradients defined in the `defs` section, each with a unique `id`, and used as fill colors for some of the paths.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgUseIt.md"}}],["121",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/UsingErgUseItLight.js)\n\nThis code defines a React functional component called `SvgUsingErgStoreIt` that renders an SVG image. The SVG image consists of various shapes and paths, such as rectangles, polygons, and complex paths, which are combined to create a visually appealing graphic. The graphic is likely used as a visual element within the larger ergoweb project.\n\nThe component accepts `props` as an argument, which allows users to pass additional properties to the SVG element. These properties are then spread onto the SVG element using the `{...props}` syntax.\n\nThe SVG image has a viewBox of \"0 0 259 412\", which defines the coordinate system and aspect ratio for the image. The image also uses several linear gradients for coloring different parts of the graphic. These gradients are defined within the `<defs>` section and are referenced by their respective IDs in the `fill` attribute of the paths.\n\nHere's an example of how this component might be used in a larger project:\n\n```jsx\nimport React from 'react';\nimport SvgUsingErgStoreIt from './SvgUsingErgStoreIt';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to ErgoWeb</h1>\n      <SvgUsingErgStoreIt width=\"100\" height=\"100\" />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `SvgUsingErgStoreIt` component is imported and used within another component, `App`. The `width` and `height` properties are passed to the SVG component to control its dimensions.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code defines a React functional component called `SvgUsingErgStoreIt` that renders an SVG image. The component takes `props` as an argument and passes them to the SVG element.\n\n2. **What are the dimensions of the SVG?**\n\n   The SVG has a width and height set to \"auto\" and a viewBox of \"0 0 259 412\". This means that the SVG will scale to fit its container while maintaining its aspect ratio.\n\n3. **What are the different paths and gradients used in this SVG?**\n\n   There are several paths and gradients used in this SVG to create different shapes and color effects. The `fill-rule` and `clip-rule` attributes are used to define how the shapes are filled and clipped. The `linearGradient` elements define color gradients that are applied to the paths using the `fill` attribute with a reference to the gradient's ID.","metadata":{"source":".autodoc/docs/markdown/components/icons/UsingErgUseItLight.md"}}],["122",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletCheck.js)\n\nThe `SvgWalletCheck` component is a React functional component that renders an SVG image of a wallet with a checkmark. The purpose of this component is to provide a visual representation of a successful transaction or payment confirmation in the Ergoweb project.\n\nThe SVG image consists of an ellipse and a path element that are grouped together and styled with a linear gradient fill. The ellipse represents the wallet and is filled with a gradient that goes from orange to a darker shade of orange. The path element represents the checkmark and is filled with white.\n\nThe filter element with the id `wallet-check_svg__a` applies a drop shadow effect to the image, giving it a 3D appearance. The filter consists of several steps, including a flood effect, a color matrix, an offset, a Gaussian blur, and a blend effect.\n\nThe component takes in props, but none are used in the code. The width and height of the SVG image are fixed at 33 and 32, respectively.\n\nThis component can be used in various parts of the Ergoweb project to indicate a successful transaction or payment confirmation. For example, it can be used in a payment confirmation page, a transaction history page, or a dashboard that displays the user's account balance. The component can be imported and used in other React components like any other React component.\n\nExample usage:\n\n```\nimport SvgWalletCheck from 'path/to/SvgWalletCheck';\n\nconst PaymentConfirmation = () => {\n  return (\n    <div>\n      <h2>Payment Confirmed!</h2>\n      <SvgWalletCheck />\n      <p>Your payment of $50 has been successfully processed.</p>\n    </div>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image of a wallet with a checkmark.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width of 33 and a height of 32.\n\n3. What is the purpose of the linear gradient and filter defined in the SVG image?\n   - The linear gradient defines a color gradient used to fill the wallet shape, while the filter applies a drop shadow effect to the entire image.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletCheck.md"}}],["123",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletDesktop.js)\n\nThe code defines a React component called `SvgWalletDesktop` that renders an SVG image of a wallet on a desktop computer. The component takes in `props` as an argument, which can be used to customize the SVG image. The SVG image has a width and height of 18 pixels and is filled with white color.\n\nThe SVG image consists of a path element that defines the shape of the wallet. The path element is defined using a series of commands that specify the starting point, the curves, and the lines that make up the shape of the wallet. The path element is filled with white color.\n\nThe wallet has a rectangular shape with rounded corners. It has a flap at the top that is open, revealing the inside of the wallet. The wallet has a total of three sections: two on the left and one on the right. The two sections on the left are smaller and are meant to hold cards, while the section on the right is larger and is meant to hold cash.\n\nThe code exports the `SvgWalletDesktop` component as the default export, which means that it can be imported and used in other parts of the project. For example, if the project has a component that displays a user's wallet balance, it could use the `SvgWalletDesktop` component to display an icon of a wallet next to the balance.\n\nExample usage:\n\n```\nimport SvgWalletDesktop from 'path/to/SvgWalletDesktop';\n\nconst WalletBalance = ({ balance }) => (\n  <div>\n    <SvgWalletDesktop />\n    <span>{balance}</span>\n  </div>\n);\n```\n\nIn this example, the `WalletBalance` component displays an SVG image of a wallet using the `SvgWalletDesktop` component and the user's wallet balance using a `span` element.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of a wallet for desktop.\n\n2. Are there any props that can be passed to this component?\n- Yes, this component accepts props that can be spread using the spread operator.\n\n3. What library or framework is being used in this code?\n- This code is using React, a JavaScript library for building user interfaces.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletDesktop.md"}}],["124",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletLedger.js)\n\nThis code defines a React component called `SvgWalletLedger` that renders an SVG image of a wallet ledger. The image is 34x34 pixels and has a white fill. The SVG path data is defined in the `d` attribute of the `path` element. The path data defines the shape of the wallet ledger and includes instructions for drawing lines and curves.\n\nThis component can be used in a larger project that requires a wallet ledger icon or image. It can be imported and rendered in other React components like this:\n\n```\nimport SvgWalletLedger from './SvgWalletLedger';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>My Wallet</h1>\n      <SvgWalletLedger />\n    </div>\n  );\n}\n```\n\nThe `SvgWalletLedger` component can be customized with props like any other React component. For example, the `width` and `height` props can be used to adjust the size of the image:\n\n```\n<SvgWalletLedger width={50} height={50} />\n```\n\nOverall, this code provides a reusable component for rendering a wallet ledger icon in a React project.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image of a wallet ledger.\n\n2. What are the props that can be passed to this component?\n   - The component accepts any props that can be passed to an SVG element, such as `className`, `style`, `onClick`, etc.\n\n3. Are there any dependencies required to use this component?\n   - Yes, the code imports the `React` library, so it assumes that the project is using React.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletLedger.md"}}],["125",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletMark.js)\n\nThe code defines a React component called `SvgWalletMark` that renders an SVG image of a wallet icon with a specific color. The SVG image is defined using a `path` element with a complex set of coordinates that define the shape of the wallet icon. The `fill` attribute of the `path` element is set to a specific color (`#FF5E18`) to give the icon its distinctive appearance.\n\nThis component can be used in a larger project that requires a wallet icon to be displayed, such as a financial application or a payment processing system. The component can be imported into other React components and used like any other React component. For example, if we have a `PaymentForm` component that needs to display a wallet icon, we can import the `SvgWalletMark` component and include it in the `PaymentForm` component's render method like this:\n\n```\nimport React from 'react';\nimport SvgWalletMark from './SvgWalletMark';\n\nconst PaymentForm = () => {\n  return (\n    <div>\n      <h2>Payment Form</h2>\n      <SvgWalletMark />\n      <form>\n        {/* form fields go here */}\n      </form>\n    </div>\n  );\n};\n\nexport default PaymentForm;\n```\n\nThis will render the wallet icon along with the payment form. The `SvgWalletMark` component can be customized by passing props to it, such as `width` and `height` to adjust the size of the icon, or `className` to apply custom styles to the icon. Overall, this component provides a simple and reusable way to display a wallet icon in a React application.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image of a wallet mark with a specific color.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width of 11 and a height of 11.\n\n3. What is the meaning of the path data used in the SVG image?\n   - The path data defines the shape of the wallet mark using a series of coordinates and commands that move the drawing pen to different points and draw lines and curves. The specific meaning of the shape is not clear without additional context.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletMark.md"}}],["126",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletMinotaur.js)\n\nThis code defines a React component called `SvgWalletMinotaur` that renders an SVG image of a wallet with a Minotaur design. The SVG image consists of two `path` elements that define the shape and stroke of the image. The `stroke` attribute sets the color of the stroke to a bright orange (#ff4221) and the `strokeWidth` attribute sets the width of the stroke to 8 pixels.\n\nThe `SvgWalletMinotaur` component takes in `props` as an argument, which allows for any additional props to be passed down to the SVG element. The `viewBox` attribute sets the dimensions of the SVG image to 1337 x 1337 pixels, and the `width` and `height` attributes set the dimensions of the SVG element to 1337pt x 1337pt.\n\nThis component can be used in the larger project as a decorative element, such as on a landing page or in a marketing campaign. It can be imported and rendered like any other React component:\n\n```\nimport SvgWalletMinotaur from './SvgWalletMinotaur';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to Ergoweb</h1>\n      <SvgWalletMinotaur />\n    </div>\n  );\n}\n```\n\nOverall, this code provides a reusable and visually appealing SVG component that can be used to enhance the user experience of the Ergoweb project.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a React component that renders an SVG image of a wallet minotaur.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width of 1337pt and a height of 1337pt, and a viewBox of \"0 0 1337 1337\".\n\n3. What is the significance of the stroke and strokeWidth properties in the path elements?\n- The stroke property sets the color of the stroke (outline) of the path, while the strokeWidth property sets the width of the stroke. In this code, both path elements have a stroke color of \"#ff4221\" and a strokeWidth of 8.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletMinotaur.md"}}],["127",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletMobile.js)\n\nThe code defines a React component called `SvgWalletMobile` which renders an SVG image of a mobile wallet. The image is 12 pixels wide and 18 pixels tall and has a white fill color. The wallet is represented by a rectangle with rounded corners and a small cutout at the top. The rectangle is divided into two sections, with the top section being slightly smaller than the bottom section. The cutout at the top is centered and has a curved shape. \n\nThis component can be used in the larger project to represent a mobile wallet icon or button. It can be imported into other React components and rendered as part of a larger user interface. For example, it could be used in a banking app to represent the user's mobile wallet or in an e-commerce app to represent the user's payment options. \n\nHere is an example of how the component can be used in another React component:\n\n```\nimport React from 'react';\nimport SvgWalletMobile from './SvgWalletMobile';\n\nconst PaymentOptions = () => {\n  return (\n    <div>\n      <h2>Payment Options</h2>\n      <ul>\n        <li>Credit Card</li>\n        <li>PayPal</li>\n        <li>\n          <SvgWalletMobile />\n          Mobile Wallet\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default PaymentOptions;\n```\n\nIn this example, the `SvgWalletMobile` component is used to represent the mobile wallet payment option in a list of payment options. The component is rendered alongside the text \"Mobile Wallet\".\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component that renders an SVG image of a mobile wallet.\n\n2. What are the dimensions of the SVG image?\n   The SVG image has a width of 12 and a height of 18.\n\n3. What is the significance of the path data in the SVG image?\n   The path data defines the shape of the image using a series of commands and coordinates. In this case, it creates a rectangle with rounded corners and a smaller rectangle inside it.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletMobile.md"}}],["128",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletSafew.js)\n\nThis code defines a React functional component named `SvgWalletSafew` that renders an SVG image of a wallet with a safe icon. The component takes `props` as an argument and passes them to the root `<svg>` element. The SVG image is composed of multiple `<g>` (group) and `<path>` elements, which define the shapes and styles of the wallet and safe icon.\n\nThe wallet and safe icon is created using a combination of paths and transformations. The main wallet shape is defined in the `wallet-safew_svg__path4` path, while the safe icon is created using the `wallet-safew_svg__Fill-9` and `wallet-safew_svg__Fill-10` paths. The wallet and safe icon are then grouped together using the `wallet-safew_svg__main` group, which applies a transformation to scale and position the icon within the SVG canvas.\n\nAdditionally, there are other paths with IDs `wallet-safew_svg__path1212`, `wallet-safew_svg__path1251`, `wallet-safew_svg__path1290`, `wallet-safew_svg__path1535`, and `wallet-safew_svg__path1574` that define various details and highlights on the wallet and safe icon.\n\nThe `SvgWalletSafew` component can be used in the larger project to display the wallet with a safe icon wherever it is needed. To use the component, simply import it and include it in the JSX of another component:\n\n```javascript\nimport SvgWalletSafew from './SvgWalletSafew';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>My Wallet</h1>\n      <SvgWalletSafew />\n    </div>\n  );\n}\n```\n\nThis will render the wallet with a safe icon as part of the `MyComponent` component.\n## Questions: \n 1. **Question**: What is the purpose of the `SvgWalletSafew` component?\n   **Answer**: The `SvgWalletSafew` component is a React functional component that renders an SVG image of a wallet with a safe icon.\n\n2. **Question**: How can I customize the size and color of the SVG image?\n   **Answer**: You can customize the size of the SVG image by passing the `width` and `height` properties to the component. To change the color, you can modify the `fill` property in the `style` attribute of the relevant elements within the SVG code.\n\n3. **Question**: What is the purpose of the `id` attributes in the SVG elements?\n   **Answer**: The `id` attributes in the SVG elements are used to uniquely identify each element within the SVG, which can be useful for applying styles or manipulating the elements using JavaScript.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletSafew.md"}}],["129",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletSatergo.js)\n\nThis code defines a React component called `SvgWalletSatergo` that renders an SVG image of a wallet. The image consists of two paths: one that defines the shape of the wallet and another that fills in the interior with white rectangles. The component takes in `props` as an argument, which allows for customization of the SVG image through various attributes such as `width`, `height`, and `style`. \n\nThis component can be used in the larger `ergoweb` project as a visual representation of a wallet. It can be imported into other React components and rendered as part of a larger UI. For example, it could be used in a dashboard view that displays a user's wallet balance and transaction history. \n\nHere is an example of how the `SvgWalletSatergo` component could be used in a React component:\n\n```\nimport React from 'react';\nimport SvgWalletSatergo from './SvgWalletSatergo';\n\nconst WalletView = () => {\n  return (\n    <div>\n      <h2>My Wallet</h2>\n      <SvgWalletSatergo width={200} height={200} />\n      <p>Balance: $100</p>\n      <p>Recent Transactions:</p>\n      <ul>\n        <li>Received $50 from John Doe</li>\n        <li>Sent $25 to Jane Smith</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default WalletView;\n```\n\nIn this example, the `SvgWalletSatergo` component is imported and rendered within a `div` element that displays wallet-related information such as balance and transaction history. The `width` and `height` attributes are passed as props to adjust the size of the SVG image.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image of a wallet with some additional paths and styles.\n\n2. What are the dimensions of the SVG image?\n   - The viewBox attribute specifies the dimensions of the SVG image as 1080x1080.\n\n3. What is the significance of the paths and styles used in this code?\n   - The first path defines the shape of the wallet image, while the second path defines some additional shapes inside the wallet. The styles are used to specify how the paths should be filled and stroked.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletSatergo.md"}}],["130",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletStatusWithMark.js)\n\nThe code defines a React component called `SvgWalletStatusWithMark`. This component renders an SVG image of a wallet with a checkmark on it. The image has a width of 55 pixels and a height of 48 pixels. \n\nThe wallet is represented by an ellipse with a gray fill color. The checkmark is represented by a path with an orange fill color. The path is drawn using a series of coordinates that define the shape of the checkmark. \n\nThis component can be used in the larger project to display the status of a user's wallet. For example, it could be used to indicate that a user's wallet has been verified or that a transaction has been successfully completed. \n\nTo use this component in a React application, you would import it and render it like any other React component. For example:\n\n```\nimport SvgWalletStatusWithMark from './SvgWalletStatusWithMark';\n\nfunction App() {\n  return (\n    <div>\n      <h1>My Wallet</h1>\n      <SvgWalletStatusWithMark />\n    </div>\n  );\n}\n```\n\nThis would render the SVG image of the wallet with the checkmark inside the `div` element.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used to represent a wallet status with a mark.\n\n2. What library or framework is being used in this code?\n- This code is using React, as seen in the import statement at the beginning of the code.\n\n3. What is the significance of the fill colors used in this SVG image?\n- The ellipse is filled with a dark gray color (#585858) while the path elements are filled with a lighter gray color (#807e7e) and a bright orange color (#FF5E18). The significance of these colors may be related to the visual representation of the wallet status being conveyed.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletStatusWithMark.md"}}],["131",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletWeb.js)\n\nThe `SvgWalletWeb` component is a React functional component that renders an SVG icon of a wallet. The icon is 20x20 pixels in size and has a white fill color. The purpose of this code is to provide a reusable wallet icon that can be used throughout the Ergoweb project.\n\nThe icon consists of several path elements that define the shape of the wallet. The `d` attribute of each path element contains a series of commands that specify the path of the shape. The commands include `M` for moving to a point, `L` for drawing a line, and `Z` for closing the path. The specific path commands used in this icon are not important for understanding the high-level purpose of the code.\n\nThe component takes in a `props` object, but it is not used in the code. This suggests that the component is meant to be used as a standalone icon and does not require any customization.\n\nTo use this component in the Ergoweb project, it can be imported and rendered like any other React component. For example:\n\n```\nimport SvgWalletWeb from 'path/to/SvgWalletWeb';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Wallet</h1>\n      <SvgWalletWeb />\n    </div>\n  );\n};\n```\n\nThis would render the wallet icon alongside the heading \"My Wallet\". The icon can be styled using CSS, just like any other SVG element.\n\nOverall, the `SvgWalletWeb` component provides a simple and reusable way to include a wallet icon in the Ergoweb project.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG icon of a wallet for use in a web application.\n\n2. What are the dimensions of the SVG icon?\n- The width and height of the SVG icon are both set to 20.\n\n3. What is the significance of the path data in the SVG element?\n- The path data defines the shape of the wallet icon using a series of commands and coordinates.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletWeb.md"}}],["132",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletX.js)\n\nThis code defines a React component called `SvgWalletX` that renders an SVG image of a wallet with an \"X\" on it. The image consists of two `path` elements, one for the wallet shape and one for the \"X\" shape. The `path` elements are defined using SVG path data, which specifies the shape of the path using a series of commands such as `M` for \"move to\", `L` for \"line to\", and `Z` for \"close path\". The `path` elements are styled using `strokeWidth` and `className` attributes, which set the stroke width and fill color of the paths based on the current theme (either \"black\" or \"white\").\n\nThis component can be used in other parts of the `ergoweb` project to display a wallet icon with an \"X\" on it, for example to indicate that a payment has been cancelled or a transaction has failed. The component can be imported and used like any other React component:\n\n```jsx\nimport SvgWalletX from 'ergoweb/components/SvgWalletX';\n\nfunction PaymentStatus({ status }) {\n  return (\n    <div>\n      {status === 'cancelled' && (\n        <div>\n          <SvgWalletX />\n          Payment cancelled\n        </div>\n      )}\n      {status === 'failed' && (\n        <div>\n          <SvgWalletX />\n          Payment failed\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\nOverall, this code demonstrates how React can be used to create reusable UI components that can be easily styled and customized based on the needs of the project. By breaking down the UI into small, composable components like this, developers can create complex interfaces that are easy to maintain and modify over time.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image of a wallet with an \"X\" symbol.\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width of 44 and a height of 42.\n3. What do the commented out properties `stroke` and `fill` do?\n   - These properties are used to set the stroke and fill colors of the SVG paths, but they are currently commented out and not being used. The colors are instead being set by the `className` properties.","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletX.md"}}],["133",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/WalletXGray.js)\n\nThe code defines a React component called `SvgWalletX` that renders an SVG image of a wallet with an \"X\" symbol. The image consists of two paths: one that defines the outline of the wallet and another that fills in the \"X\" symbol. The `width` and `height` of the SVG are set to 44 and 42 respectively, and the `stroke` and `strokeWidth` properties of the outline path are set to `#585858` and 2 respectively. \n\nThis component can be used in a larger project that requires a wallet icon with an \"X\" symbol, such as a financial application that allows users to delete a payment method. The component can be imported into another React component and rendered as JSX, like so:\n\n```\nimport React from 'react';\nimport SvgWalletX from './SvgWalletX';\n\nconst PaymentMethod = ({ name, onDelete }) => {\n  return (\n    <div className=\"payment-method\">\n      <SvgWalletX />\n      <span>{name}</span>\n      <button onClick={onDelete}>Delete</button>\n    </div>\n  );\n};\n\nexport default PaymentMethod;\n```\n\nIn this example, the `SvgWalletX` component is used to render a wallet icon next to the name of a payment method and a \"Delete\" button. When the button is clicked, the `onDelete` function is called to remove the payment method from the user's account. The `SvgWalletX` component provides a visual cue to the user that they are deleting a payment method associated with a wallet.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component that renders an SVG image of a wallet with an \"X\" symbol on it.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width of 44 and a height of 42.\n\n3. What is the significance of the \"stroke\" and \"fill\" properties in the SVG paths?\n   - The \"stroke\" property sets the color of the outline of the wallet shape, while the \"fill\" property sets the color of the \"X\" symbol inside the wallet. Both are set to the color code \"#585858\".","metadata":{"source":".autodoc/docs/markdown/components/icons/WalletXGray.md"}}],["134",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Wechat.js)\n\nThe code defines a React component called `SvgWechat` that renders an SVG image of the WeChat logo. The SVG image has a width of 50 and a height of 40, and is styled with the classes \"fill-current text-black dark:text-white\". The SVG image consists of two paths that define the shape of the logo. The first path defines the outline of the logo, while the second path defines the details of the logo, such as the eyes and mouth. The SVG image is also clipped using a clipPath element to ensure that it fits within a rectangular area with a width of 50 and a height of 40.\n\nThis component can be used in the larger project to display the WeChat logo in various parts of the user interface. For example, it can be used in a social media sharing component to allow users to share content on WeChat. It can also be used in a messaging component to indicate that a user is connected to WeChat. To use this component, it can be imported into another React component and rendered as follows:\n\n```\nimport SvgWechat from 'path/to/SvgWechat';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <SvgWechat />\n    </div>\n  );\n};\n```\n\nThis will render the WeChat logo in the component. The component can also pass props to the `SvgWechat` component to customize its appearance, such as changing its width and height. Overall, this code provides a reusable component for rendering the WeChat logo in a React application.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG icon for WeChat.\n\n2. What are the dimensions of the SVG icon?\n- The SVG icon has a width of 50 and a height of 40.\n\n3. What is the structure of the SVG icon?\n- The SVG icon consists of two paths that define the shape of the icon, and a clipPath that defines the area of the SVG that should be visible. The icon also has a className and props that can be passed in.","metadata":{"source":".autodoc/docs/markdown/components/icons/Wechat.md"}}],["135",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Wiki.js)\n\nThe code defines a React component called `SvgWiki` that renders an SVG image. The SVG image is a stylized icon of a book with a pencil, which is commonly used to represent a wiki or documentation. The component takes in props, but none of them are used in the code. The SVG image has two paths, one for the book and one for the pencil. The paths are defined using the `d` attribute, which specifies the shape of the path. The `strokeWidth` attribute sets the width of the stroke used to draw the path. \n\nThis component can be used in the larger project as an icon for a wiki or documentation section. It can be imported and used in other React components like so:\n\n```\nimport SvgWiki from 'path/to/SvgWiki';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Documentation</h1>\n      <SvgWiki />\n      <p>Check out our wiki for more information.</p>\n    </div>\n  );\n};\n```\n\nThe `SvgWiki` component can be used anywhere in the project where an icon for documentation is needed. The component is reusable and can be styled using CSS classes.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of a Wiki icon with some paths and attributes.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width and height of 34.\n\n3. What is the significance of the paths in the SVG image?\n- The paths define the shape and outline of the Wiki icon, and they also contain some numerical values that determine the position and curvature of the lines.","metadata":{"source":".autodoc/docs/markdown/components/icons/Wiki.md"}}],["136",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/X.js)\n\nThe `SvgX` component is a React functional component that renders an SVG image of an X symbol. The SVG has a width and height of 43 pixels and consists of two paths. The first path is a circle with a stroke color of `#585858` and a stroke width of 2. The second path is the X symbol itself, which is filled with the same color.\n\nThis component can be used in the larger project as a reusable component for displaying an X symbol in various contexts. For example, it could be used as an icon for a delete button or to indicate a close action. The component can be imported and used in other React components like so:\n\n```\nimport SvgX from 'path/to/SvgX';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Are you sure you want to delete?</h2>\n      <button onClick={handleDelete}>\n        <SvgX />\n        Delete\n      </button>\n    </div>\n  );\n};\n```\n\nIn this example, the `SvgX` component is used as an icon next to the \"Delete\" button to indicate that clicking the button will delete something. The `SvgX` component can be easily customized by passing props like `width`, `height`, and `color` to change its appearance.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders an SVG image of an X.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width and height of 43.\n\n3. What is the significance of the stroke and fill properties in the SVG paths?\n- The stroke property sets the color of the outline of the first path to #585858, while the fill property sets the color of the second path to #585858.","metadata":{"source":".autodoc/docs/markdown/components/icons/X.md"}}],["137",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/XHightlighted.js)\n\nThis code defines a React component called `SvgXHightlighted` that renders an SVG image. The image consists of three paths: a large circle with a thick stroke, and two smaller paths that form an X shape inside the circle. The circle and X are both colored in a dark gray (#585858), while a smaller shape in the upper right corner is colored in a bright orange (#FF5E18).\n\nThis component could be used in a variety of ways within the larger ergoweb project. For example, it could be used as an icon to represent a highlighted or selected item, or as a decorative element on a page. The component is relatively small and simple, so it could also be used as a building block for more complex images or icons.\n\nHere is an example of how this component could be used in a React application:\n\n```\nimport React from 'react';\nimport SvgXHightlighted from './SvgXHightlighted';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>My Component</h1>\n      <p>This is some text.</p>\n      <SvgXHightlighted />\n    </div>\n  );\n}\n\nexport default MyComponent;\n```\n\nIn this example, the `SvgXHightlighted` component is rendered inside a `div` element alongside some text. When the component is rendered, it will display the SVG image defined in the code above.\n## Questions: \n 1. What is the purpose of this SVG image?\nAnswer: This SVG image is likely used for highlighting or emphasizing certain elements on a webpage or application.\n\n2. What library or framework is being used in this code?\nAnswer: This code is using React, a popular JavaScript library for building user interfaces.\n\n3. What is the significance of the stroke and fill properties in the paths?\nAnswer: The stroke property sets the color of the outline of the first path, while the fill property sets the color of the second and third paths.","metadata":{"source":".autodoc/docs/markdown/components/icons/XHightlighted.md"}}],["138",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/XWhite.js)\n\nThe code defines a React component called `SvgXWhite` that renders a white X inside a circle. The component takes in props, which are spread onto the SVG element. The SVG has a width and height of 43, and the `path` elements inside it define the shape of the X and circle.\n\nThe first `path` element defines the circle by drawing a closed shape with a radius of 21.26 (half the width/height of the SVG) and a stroke width of 2. The circle is white because the `stroke` property is set to \"#fff\".\n\nThe second `path` element defines the X by drawing a closed shape with four lines. The lines are drawn using absolute coordinates, with the starting point and ending point of each line specified. The X is white because the `fill` property is set to \"#fff\".\n\nThis component could be used in various places throughout the larger project to indicate a close or cancel action. For example, it could be used as a button to close a modal or dismiss a notification. It could also be used as an icon in a navigation bar to indicate a back or home action. The component is reusable and customizable through its props, such as changing the size or color of the SVG. \n\nExample usage:\n\n```jsx\nimport SvgXWhite from 'path/to/SvgXWhite';\n\nfunction CloseButton({ onClick }) {\n  return (\n    <button onClick={onClick}>\n      <SvgXWhite width={20} height={20} />\n    </button>\n  );\n}\n```\n\nIn this example, the `SvgXWhite` component is used inside a button that triggers a close action when clicked. The component is customized to have a width and height of 20, and is wrapped inside a button element with an `onClick` handler.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React component that renders a white X icon inside a circle.\n\n2. What are the dimensions of the SVG element?\n- The SVG element has a width and height of 43.\n\n3. What is the significance of the paths in the SVG element?\n- The first path draws the circle around the X icon, while the second path draws the X icon itself. The X icon is filled with white color.","metadata":{"source":".autodoc/docs/markdown/components/icons/XWhite.md"}}],["139",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/XWhiteHighlighted.js)\n\nThe code defines a React component called `SvgXWhiteHighlighted` that renders an SVG image. The image consists of three paths: a white stroke around a rounded rectangle, a white checkmark inside the rectangle, and an orange X inside a smaller rectangle in the bottom right corner. The stroke and checkmark paths have fixed dimensions and positions, while the X path is defined using absolute coordinates.\n\nThis component could be used in various parts of the ergoweb project to display a highlighted or selected item, such as a button or a list item. It could also be used as an icon to indicate a negative or error state, due to the presence of the X symbol. The component can be imported and used in other React components like this:\n\n```\nimport SvgXWhiteHighlighted from 'path/to/SvgXWhiteHighlighted';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h2>Selected Items:</h2>\n      <ul>\n        <li>Item 1 <SvgXWhiteHighlighted /></li>\n        <li>Item 2</li>\n        <li>Item 3 <SvgXWhiteHighlighted /></li>\n      </ul>\n    </div>\n  );\n}\n```\n\nIn this example, the `SvgXWhiteHighlighted` component is used inside list items to indicate which items are currently selected. The component's dimensions and colors can be customized using props, such as `width`, `height`, `stroke`, and `fill`.\n## Questions: \n 1. What is the purpose of this SVG image?\n- This SVG image is likely used as an icon or graphic element in the ergoweb project.\n\n2. What library or framework is being used in this code?\n- This code is using React, as seen in the import statement at the beginning of the code.\n\n3. What does the `strokeWidth` prop do in the first `path` element?\n- The `strokeWidth` prop sets the width of the stroke (outline) of the path element to 2 pixels.","metadata":{"source":".autodoc/docs/markdown/components/icons/XWhiteHighlighted.md"}}],["140",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/Youtube.js)\n\nThe code defines a React component called `SvgYoutube` that renders an SVG icon of the YouTube logo. The component takes in `props` as an argument, which allows for any additional props to be passed down to the SVG element. The SVG element has a fixed width of 45 and a height of 40. The `className` attribute sets the color of the icon to black in light mode and white in dark mode. \n\nThe `path` element within the SVG element defines the shape of the icon. It consists of two parts: the play button and the red rectangle. The `d` attribute of the `path` element specifies the shape of the icon using a series of commands. The `M` command specifies the starting point of the path, while the `C` command specifies the control points and end points of the curves. The `V` and `L` commands specify vertical and horizontal lines, respectively. \n\nThis component can be used in the larger project as an icon for YouTube-related features, such as a link to a YouTube channel or a video player. It can be imported and used in other React components like so:\n\n```\nimport SvgYoutube from 'path/to/SvgYoutube';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Check out my YouTube channel!</h1>\n      <a href=\"https://www.youtube.com/channel/...\">\n        <SvgYoutube />\n        <span>My Channel</span>\n      </a>\n    </div>\n  );\n};\n```\n\nOverall, this code provides a reusable and customizable SVG icon for YouTube-related features in the ergoweb project.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `SvgYoutube` that renders an SVG icon of the YouTube logo.\n\n2. What are the dimensions of the SVG icon?\n- The SVG icon has a width of 45 and a height of 40.\n\n3. What is the significance of the `fill-current` and `text-black dark:text-white` classes in the SVG element?\n- These classes are used for styling the SVG icon. `fill-current` sets the fill color to the current text color, while `text-black dark:text-white` sets the stroke color to black in light mode and white in dark mode.","metadata":{"source":".autodoc/docs/markdown/components/icons/Youtube.md"}}],["141",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/icons/index.tsx)\n\nThis code exports a large number of components from various files within the `ergoweb` project. These components include icons, logos, and other graphical elements that may be used throughout the project. \n\nBy exporting these components, they can be easily imported and used in other files within the project. For example, if a developer wanted to use the `Logo` component in a particular page or component, they could simply import it like so: \n\n```\nimport { Logo } from 'ergoweb';\n```\n\nThis would allow them to use the `Logo` component within their code. \n\nOverall, this code serves as a way to organize and make accessible various graphical elements that are used throughout the `ergoweb` project. By exporting them in this way, developers can easily use and reuse these components in different parts of the project.\n## Questions: \n 1. What is the purpose of this file?\n- This file exports a large number of image assets used in the ergoweb project.\n\n2. How are these image assets organized?\n- The image assets are organized as named exports, with each export representing a different image.\n\n3. Are there any dependencies required to use these image assets?\n- It is unclear from this code whether there are any dependencies required to use these image assets.","metadata":{"source":".autodoc/docs/markdown/components/icons/index.md"}}],["142",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/shared/ContributeForm.tsx)\n\nThe `ContributeForm` component is a React component that renders a form for users to contribute to the Ergo project. The component imports several modules, including `react-intl` for internationalization, `react-toastify` for displaying toast messages, and a custom `Button` component. \n\nThe component defines several variables that use the `useIntl` hook to format messages for internationalization. These variables are used to set the text for various buttons and form inputs. \n\nThe component also defines a `sendMessage` function that is called when the form is submitted. This function sends a POST request to a Strapi API endpoint with the user's name, email, and message. If the request is successful, a success message is displayed using the `toast` function from `react-toastify`.\n\nThe component renders a form with inputs for the user's name, email, and message, as well as several buttons that link to various resources related to contributing to the Ergo project. The form and buttons are styled using Tailwind CSS classes.\n\nOverall, this component provides a user-friendly way for users to contribute to the Ergo project and access relevant resources.\n## Questions: \n 1. What is the purpose of the `ContributeForm` component?\n- The `ContributeForm` component is used to display information and options for contributing to the Ergo platform, as well as a form for companies to become partners.\n\n2. What is the purpose of the `sendMessage` function?\n- The `sendMessage` function is called when the form in the `ContributeForm` component is submitted, and sends a POST request to a contact-requests API endpoint with the user's inputted data.\n\n3. What external libraries or modules are being used in this code?\n- The code is importing `react-intl`, `../../utils/icons-map`, `../Button`, and `react-toastify`.","metadata":{"source":".autodoc/docs/markdown/components/shared/ContributeForm.md"}}],["143",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/shared/Feed.tsx)\n\nThe code defines a React component called `Feed` that renders a list of `Post` components. The `Feed` component takes in a single prop called `posts`, which is an optional array of post data. If `posts` is not provided, the list of posts will be empty.\n\nThe `Feed` component renders a container div with the id \"Feed\" and several CSS classes that control its layout and styling. Within this container, the component maps over the `data` property of the `posts` array (if it exists) and renders a `Post` component for each post in the array.\n\nEach `Post` component is passed a set of props that correspond to the various attributes of a post, such as its `id`, `title`, `author`, `content`, and `image`. These props are extracted from the `post` object using dot notation.\n\nThe `image` prop is a bit more complex, as it checks whether the `image` attribute of the post data is not null before attempting to extract the URL of the medium-sized image format. If the `image` attribute is null, the `image` prop is set to null as well.\n\nOverall, this code serves as a reusable component for rendering a feed of blog posts on a website. By passing in an array of post data, the `Feed` component can dynamically render a list of `Post` components with the appropriate content and styling. This component can be used in conjunction with other components and features of the larger `ergoweb` project to create a fully-featured blog or content management system. \n\nExample usage:\n\n```\nimport Feed from './Feed';\n\nconst posts = [\n  {\n    id: 1,\n    attributes: {\n      title: 'My First Blog Post',\n      author: 'John Doe',\n      subtitle: 'A brief introduction to my blog',\n      tag: ['blog', 'introduction'],\n      date: '2022-01-01',\n      url: '/blog/my-first-post',\n      permalink: 'https://example.com/blog/my-first-post',\n      type: 'blog',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit...',\n      image: {\n        data: {\n          attributes: {\n            formats: {\n              medium: {\n                url: 'https://example.com/images/my-first-post-medium.jpg'\n              }\n            }\n          }\n        }\n      },\n      blogPhoto: 'https://example.com/images/my-first-post-blog.jpg',\n      authorPhoto: 'https://example.com/images/john-doe.jpg'\n    }\n  },\n  // additional post objects...\n];\n\nfunction Blog() {\n  return (\n    <div>\n      <h1>Welcome to my Blog!</h1>\n      <Feed posts={posts} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `Post` import statement at the beginning of the code?\n- The `Post` import statement is importing a component from a file called `Post`.\n\n2. What is the expected data type for the `posts` prop?\n- The expected data type for the `posts` prop is an object that may contain a `data` property.\n\n3. What is the purpose of the conditional statement in the `image` prop?\n- The conditional statement in the `image` prop is checking if the `image` property of the `post` object is not null, and if it is not null, it is accessing the `medium` format URL of the image.","metadata":{"source":".autodoc/docs/markdown/components/shared/Feed.md"}}],["144",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/components/shared/Post.tsx)\n\nThe `Post` component is a React component that renders a blog post. It takes in a number of props, including the post's `id`, `title`, `subtitle`, `author`, `date`, `image`, `tags`, `url`, `type`, `content`, `permalink`, `blogPhoto`, and `authorPhoto`. \n\nThe component first checks whether the post has an image by checking if either `blogPhoto` or `image` is truthy. If so, it sets `hasImage` to `true` and `imageUrl` to the URL of the image. If not, it sets `hasImage` to `false`.\n\nThe component then renders the post. It first renders the post's image (if it has one) using the `Image` component from the `next/image` package. If the post does not have an image, it renders a gray placeholder image. The component also renders the post's tags as clickable links, and the post's title, subtitle, author, and date. \n\nThe `Post` component is likely used in the larger project to render individual blog posts on a blog page. It is a reusable component that can be used to render any blog post, and it handles the logic of rendering the post's image and tags. \n\nExample usage:\n\n```jsx\n<Post\n  id={1}\n  title=\"My First Blog Post\"\n  subtitle=\"This is a subtitle\"\n  author=\"John Doe\"\n  date=\"2022-01-01\"\n  image=\"/path/to/image.jpg\"\n  tags=\"tag1, tag2, tag3\"\n  url=\"/blog/my-first-blog-post\"\n  type=\"blog\"\n  content=\"This is the content of my first blog post.\"\n  permalink=\"my-first-blog-post\"\n  blogPhoto=\"/path/to/blog/photo.jpg\"\n  authorPhoto=\"/path/to/author/photo.jpg\"\n/>\n```\n## Questions: \n 1. What are the required and optional props for the `Post` component?\n- The required props are `id`, `title`, `url`, and `permalink`, while the optional props are `subtitle`, `author`, `date`, `image`, `tags`, `type`, `content`, `blogPhoto`, and `authorPhoto`.\n\n2. What is the purpose of the `removeMd` function?\n- The `removeMd` function is used to remove markdown syntax from the `content` prop, which is used to display a summary of the blog post.\n\n3. What is the purpose of the `LogoBlack` component?\n- The `LogoBlack` component is used to display a logo for the author of the blog post.","metadata":{"source":".autodoc/docs/markdown/components/shared/Post.md"}}],["145",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/components/shared)\n\nThe `.autodoc/docs/json/components/shared` folder contains reusable React components for the Ergo project. These components are designed to be used in various parts of the application, providing a consistent look and feel across the project.\n\n1. **ContributeForm.tsx**: This component renders a form for users to contribute to the Ergo project. It handles internationalization using `react-intl` and displays toast messages using `react-toastify`. The form includes inputs for the user's name, email, and message, as well as buttons linking to resources related to contributing to the project. The `sendMessage` function sends a POST request to a Strapi API endpoint when the form is submitted. Example usage:\n\n```jsx\nimport ContributeForm from './ContributeForm';\n\nfunction ContributePage() {\n  return (\n    <div>\n      <h1>Contribute to Ergo</h1>\n      <ContributeForm />\n    </div>\n  );\n}\n```\n\n2. **Feed.tsx**: This component renders a list of `Post` components, creating a feed of blog posts. It takes an optional `posts` prop, which is an array of post data. If no `posts` prop is provided, the feed will be empty. The component maps over the `data` property of the `posts` array and renders a `Post` component for each post. Example usage is provided in the summary above.\n\n3. **Post.tsx**: This component renders a blog post, taking in various props such as `id`, `title`, `subtitle`, `author`, `date`, `image`, `tags`, `url`, `type`, `content`, `permalink`, `blogPhoto`, and `authorPhoto`. The component handles the logic of rendering the post's image and tags. It can be used to render individual blog posts on a blog page. Example usage is provided in the summary above.\n\nThese components work together to create a cohesive user experience for the Ergo project. For example, the `Feed` component can be used to render a list of blog posts on a blog page, while the `Post` component can be used to render individual blog posts with their respective images and tags. The `ContributeForm` component can be used on a separate page to allow users to contribute to the project and access relevant resources. By reusing these components across the application, developers can ensure a consistent look and feel while reducing code duplication.","metadata":{"source":".autodoc/docs/markdown/components/shared/summary.md"}}],["146",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/cn.json)\n\nThis code is a JSON object containing key-value pairs for various text elements used in the Ergoweb project. The keys represent the location of the text elements in the project, while the values are arrays containing objects with `type` and `value` properties. The `type` property indicates the type of the text element, and the `value` property contains the actual text content in Chinese.\n\nThe purpose of this code is to provide a centralized location for managing the text content of the Ergoweb project. This can be particularly useful for localization, as it allows developers to easily update or translate the text content without having to modify the code directly.\n\nFor example, the key `\"components.ContributeForm.company.subTitle\"` contains an array with one object:\n\n```\n{\n  \"type\": 0,\n  \"value\": \"想要成为合作伙伴？\"\n}\n```\n\nThis object represents a text element with the content \"想要成为合作伙伴？\" (which translates to \"Want to become a partner?\"). By updating the `value` property, developers can easily change the text displayed in the corresponding part of the Ergoweb project.\n\nSimilarly, the key `\"components.Sigmanauts.button.buttonContribute\"` contains an array with one object:\n\n```\n{\n  \"type\": 0,\n  \"value\": \"贡献指南\"\n}\n```\n\nThis object represents a text element with the content \"贡献指南\" (which translates to \"Contribution Guide\"). By updating the `value` property, developers can easily change the text displayed on the corresponding button in the Ergoweb project.\n\nOverall, this code serves as a centralized resource for managing and updating the text content of the Ergoweb project, making it easier to maintain and localize the project.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing translations for various text elements used in the Ergoweb project. The keys represent the location of the text elements within the project, and the values are arrays containing objects with the translated text and additional formatting information.\n\n2. **What language are the translations in?**\n\n   The translations in this code are in Chinese.\n\n3. **How are the translations structured within the JSON object?**\n\n   The translations are structured as key-value pairs within the JSON object. The keys represent the location of the text elements within the project, and the values are arrays containing objects with the translated text (in the \"value\" field) and additional formatting information (in the \"type\" and \"children\" fields, if applicable).","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/cn.md"}}],["147",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/de.json)\n\nThis code is a JSON object containing key-value pairs that represent translations for various components and text elements in the Ergoweb project. The keys are organized in a hierarchical manner, representing the structure of the components and their sub-components. The values are arrays of objects, each containing a `type` and a `value` property. The `type` property indicates the type of content, such as plain text (type 0) or a line break (type 1). The `value` property contains the actual translated text or markup.\n\nFor example, the key `components.ContributeForm.company.subTitle` has a value of an array containing an object with `type` 0 and `value` \"JETZT PARTNER WERDEN:\". This indicates that the subtitle of the \"ContributeForm\" component for a company should display the text \"JETZT PARTNER WERDEN:\".\n\nSome keys also have a `children` property, which is an array of objects representing nested content. For instance, the key `components.ContributeForm.company.title` has a value of an array containing two objects. The first object has `type` 0 and `value` \"Ich bin ein \", while the second object has `type` 8, `value` \"b\", and a `children` array containing an object with `type` 0 and `value` \"Unternehmen\". This structure represents the text \"Ich bin ein Unternehmen\" with the word \"Unternehmen\" wrapped in a \"b\" tag (bold).\n\nThese translations can be used throughout the Ergoweb project to display localized content for different components, such as form titles, button labels, and descriptive text.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing key-value pairs for various text elements used in the Ergoweb project. It seems to be a localization file, likely used for translating the user interface into different languages. In this case, the language appears to be German.\n\n2. **What are the different components in this code?**\n\n   The code consists of multiple components, each with a unique key and an array of objects as its value. Each object has a \"type\" and a \"value\" property. Some objects also have a \"children\" property, which is an array of objects with similar properties. The components seem to be related to different parts of the Ergoweb project, such as \"ContributeForm\", \"DApps\", \"Sigmanauts\", and \"Spotlight\".\n\n3. **How are the values in this code used?**\n\n   The values in this code are likely used to display text in the Ergoweb project's user interface. The keys represent unique identifiers for each text element, while the values provide the actual text content. The \"type\" property in each object may be used to determine how the text should be formatted or displayed, and the \"children\" property allows for nested text elements.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/de.md"}}],["148",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/en.json)\n\nThis code is a JSON object containing key-value pairs that represent various text elements and their corresponding values for the Ergoweb project. The purpose of this code is to store and manage the text content for different components and sections of the Ergoweb application, making it easier to update and maintain the content.\n\nFor example, the key `\"components.ContributeForm.company.subTitle\"` has a value of `\"WANT TO BECOME A PARTNER?\"`. This value would be displayed as the subtitle for the \"ContributeForm\" component when a user selects the \"company\" option.\n\nAnother example is the key `\"components.Sigmanauts.button.buttonContribute\"`, which has a value of `\"CONTRIBUTING GUIDELINES\"`. This value would be displayed on a button within the \"Sigmanauts\" component, directing users to the contributing guidelines.\n\nThe structure of the JSON object allows for easy organization and retrieval of content for different components and sections. For instance, all the text content related to the \"ContributeForm\" component is grouped under keys starting with `\"components.ContributeForm\"`.\n\nIn the larger project, this JSON object would be used to populate the text content for various components and sections dynamically. This approach makes it easier to update the content without modifying the application's source code, enabling better maintainability and localization support.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing key-value pairs for various text elements used in the Ergoweb project. It seems to be a localization or translation file, where the keys represent different components and text elements within the project, and the values are the corresponding text content.\n\n2. **What are the different types of values in this code?**\n\n   There are two main types of values in this code: strings and objects. Strings are used for the actual text content, while objects are used to provide additional information about the text, such as the type (e.g., \"type\": 0 or \"type\": 1) and the value itself (e.g., \"value\": \"E-Mail\").\n\n3. **How are the keys structured in this code?**\n\n   The keys in this code are structured using a dot notation, where each part of the key represents a different level of hierarchy or categorization. For example, \"components.ContributeForm.company.subTitle\" represents the subtitle text for the company section within the ContributeForm component. This structure helps organize the text content and makes it easier to locate and update specific text elements within the project.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/en.md"}}],["149",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/es.json)\n\nThe code provided is an empty object literal. It does not contain any code or functionality. Therefore, it is difficult to determine the high-level purpose of this code or how it may be used in the larger project. \n\nHowever, it is possible that this empty object literal is intended to be used as a placeholder or a starting point for future code development. Developers may use this empty object literal as a template to create new objects or classes within the ergoweb project. \n\nFor example, a developer may create a new class called \"User\" and use this empty object literal as a starting point for the class definition. The developer may add properties and methods to the class definition to create a fully functional User class. \n\n```\nclass User {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name} and my email is ${this.email}.`);\n  }\n}\n\nconst user1 = new User(\"John\", \"john@example.com\");\nuser1.sayHello(); // Output: Hello, my name is John and my email is john@example.com.\n```\n\nIn summary, while the empty object literal provided does not contain any code or functionality, it may be used as a starting point for future code development within the ergoweb project.\n## Questions: \n 1. **What is the purpose of this code file?**\\\nA smart developer might wonder what the intended use of this empty code file is within the ergoweb project. Without any context or comments, it is unclear what functionality this file is meant to provide.\n\n2. **Are there any dependencies or requirements for this code to work?**\\\nAnother question a smart developer might ask is whether this code file relies on any external libraries or modules. Without any import statements or documentation, it is impossible to determine if this code can be run on its own or if it requires additional setup.\n\n3. **Who is responsible for maintaining this code file?**\\\nLastly, a smart developer might want to know who is responsible for maintaining this code file within the ergoweb project. Without any authorship information or version control history, it is difficult to determine who to contact for support or updates.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/es.md"}}],["150",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/hu.json)\n\nThis code is a JSON object containing key-value pairs for various text elements used in the Ergoweb project. The purpose of this code is to store and manage the text content for different components and pages in a centralized location, making it easier to update and maintain the content.\n\nThe keys in the JSON object are organized hierarchically, starting with the component or page name, followed by the specific text element within that component or page. For example, `\"components.ContributeForm.company.subTitle\"` refers to the subtitle text for the company section within the ContributeForm component.\n\nThe values associated with each key are arrays containing objects with properties such as `type`, `value`, and `children`. The `type` property indicates the type of content (e.g., plain text, bold text, or line breaks), while the `value` property contains the actual text content. The `children` property is used for nested content, such as bold text within a larger text block.\n\nHere's an example of how this code might be used in the larger project:\n\n```javascript\n// Import the JSON object\nimport content from './path/to/ergoweb.json';\n\n// Access the text for a specific element\nconst contributeFormCompanySubTitle = content['components.ContributeForm.company.subTitle'][0].value;\n\n// Render the text in a React component\nfunction ContributeForm() {\n  return (\n    <div>\n      <h2>{contributeFormCompanySubTitle}</h2>\n      {/* Other elements */}\n    </div>\n  );\n}\n```\n\nBy storing the text content in this JSON object, developers can easily update the text without having to modify the actual components or pages, making the project more maintainable and scalable. Additionally, this structure can be helpful for implementing translations and localization, as different language versions of the text can be stored in separate JSON files and loaded as needed.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code is a JSON object containing key-value pairs for various text elements used in the ErgoWeb project. It appears to be a translation file, possibly for the Hungarian language, as it contains translations for different components, titles, and buttons used in the project.\n\n2. **What are the \"type\" and \"value\" properties used for in this code?**\n\n   The \"type\" property is used to define the type of the text element, such as plain text (type 0), line breaks (type 1), or bold text (type 8). The \"value\" property contains the actual text content or the formatting element (e.g., \"b\" for bold text or \"br\" for line breaks).\n\n3. **How can a developer use this code in their project?**\n\n   A developer can use this code as a translation file for the ErgoWeb project. They can import this JSON object and use the key-value pairs to display the translated text for various components, titles, and buttons in the project, depending on the user's language preference.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/hu.md"}}],["151",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/it.json)\n\nThis code is a JSON object containing key-value pairs for various text elements used in the Ergoweb project. The purpose of this code is to store and manage the text content for different components and pages of the project in a structured and easily maintainable format. This approach allows developers to quickly update or modify the text content without having to search through the entire codebase.\n\nFor example, the key `\"components.ContributeForm.company.subTitle\"` has a value of `\"VUOI DIVENTARE PARTNER?\"`. This text could be displayed as a subtitle for a form where companies can express their interest in becoming a partner.\n\nAnother example is the key `\"components.Sigmanauts.button.discord\"`, which has a value of `\"UNISCITI A NOI SU DISCORD\"`. This text could be used as a label for a button that invites users to join the Ergoweb community on Discord.\n\nIn addition to simple text values, some keys have more complex structures, such as `\"components.ContributeForm.company.title\"`. This key contains an array of objects with `type` and `value` properties, which can be used to build a formatted text string with different styles or child elements.\n\nOverall, this code serves as a centralized resource for managing text content in the Ergoweb project, making it easier for developers to maintain and update the content as needed.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing translations for various text elements used in the Ergoweb project. The keys represent different components and text elements, while the values are arrays containing objects with information about the text type and value in Italian.\n\n2. **What are the different types of text elements in this code?**\n\n   There are two types of text elements in this code: type 0 and type 1. Type 0 represents a regular text value, while type 1 seems to represent a special formatting element, such as a line break (\"br\").\n\n3. **How can a developer use this code in their project?**\n\n   A developer can use this code to provide translations for different components and text elements in their project. They can access the values by using the keys in the JSON object and then use the text values or formatting elements as needed in their application.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/it.md"}}],["152",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/ita.json)\n\nThis code is a JSON object containing key-value pairs for various text elements used in the Ergoweb project. The purpose of this code is to provide a centralized location for managing text content, making it easier to update or translate the text used throughout the project.\n\nThe keys in this JSON object are organized hierarchically, with the first part of the key representing the component or section of the project, followed by a more specific identifier for the text element. For example, the key `components.ContributeForm.company.subTitle` refers to the subtitle text for the \"ContributeForm\" component's \"company\" section.\n\nThe values associated with each key are arrays of objects, where each object has a \"type\" and a \"value\" property. The \"type\" property indicates the type of content (e.g., plain text, bold text, or line breaks), and the \"value\" property contains the actual text content.\n\nHere's an example of how this code might be used in the project:\n\n```javascript\nconst textContent = require('./path/to/this/json/file');\n\nfunction renderContributeFormCompanySubTitle() {\n  const subTitleElements = textContent['components.ContributeForm.company.subTitle'];\n  let subTitleHtml = '';\n\n  subTitleElements.forEach(element => {\n    if (element.type === 0) {\n      subTitleHtml += element.value;\n    }\n  });\n\n  return subTitleHtml;\n}\n```\n\nIn this example, the `renderContributeFormCompanySubTitle` function retrieves the text content for the \"ContributeForm\" component's \"company\" section subtitle and generates the corresponding HTML. This approach allows developers to easily update or translate the text content without modifying the code directly.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing translations for various text elements used in the Ergoweb project. The keys represent different components and their respective text elements, while the values are arrays containing objects with information about the text type and value in Italian.\n\n2. **What are the different types of text elements in this code?**\n\n   There are two types of text elements in this code: type 0 and type 1. Type 0 represents regular text, while type 1 seems to represent a line break, as indicated by the \"value\" field containing \"br\" or \"breakingLine\".\n\n3. **How are the translations organized in this code?**\n\n   The translations are organized by components and their respective text elements. Each key in the JSON object represents a specific component and text element, such as \"components.ContributeForm.company.subTitle\". The value for each key is an array containing objects with information about the text type and value in Italian.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/ita.md"}}],["153",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/pl.json)\n\nThis code is a JSON object containing key-value pairs that represent various text elements and their translations for the Ergoweb project. The keys are organized in a hierarchical structure, with the main categories being components, footer, navigation, and pages. Each category contains subcategories and specific text elements, such as titles, subtitles, and button labels.\n\nFor example, under the `components` category, there are keys for `ContributeForm`, `DApps`, `Sigmanauts`, and more. Each of these keys contains an array of objects with `type` and `value` properties. The `type` property indicates the formatting of the text, while the `value` property contains the actual translated text.\n\n```json\n\"components.ContributeForm.company.subTitle\": [\n  {\n    \"type\": 0,\n    \"value\": \"Chcesz zostać partnerem?\"\n  }\n]\n```\n\nIn this example, the `components.ContributeForm.company.subTitle` key represents the subtitle for the company section in the ContributeForm component. The `value` property contains the translated text in Polish: \"Chcesz zostać partnerem?\".\n\nSimilarly, the `footer` category contains keys for various sections of the website's footer, such as `blog`, `community`, `discover`, and `ecosystem`. The `navigation` category contains keys for the main navigation menu items, and the `pages` category contains keys for specific page titles and content.\n\nThis JSON object is likely used in the Ergoweb project to display translated text based on the user's language preferences. By organizing the translations in this structured format, it becomes easier to manage and update the text content across the entire project.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing translations and text content for various components and pages of a project called Ergoweb. It seems to be used for managing and organizing the text content in different parts of the application.\n\n2. **What is the structure of the JSON object?**\n\n   The JSON object is structured as key-value pairs, where the keys represent the component or page names and the values are arrays of objects containing properties like `type` and `value`. The `type` property indicates the type of content (e.g., plain text, bold text, or line breaks), and the `value` property contains the actual text content.\n\n3. **What language is the text content in?**\n\n   The text content in this JSON object is in Polish.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/pl.md"}}],["154",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/compiled-locales/pt.json)\n\nThis code is a JSON object containing key-value pairs that represent translations for various text elements in the Ergoweb project. The keys are organized in a hierarchical structure, indicating the component and the specific text element within that component. The values are arrays containing objects with properties such as `type` and `value`, which define the formatting and content of the text.\n\nFor example, the key `\"components.ContributeForm.company.subTitle\"` has a value of an array containing an object with `type: 0` and `value: \"QUER TORNAR-SE PARCEIRO(A)?\"`. This indicates that the subtitle for the `ContributeForm` component's company section should be displayed as \"QUER TORNAR-SE PARCEIRO(A)?\".\n\nSome keys have values with more complex structures, such as `\"components.ContributeForm.company.title\"`. In this case, the value is an array containing multiple objects, some of which have a `children` property. This allows for nested formatting, such as bold or italic text within a larger text element.\n\nThis JSON object is likely used for internationalization (i18n) purposes, allowing the Ergoweb project to display text in different languages based on user preferences or browser settings. By maintaining a separate file with translations, developers can easily update or add new languages without modifying the main application code.\n\nFor example, to display the title of the `Sigmanauts` component, the code would reference the value associated with the key `\"components.Sigmanauts.title\"`:\n\n```javascript\nconst title = translations[\"components.Sigmanauts.title\"][0].value;\n```\n\nThis would set `title` to the string \"Sigmanautas\", which can then be rendered in the user interface.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing translations for various text elements used in the Ergoweb project. The keys represent the location of the text elements in the project, and the values are arrays containing objects with the translated text and formatting information.\n\n2. **What language is the translation in?**\n\n   The translations in this code are in Brazilian Portuguese.\n\n3. **How are the translations structured in the code?**\n\n   The translations are structured as key-value pairs, where the key represents the location of the text element in the project, and the value is an array containing objects with the translated text and formatting information. Each object in the array has a \"type\" property, which indicates the type of formatting, and a \"value\" property, which contains the translated text. Some objects also have a \"children\" property, which is an array of nested objects with their own \"type\" and \"value\" properties.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/pt.md"}}],["155",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/content/compiled-locales)\n\nThe `.autodoc/docs/json/content/compiled-locales` folder contains JSON files for managing text content and translations in the Ergoweb project. Each file represents a specific language (e.g., `cn.json` for Chinese, `de.json` for German, etc.) and contains key-value pairs for various text elements used throughout the project. The keys are organized hierarchically, representing the structure of components and their sub-components, while the values are arrays containing objects with `type` and `value` properties, defining the formatting and content of the text.\n\nFor example, in `cn.json`, the key `\"components.ContributeForm.company.subTitle\"` contains an object with the Chinese text \"想要成为合作伙伴？\" (translates to \"Want to become a partner?\"). By updating the `value` property, developers can easily change the text displayed in the corresponding part of the Ergoweb project.\n\nThese JSON files are likely used for internationalization (i18n) purposes, allowing the Ergoweb project to display text in different languages based on user preferences or browser settings. By maintaining separate files with translations, developers can easily update or add new languages without modifying the main application code.\n\nHere's an example of how these JSON files might be used in the project:\n\n```javascript\n// Import the JSON object for the desired language\nimport content from './path/to/compiled-locales/en.json';\n\n// Access the text for a specific element\nconst contributeFormCompanySubTitle = content['components.ContributeForm.company.subTitle'][0].value;\n\n// Render the text in a React component\nfunction ContributeForm() {\n  return (\n    <div>\n      <h2>{contributeFormCompanySubTitle}</h2>\n      {/* Other elements */}\n    </div>\n  );\n}\n```\n\nIn this example, the `en.json` file is imported, and the text content for the \"ContributeForm\" component's \"company\" section subtitle is retrieved and rendered in a React component. This approach allows developers to easily update or translate the text content without modifying the code directly, enabling better maintainability and localization support.","metadata":{"source":".autodoc/docs/markdown/content/compiled-locales/summary.md"}}],["156",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/PL.json)\n\nThe code provided is a JSON object containing key-value pairs that map to various text strings used throughout the Ergoweb project. These strings are used to populate the text content of various UI components, such as buttons, forms, and titles. \n\nThe purpose of this code is to provide a centralized location for managing the text content of the Ergoweb project. By storing all of the text strings in a single file, it becomes easier to manage and update the text content of the project. This is particularly useful for projects with a large number of UI components, where it can be difficult to keep track of all the different text strings being used.\n\nFor example, the \"components.ContributeForm.company.title\" key maps to the string \"Dla <b>firm</b>\", which is used as the title of a form component for companies looking to contribute to the Ergoweb project. Similarly, the \"components.Sigmanauts.text\" key maps to the string \"Zgłoś się do programu szkoleniowego Sigmanautów, aby pomóc kształtować i rozwijać Ergo. {br}{br}  Stwórzmy razem system finansowy-Grassroots.\", which is used as the text content of a section describing the Sigmanauts program.\n\nOverall, this code is an important part of the Ergoweb project, as it helps to ensure consistency and manageability of the text content used throughout the project.\n## Questions: \n 1. What is the purpose of the `ContributeForm` component?\n   - The `ContributeForm` component is used to allow companies and developers to contribute to the Ergo project.\n\n2. What is Autolykos and how is it used in Ergo?\n   - Autolykos is a Proof of Work algorithm used in Ergo that is resistant to ASICs and programmed in Scala. It allows for efficient mining on most GPU hardware.\n\n3. What is the purpose of the `favorites` component?\n   - The `favorites` component is used to discover Ergo Raffle, a feature that allows users to win Ergo tokens through a lottery system.","metadata":{"source":".autodoc/docs/markdown/content/locales/PL.md"}}],["157",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/cn.json)\n\nThis code is a JSON file containing key-value pairs of text strings in Chinese, which are used for the localization of the Ergoweb project. Localization is the process of adapting a product or content to a specific locale or market. In this case, the JSON file provides the Chinese translations for various components, titles, buttons, and descriptions used throughout the Ergoweb platform.\n\nFor example, the key `\"components.ContributeForm.company.title\"` has the value `\"我是一家<b>公司</b>\"`, which translates to \"I am a <b>company</b>\" in English. Similarly, the key `\"components.Sigmanauts.button\"` has the value `\"阅读更多并申请\"`, which translates to \"Read more and apply\" in English.\n\nThese key-value pairs are used by the Ergoweb platform to display the appropriate text in Chinese when the user selects the Chinese language. This helps make the platform more accessible and user-friendly for Chinese-speaking users.\n\nTo use these translations in the project, developers would typically access the values using the keys provided in the JSON file. For example, in a JavaScript or TypeScript file, the developer might use the following code to display the title for the ContributeForm component:\n\n```javascript\nconst title = translations[\"components.ContributeForm.company.title\"];\n```\n\nThis would set the `title` variable to the Chinese translation, which can then be used to render the text on the web page.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON file containing translations for a project called Ergoweb. It seems to be used for internationalization (i18n) purposes, providing translations for various components and text elements within the application.\n\n2. **What language are the translations in this file for?**\n\n   The translations in this file are in Simplified Chinese.\n\n3. **How can a developer add translations for a new language?**\n\n   To add translations for a new language, a developer would need to create a new JSON file with the same structure as this one, but with translations in the desired language. They would then need to integrate the new translation file into the project's internationalization system.","metadata":{"source":".autodoc/docs/markdown/content/locales/cn.md"}}],["158",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/de.json)\n\nThis code is a JSON object containing key-value pairs for various text elements used in the Ergoweb project. The purpose of this code is to provide a centralized location for managing text content, making it easier to update and maintain the text throughout the project. This approach is particularly useful for managing translations and localization, as it allows developers to easily switch between different languages by simply changing the JSON file.\n\nThe keys in this JSON object are organized hierarchically, with the first part representing the component or section of the project, followed by the specific text element within that component. For example, the key `components.ContributeForm.company.subTitle` refers to the subtitle text within the \"ContributeForm\" component for the \"company\" section.\n\nThe values in this JSON object are the actual text content to be displayed in the project. Some values include HTML tags (e.g., `<b>` for bold text) to provide additional formatting. For example, the value for the key `components.ContributeForm.company.title` is `\"Ich bin ein <b>Unternehmen</b>\"`, which would display as \"Ich bin ein **Unternehmen**\" in the project.\n\nTo use this JSON object in the Ergoweb project, developers can import the JSON file and access the desired text content using the appropriate key. For example, in a JavaScript file, one might use:\n\n```javascript\nimport textContent from './path/to/this/json/file';\n\nconst companyTitle = textContent['components.ContributeForm.company.title'];\n```\n\nThis approach allows for easy updates to the text content and simplifies the process of adding translations or changing the language of the project.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing key-value pairs for various text strings used in the ergoweb project, likely for localization purposes.\n\n2. **What language is the text in this code?**\n\n   The text in this code is in German.\n\n3. **How can a developer use these key-value pairs in their project?**\n\n   A developer can use these key-value pairs by referencing the keys in their project to display the corresponding text values, allowing for easy localization and text updates without modifying the code directly.","metadata":{"source":".autodoc/docs/markdown/content/locales/de.md"}}],["159",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/en.json)\n\nThe code provided is a JSON object containing key-value pairs that map to various text strings used throughout the ErgoWeb project. These strings are used to populate various UI components such as buttons, titles, subtitles, and form fields. \n\nThe purpose of this code is to provide a centralized location for managing all of the text content used in the ErgoWeb project. By using a JSON object, the text strings can be easily updated and translated without having to modify the code of individual components. This makes it easier to maintain and update the project over time.\n\nFor example, the \"components.ContributeForm.company.title\" key maps to the string \"I am a <b>company</b>\". This string is used as the title for a form field that allows companies to contribute to the Ergo project. By modifying the value of this key, the title of the form field can be changed without having to modify the code of the component that renders the form.\n\nSimilarly, the \"components.Sigmanauts.button.discord\" key maps to the string \"JOIN US ON DISCORD\". This string is used as the label for a button that links to the Ergo project's Discord server. By modifying the value of this key, the label of the button can be changed without having to modify the code of the component that renders the button.\n\nOverall, this code plays an important role in the ErgoWeb project by providing a centralized location for managing all of the text content used throughout the project. This makes it easier to maintain and update the project over time, and allows for easy translation of the project into different languages.\n## Questions: \n 1. What is the purpose of the \"ContributeForm\" component?\n   - The \"ContributeForm\" component is used to allow companies and developers to contribute to the Ergo project, with specific titles and subtitles for each type of contributor.\n\n2. What is the \"Autolykos\" algorithm and how is it used in Ergo mining?\n   - The \"Autolykos\" algorithm is a memory-hard ASIC-resistant Proof of Work algorithm oriented towards GPUs, used in Ergo mining. Miners can adjust parameters with on-chain voting, with larger changes implemented by a supermajority via a soft-fork.\n\n3. What is the role of the Ergo Foundation in the development of the Ergo platform?\n   - The Ergo Foundation is a community-driven entity focused on promoting non-breaking development of the Ergo Platform protocol, publicizing the widespread adoption and use of Ergo Platform and its native token (ERG), developing the ecosystem around the Ergo Platform, spreading the use of Ergo Platform and blockchain technology for social good, upholding truly decentralized infrastructure, and supporting privacy as a basic human right.","metadata":{"source":".autodoc/docs/markdown/content/locales/en.md"}}],["160",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/es.json)\n\nThe code provided is an empty object literal, which does not perform any specific functionality on its own. However, it is likely that this object will be used as a container for various properties and methods that are relevant to the ergoweb project. \n\nIn a larger context, the ergoweb project may be a web application or website that focuses on ergonomics and workplace safety. This empty object may be used as a starting point for defining the structure and organization of the project's codebase. \n\nFor example, the object may be used to store configuration settings, such as API keys or database connection information. It may also be used to define utility functions or classes that are used throughout the project. \n\nHere is an example of how this object may be used to define a utility function:\n\n```\nconst ergoweb = {\n  // Define a utility function for calculating the distance between two points\n  calculateDistance: function(x1, y1, x2, y2) {\n    const xDiff = x2 - x1;\n    const yDiff = y2 - y1;\n    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  }\n};\n\n// Call the calculateDistance function\nconst distance = ergoweb.calculateDistance(0, 0, 3, 4);\nconsole.log(distance); // Output: 5\n```\n\nIn this example, the `ergoweb` object is used to define a `calculateDistance` function that takes four arguments representing the x and y coordinates of two points. The function uses the Pythagorean theorem to calculate the distance between the points and returns the result. \n\nOverall, while the empty object provided in the code snippet does not perform any specific functionality, it serves as a starting point for organizing and structuring the codebase of the ergoweb project.\n## Questions: \n 1. What is the purpose of this code file?\n   - It is impossible to determine the purpose of this code file as it contains no code or comments.\n\n2. Is this file a part of a larger project or is it a standalone file?\n   - It is impossible to determine whether this file is a part of a larger project or a standalone file as there is no context provided.\n\n3. What programming language is this code written in?\n   - It is impossible to determine the programming language of this code as there is no code or comments provided.","metadata":{"source":".autodoc/docs/markdown/content/locales/es.md"}}],["161",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/hu.json)\n\nThe code provided is a JSON object containing key-value pairs that map to various text strings used throughout the Ergoweb project. These strings are used to populate text content on various pages and components of the website. \n\nThe purpose of this code is to provide a centralized location for managing and updating the text content used throughout the Ergoweb project. By storing all of the text strings in a single JSON file, it becomes easier to make updates and changes to the text content without having to search through multiple files and components. \n\nFor example, the \"components.ContributeForm.company.title\" key maps to the string \"<b>Cégeknek</b>\", which is used as the title for a form component on the \"Contribute\" page of the website. Similarly, the \"components.homeHero.text\" key maps to the string \"Ergo egy következő-generációs okos szerződés (smart contract) platform, amely biztosítja a gazdasági szabadásgot az átlagembernek biztonságos elérhető és központosítatlan pénzügyi eszközökkel.\", which is used as the main text content for the hero section on the homepage of the website. \n\nOverall, this code serves as a simple yet important component of the Ergoweb project, providing a centralized location for managing and updating text content used throughout the website.\n## Questions: \n 1. What is the purpose of the \"ContributeForm\" component and how does it work?\n- The \"ContributeForm\" component seems to be a form for companies and developers to contribute to Ergo, with separate sections for each. It is not clear from this code how the form is implemented or what information it collects.\n\n2. What is the Autolykos algorithm and how does it relate to Ergo's mining process?\n- The Autolykos algorithm is described as a memory-hard Proof of Work algorithm that is ASIC-resistant and GPU-oriented. It is used for mining Ergo, but it is not clear from this code how it is integrated into the mining process or what advantages it offers over other algorithms.\n\n3. What is the purpose of the \"Sigmanauts\" component and how does it relate to Ergo's development?\n- The \"Sigmanauts\" component appears to be related to a training program for developers to contribute to Ergo. It is not clear from this code what the program entails or how it fits into Ergo's overall development strategy.","metadata":{"source":".autodoc/docs/markdown/content/locales/hu.md"}}],["162",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/it.json)\n\nThis code is a JSON file containing key-value pairs of translations for the Ergoweb project. The translations are in Italian, and they are used to display the text on the Ergoweb website in the Italian language. The purpose of this code is to provide localization support for the Ergoweb project, making it accessible and user-friendly for Italian-speaking users.\n\nThe keys in this JSON file represent the different components and sections of the Ergoweb website, such as titles, subtitles, buttons, and text content. The values associated with these keys are the Italian translations of the corresponding text. For example, the key `\"components.ContributeForm.title\"` has the value `\"Contribuisci\"`, which is the Italian translation for \"Contribute\".\n\nTo use these translations in the larger project, the Ergoweb application would typically load this JSON file and use a library or a custom function to replace the text content of the website with the appropriate translations based on the user's language preference. For instance, if a user has set their language preference to Italian, the application would use the values from this JSON file to display the website content in Italian.\n\nHere's an example of how the translations might be used in the project:\n\n```javascript\n// Load the Italian translations JSON file\nconst italianTranslations = require('./path/to/italianTranslations.json');\n\n// Function to get the translated text for a given key\nfunction getTranslation(key, language) {\n  if (language === 'Italian') {\n    return italianTranslations[key];\n  }\n  // Add more conditions for other languages\n}\n\n// Usage example\nconst contributeFormTitle = getTranslation('components.ContributeForm.title', 'Italian');\nconsole.log(contributeFormTitle); // Output: \"Contribuisci\"\n```\n\nIn summary, this code provides Italian translations for the Ergoweb project, enabling localization support and making the website more accessible to Italian-speaking users.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing key-value pairs for various text strings used in an Ergoweb project, likely for localization purposes.\n\n2. **What language is this code written in?**\n\n   The text strings in this code are written in Italian.\n\n3. **How can a developer add translations for other languages?**\n\n   To add translations for other languages, a developer would need to create a similar JSON object with the same keys but with translated values for the desired language.","metadata":{"source":".autodoc/docs/markdown/content/locales/it.md"}}],["163",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/pt.json)\n\nThe code provided is a JSON object containing key-value pairs that map to various text strings used throughout the Ergoweb project. These strings are used to populate the text content of various components and pages within the project. \n\nFor example, the \"components.ContributeForm.company.title\" key maps to the string \"Sou uma <b>empresa</b>\", which is used as the title of a form component for companies looking to contribute to the project. Similarly, the \"components.homeHero.text\" key maps to the string \"Ergo é uma plataforma de contratos inteligentes da nova geração que garante liberdade econômica de pessoas comuns através de ferramentas financeiras descentralizadas, acessíveis e seguras.\", which is used as the main text content of the homepage hero component.\n\nBy centralizing these text strings in a single JSON object, the Ergoweb project can easily manage and update the text content of its various components and pages without having to modify the code of each individual component or page. This makes it easier to maintain and update the project over time.\n\nOverall, this code serves as a simple but important tool for managing the text content of the Ergoweb project, allowing for easy updates and maintenance of the project's various components and pages.\n## Questions: \n 1. What is the purpose of the \"ContributeForm\" component?\n   - The \"ContributeForm\" component is used to allow companies and developers to contribute to the Ergo project.\n\n2. What is Autolykos and how is it used in Ergo?\n   - Autolykos is a Proof-of-Work algorithm that is resistant to ASICs and is used for mining in Ergo. It is written in Scala and can be run on average GPUs, which increases the longevity of mining equipment.\n\n3. What is the purpose of the \"Spotlight\" component?\n   - The \"Spotlight\" component is used to highlight certain posts or content on the Ergo platform.","metadata":{"source":".autodoc/docs/markdown/content/locales/pt.md"}}],["164",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/content/locales/ru.json)\n\nThis code is a JSON object containing key-value pairs for localization of the Ergoweb project. Localization is the process of adapting a product or content to a specific locale or market. In this case, the code provides translations for various components, buttons, and titles in the Russian language.\n\nThe keys in the JSON object represent the component or element in the project that needs to be translated, while the values are the translated text in Russian. For example, the key `\"components.ContributeForm.company.subTitle\"` corresponds to the subtitle of the \"ContributeForm\" component for a company, and its value is the translated text `\"ХОТИТЕ СТАТЬ ПАРТНЕРОМ?\"`.\n\nThis localization file can be used in the larger project to display the appropriate translations based on the user's language preference. When the application needs to display a specific text, it will look up the corresponding key in this JSON object and use the translated value.\n\nHere's an example of how this file might be used in the project:\n\n```javascript\nimport translations from './path/to/this/file';\n\nfunction getTranslation(key) {\n  return translations[key];\n}\n\nconst contributeFormCompanySubTitle = getTranslation(\"components.ContributeForm.company.subTitle\");\n```\n\nIn this example, the `getTranslation` function takes a key as an argument and returns the corresponding translated value from the JSON object. The `contributeFormCompanySubTitle` variable will then contain the translated text `\"ХОТИТЕ СТАТЬ ПАРТНЕРОМ?\"`.\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code appears to be a JSON object containing key-value pairs for localization strings in the Russian language for a project called ergoweb. These strings are used to display text in the user interface of the application.\n\n2. **Are there any other languages supported in this project?**\n\n   Based on the provided code, we can only see the Russian language strings. To determine if there are other languages supported, we would need to check if there are additional files with similar key-value pairs for other languages.\n\n3. **How can these localization strings be used in the application?**\n\n   To use these localization strings in the application, developers would typically import this JSON object and reference the keys to display the corresponding values (translated text) in the user interface. The exact implementation would depend on the programming language and framework used in the project.","metadata":{"source":".autodoc/docs/markdown/content/locales/ru.md"}}],["165",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/content/locales)\n\nThe `.autodoc/docs/json/content/locales` folder contains localization files for the Ergoweb project. Localization is the process of adapting a product or content to a specific locale or market. In this case, the JSON files provide translations for various components, titles, buttons, and descriptions used throughout the Ergoweb platform in different languages.\n\nThese key-value pairs are used by the Ergoweb platform to display the appropriate text based on the user's language preference. This helps make the platform more accessible and user-friendly for users speaking different languages.\n\nTo use these translations in the project, developers would typically access the values using the keys provided in the JSON file. For example, in a JavaScript or TypeScript file, the developer might use the following code to display the title for the ContributeForm component:\n\n```javascript\nconst title = translations[\"components.ContributeForm.company.title\"];\n```\n\nThis would set the `title` variable to the appropriate translation, which can then be used to render the text on the web page.\n\nThe folder contains JSON files for different languages, such as:\n\n- `PL.json`: Polish translations\n- `cn.json`: Chinese translations\n- `de.json`: German translations\n- `en.json`: English translations\n- `es.json`: Spanish translations\n- `hu.json`: Hungarian translations\n- `it.json`: Italian translations\n- `pt.json`: Portuguese translations\n- `ru.json`: Russian translations\n\nBy centralizing these text strings in separate JSON files for each language, the Ergoweb project can easily manage and update the text content of its various components and pages without having to modify the code of each individual component or page. This makes it easier to maintain and update the project over time, and allows for easy translation of the project into different languages.","metadata":{"source":".autodoc/docs/markdown/content/locales/summary.md"}}],["166",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/content)\n\nThe `.autodoc/docs/json/content` folder contains JSON files and subfolders that manage text content and translations for the Ergoweb project. This folder plays a crucial role in the internationalization (i18n) and localization of the project, allowing it to display text in different languages based on user preferences or browser settings.\n\nThe `compiled-locales` subfolder contains JSON files for various languages, each with key-value pairs representing text elements used throughout the project. The keys are organized hierarchically, representing the structure of components and their sub-components. The values are arrays containing objects with `type` and `value` properties, defining the formatting and content of the text.\n\nFor example, to display the Chinese text for the \"ContributeForm\" component's \"company\" section subtitle, you would use the following code:\n\n```javascript\nimport content from './path/to/compiled-locales/cn.json';\nconst contributeFormCompanySubTitle = content['components.ContributeForm.company.subTitle'][0].value;\n```\n\nThe `locales` subfolder contains localization files with translations for various components, titles, buttons, and descriptions in different languages. These key-value pairs are used to display the appropriate text based on the user's language preference, making the platform more accessible and user-friendly.\n\nTo use these translations, developers would access the values using the keys provided in the JSON file. For example, to display the title for the ContributeForm component in English, you would use the following code:\n\n```javascript\nconst title = translations[\"components.ContributeForm.company.title\"];\n```\n\nBy maintaining separate files with translations, developers can easily update or add new languages without modifying the main application code. This approach allows for better maintainability and localization support, making it easier to manage and update the project over time.","metadata":{"source":".autodoc/docs/markdown/content/summary.md"}}],["167",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/docker-compose.yaml)\n\nThis code is a configuration file for a Docker container that runs a web application. The web application is built using the Next.js framework and is served on port 3000. The Docker container is configured to expose port 8080 on the host machine, which allows users to access the web application through a web browser.\n\nThe `services` section of the configuration file defines a single service called `web`. This service is built using the Dockerfile located in the current directory (`.`). The Dockerfile specifies the dependencies and configuration needed to run the web application.\n\nThe `environment` section of the configuration file sets an environment variable called `NEXT_PUBLIC_STRAPI_API` to the URL of a Strapi API. Strapi is an open-source headless CMS that provides a backend for the web application. The web application uses this API to fetch data and content from the CMS.\n\nThe `ports` section of the configuration file maps port 8080 on the host machine to port 3000 in the Docker container. This allows users to access the web application by navigating to `http://localhost:8080` in a web browser.\n\nOverall, this configuration file is an essential part of the Ergoweb project as it enables the web application to run in a Docker container and connect to a Strapi API. Developers can use this configuration file to build and deploy the web application on different environments, such as local development machines or cloud servers. Here is an example of how to run the Docker container using this configuration file:\n\n```\ndocker-compose up\n```\n## Questions: \n 1. What version of Python is being used for this project?\n   - The version of Python being used is 3.6.\n\n2. What is the purpose of the `web` service?\n   - The `web` service is being built from the current directory and is setting an environment variable for the Strapi API. It is also mapping port 8080 to port 3000.\n\n3. What is the URL for the Strapi API being used?\n   - The URL for the Strapi API being used is https://ergo-platform-cms-nvbpfiue6q-ez.a.run.app.","metadata":{"source":".autodoc/docs/markdown/docker-compose.md"}}],["168",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/entrypoint.sh)\n\nThis code is a shell script that is used to start a Next.js application. The purpose of this script is to check that the environment variables are set up correctly and to replace a specific string in the application files with the value of the environment variable. \n\nThe script starts by checking if the environment variable `NEXT_PUBLIC_STRAPI_API` is set. If it is not set, the script will exit with an error message. If the variable is set, the script will continue to the next step.\n\nThe `find` command is then used to search for all files in the `.next` directory of the application, excluding any files in a `.git` directory. The `sed` command is then used to replace the string `APP_NEXT_PUBLIC_STRAPI_API` with the value of the `NEXT_PUBLIC_STRAPI_API` environment variable. This is done to ensure that the application is using the correct API endpoint.\n\nFinally, the script starts the Next.js application by executing the command passed as arguments to the script. This allows the script to be used with different commands depending on the environment or deployment method.\n\nHere is an example of how this script might be used in a larger project:\n\n```bash\n#!/bin/sh\n\n# Set the environment variable for the Strapi API endpoint\nexport NEXT_PUBLIC_STRAPI_API=\"https://api.example.com\"\n\n# Start the Next.js application using the script\n./start.sh npm run start\n```\n\nIn this example, the `NEXT_PUBLIC_STRAPI_API` environment variable is set to the URL of the Strapi API endpoint. The `start.sh` script is then used to start the Next.js application by running the `npm run start` command. The script will replace the `APP_NEXT_PUBLIC_STRAPI_API` string in the application files with the value of the `NEXT_PUBLIC_STRAPI_API` environment variable before starting the application.\n## Questions: \n 1. What is the purpose of the `test` command and why is it being used in this script?\n   - The `test` command is being used to check if the environment variable `$NEXT_PUBLIC_STRAPI_API` is set. If it is not set, the script will exit with an error.\n\n2. What is the purpose of the `sed` command and what is it replacing?\n   - The `sed` command is being used to replace the string `APP_NEXT_PUBLIC_STRAPI_API` with the value of the `$NEXT_PUBLIC_STRAPI_API` environment variable in all files under the `/app/.next` directory.\n\n3. What is the purpose of the `exec` command and what does the `$@` parameter represent?\n   - The `exec` command is being used to replace the current shell process with the command specified by the `$@` parameter. In this case, it is starting the Next.js application.","metadata":{"source":".autodoc/docs/markdown/entrypoint.md"}}],["169",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/middleware.ts)\n\nThe code is a middleware function that handles the localization of URLs in the ergoweb project. The purpose of this code is to ensure that URLs are properly localized based on the user's preferred language. The middleware function takes in a NextRequest object and returns a NextResponse object.\n\nThe code first defines two constants: PUBLIC_FILE and DEFAULT_LOCALE. PUBLIC_FILE is a regular expression that matches any file extension, while DEFAULT_LOCALE is set to 'en' as the default language.\n\nThe middleware function then creates a NextResponse object and sets it to NextResponse.next(). This is the default response that will be returned if the URL does not need to be localized.\n\nThe function then checks if the URL should be localized by checking if it meets certain conditions. It checks if the URL does not match the PUBLIC_FILE regular expression, does not include '/api/', 'rss', or '/image/' in the pathname, and has a locale of 'default'. If all of these conditions are met, the URL is not properly localized and needs to be redirected to the default language.\n\nIf the URL needs to be localized, the function creates a clone of the NextUrl object and sets the locale to the DEFAULT_LOCALE. It then creates a new NextResponse object and sets it to a redirect to the newly localized URL.\n\nThis middleware function can be used in the larger ergoweb project to ensure that URLs are properly localized for users based on their preferred language. It can be added to the project's middleware stack to be executed before any other middleware functions that may rely on the URL being properly localized. \n\nExample usage:\n\n```\nimport { middleware } from 'path/to/middleware';\n\n// Add middleware to stack\napp.use(middleware);\n```\n## Questions: \n 1. What is the purpose of this middleware function?\n   - This middleware function checks if the requested URL should be handled with a default locale and redirects to the default locale if necessary.\n2. What is the significance of the `PUBLIC_FILE` constant?\n   - The `PUBLIC_FILE` constant is a regular expression used to test if the requested URL is for a public file (e.g. image, font, etc.) that should not be handled by this middleware function.\n3. What are the conditions for `shouldHandleLocale` to be true?\n   - `shouldHandleLocale` is true if the requested URL is not for a public file, not for an API endpoint, not for an RSS feed, not for an image, and the locale is set to 'default'.","metadata":{"source":".autodoc/docs/markdown/middleware.md"}}],["170",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/next-env.d.ts)\n\nThis file is a configuration file for the Next.js framework, which is used in the ergoweb project. The file includes two reference types, \"next\" and \"next/image-types/global\", which are used to provide type definitions for the Next.js framework and its image handling capabilities. \n\nThe purpose of this file is to ensure that the correct type definitions are available for the Next.js framework and its image handling capabilities. This is important for ensuring that the code in the ergoweb project is type-safe and can be properly compiled and executed. \n\nThe file also includes a note that it should not be edited, and provides a link to the Next.js documentation for more information. This is a common practice in configuration files, as it helps to prevent accidental changes that could cause issues with the project. \n\nOverall, this file is a small but important part of the ergoweb project, as it helps to ensure that the code is properly configured and type-safe. While it may not contain any actual code, it plays a critical role in the larger project by providing the necessary type definitions for the Next.js framework. \n\nExample usage:\n\n```typescript\nimport Image from 'next/image';\n\nfunction MyImage() {\n  return (\n    <Image\n      src=\"/my-image.png\"\n      alt=\"My Image\"\n      width={500}\n      height={500}\n    />\n  );\n}\n```\n\nIn the example above, the `Image` component from the Next.js framework is imported and used to display an image on the page. The `src`, `alt`, `width`, and `height` props are passed to the component to specify the image source, alt text, and dimensions. The type definitions provided by the configuration file ensure that these props are properly typed and can be used without errors.\n## Questions: \n 1. What is the purpose of the \"reference\" comments at the top of the file?\n   - The \"reference\" comments are used to reference external type definitions for the Next.js framework and its image types.\n\n2. Why is there a \"NOTE\" comment stating that the file should not be edited?\n   - The \"NOTE\" comment is a warning to developers that this file is not meant to be edited and that they should refer to the Next.js documentation for more information.\n\n3. What is the significance of the link provided in the \"see\" comment?\n   - The link provided in the \"see\" comment directs developers to the Next.js documentation for TypeScript, which provides more information on how to use TypeScript with Next.js.","metadata":{"source":".autodoc/docs/markdown/next-env.d.md"}}],["171",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/next-sitemap.config.js)\n\nThis code exports an object that contains various configuration options for generating a sitemap and robots.txt file for the Ergoweb project. \n\nThe `siteUrl` variable is set to the value of the `SITE_URL` environment variable, or a default value of `https://ergoplatform.org` if the environment variable is not set. This variable is used throughout the object to construct URLs for the sitemap and robots.txt files.\n\nThe `changefreq` option specifies how frequently search engines should check for updates to the sitemap. In this case, it is set to 'daily', indicating that the sitemap should be checked for updates once per day.\n\nThe `priority` option specifies the priority of pages in the sitemap, with a value between 0 and 1. In this case, it is set to 0.7, indicating that the pages in the sitemap are relatively important.\n\nThe `sitemapSize` option specifies the maximum number of URLs that should be included in the sitemap. In this case, it is set to 5000.\n\nThe `generateRobotsTxt` option is set to true, indicating that a robots.txt file should be generated along with the sitemap.\n\nThe `alternateRefs` option specifies alternate language versions of the site, with URLs and hreflang attributes for each language. The `filter` method is used to remove the 'default' language from the list of languages, and the `map` method is used to construct an array of objects with `href` and `hreflang` properties for each language.\n\nThe `robotsTxtOptions` option specifies the policies for the robots.txt file. In this case, there is a single policy that allows all user agents to access all pages on the site.\n\nOverall, this code provides a simple way to configure and generate a sitemap and robots.txt file for the Ergoweb project, with options for specifying the site URL, sitemap size, language versions, and robots.txt policies. Here is an example of how this code might be used in the larger project:\n\n```\nconst sitemapConfig = require('./sitemapConfig');\n\n// Generate sitemap and robots.txt files\ngenerateSitemap(sitemapConfig);\ngenerateRobotsTxt(sitemapConfig);\n```\n## Questions: \n 1. What is the purpose of this code?\n   This code exports an object with various properties related to the site URL, sitemap, robots.txt, and alternate references for different languages.\n\n2. What is the default value for the `SITE_URL` environment variable?\n   The default value is `'https://ergoplatform.org'`, which is used if the `SITE_URL` environment variable is not set.\n\n3. What is the purpose of the `alternateRefs` property?\n   The `alternateRefs` property provides alternate references for different language versions of the site, with their respective href and hreflang values.","metadata":{"source":".autodoc/docs/markdown/next-sitemap.config.md"}}],["172",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/next.config.js)\n\nThis code is a configuration file for the Next.js framework used in the ergoweb project. The file exports an object that contains various configuration options for the project. \n\nThe `async redirects()` function is used to define a list of URL redirects for the project. When a user navigates to a URL that matches one of the defined sources, they will be redirected to the corresponding destination URL. For example, if a user navigates to `/docs/some-document`, they will be redirected to `https://storage.googleapis.com/ergo-cms-media/docs/some-document`. \n\nThe `reactStrictMode` option enables React's strict mode, which helps identify potential issues in the code. The `trailingSlash` option adds a trailing slash to the end of URLs, which can help with SEO and consistency. \n\nThe `i18n` option is used to configure internationalization settings for the project. It defines a list of locales and sets the default locale to `default`. The `localeDetection` option is set to `false`, which means the project will not automatically detect the user's locale. \n\nThe `sassOptions` option is used to specify the location of the Sass files used in the project. The `pageExtensions` option is used to specify the file extensions that should be treated as pages in the project. \n\nThe `images` option is used to specify the domains from which images can be loaded in the project. \n\nFinally, the `withMDX` function is used to enable support for MDX files in the project. MDX is a format that allows for the use of JSX components in Markdown files. The `options` object passed to the `withMDX` function can be used to configure the behavior of the MDX compiler. \n\nOverall, this configuration file is used to define various settings and options for the ergoweb project, including URL redirects, internationalization settings, and support for MDX files.\n## Questions: \n 1. What is the purpose of the `redirects()` function in this code?\n   - The `redirects()` function is used to define a list of URL redirects for the website, which will redirect users from one URL to another.\n2. What is the purpose of the `i18n` object in this code?\n   - The `i18n` object is used to define the internationalization settings for the website, including the available locales and the default locale.\n3. What is the purpose of the `withMDX` function in this code?\n   - The `withMDX` function is used to enable support for rendering MDX files (a combination of Markdown and JSX) as pages in the Next.js application.","metadata":{"source":".autodoc/docs/markdown/next.config.md"}}],["173",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/404.tsx)\n\nThe code above defines a custom 404 page for the ergoweb project using the Next.js framework and the react-intl library for internationalization. The purpose of this code is to provide a user-friendly and visually appealing error page for when a user navigates to a non-existent page on the ergoweb website. \n\nThe code imports the `NextPage` type from the `next` module and the `FormattedMessage` and `useIntl` functions from the `react-intl` module. It also imports a `Layout` component from a local file in the `components` directory. \n\nThe `Custom404` function is defined as a React functional component that returns JSX. It uses the `useIntl` hook to access the `intl` object, which is used to format the page title using the `formatMessage` method. The `Layout` component is used to provide a consistent layout for the error page, with the `title` prop set to the formatted title and the `footer` prop set to `false` to remove the footer from the page. \n\nThe JSX returned by the `Custom404` function includes several `div` elements with class names that are used to style the page with CSS. The main content of the page is contained within a `div` with class name `max-w-[1300px] mx-auto p-4 relative z-10 flex flex-col lg:flex-row mb-20`, which contains two child `div` elements. The first child `div` has a class name of `lg:w-2/3` and is empty, while the second child `div` has a class name of `lg:w-1/3` and contains the error message and a brief description of the error. \n\nThe error message is defined using the `FormattedMessage` component, which takes an `id` prop and a `defaultMessage` prop. The `id` prop is used to reference a message string in the translation files, while the `defaultMessage` prop is used as a fallback if no translation is available. The error message is displayed in a large font size and is styled with a bold font and a gray color. \n\nOverall, this code provides a custom 404 error page for the ergoweb project that is visually appealing and user-friendly. It uses the Next.js framework and the react-intl library to provide internationalization support and a consistent layout for the error page.\n## Questions: \n 1. What is the purpose of the `Layout` component being imported and used in this file?\n   \n   The `Layout` component is being used to provide a common layout structure for the page, including a title and footer. \n\n2. What is the `useIntl` hook being used for in this file?\n   \n   The `useIntl` hook is being used to access the internationalization functionality provided by the `react-intl` library, specifically to format the `title` variable using the `FormattedMessage` component.\n\n3. What is the significance of the various `div` elements with class names like `not-found-frame-1` and `not-found-blur-2`?\n   \n   These `div` elements are being used to create a decorative background for the page, with various frames and blurs.","metadata":{"source":".autodoc/docs/markdown/pages/404.md"}}],["174",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/_app.tsx)\n\nThe code is a Next.js application that sets up an internationalization (i18n) system for the Ergoweb project. It imports various language files in JSON format and uses the `react-intl` library to provide translations for different locales. \n\nThe `MyApp` function is the main component that wraps around all other components in the application. It takes two props, `Component` and `pageProps`, which are provided by Next.js. \n\nThe `useRouter` hook from Next.js is used to get the current locale from the URL. The `handleRouteChange` function is called whenever the route changes, and it sends a page view event to Google Analytics using the `gtag` function. \n\nThe `messages` variable is a memoized object that contains the translations for the current locale. It uses a `switch` statement to return the appropriate language file based on the `shortLocale` variable. If the current locale is not supported, it defaults to English. \n\nThe `Script` component from Next.js is used to load the Google Tag Manager script and set up the analytics tracking. The `ThemeProvider` component from `next-themes` is used to provide a theme context to the application. \n\nFinally, the `IntlProvider` component from `react-intl` is used to wrap the entire application and provide the translations to all child components. The `NextNProgress` component is used to display a progress bar at the top of the page when a new route is loading. \n\nOverall, this code sets up a robust i18n system for the Ergoweb project, allowing users to view the website in multiple languages. It also provides analytics tracking using Google Analytics and a theme context using `next-themes`.\n## Questions: \n 1. What is the purpose of the `Script` components being used in this code?\n- The `Script` components are being used to load and execute external scripts, specifically the Google Tag Manager and Google Analytics scripts.\n\n2. How are different languages being supported in this app?\n- Different languages are being supported by importing JSON files containing translated messages for each language, and then selecting the appropriate messages based on the user's locale.\n\n3. What is the purpose of the `useEffect` hook in this code?\n- The `useEffect` hook is being used to add and remove an event listener for the `routeChangeComplete` event of the `router` object, which is used to track page views with Google Analytics.","metadata":{"source":".autodoc/docs/markdown/pages/_app.md"}}],["175",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/_document.tsx)\n\nThe code above is a React component that extends the `Document` class from the `next/document` module. This component is responsible for rendering the HTML document that is served to the client. \n\nThe `render()` method returns a JSX expression that represents the HTML document. The `Html` component is the root element of the document, and it contains the `Head` and `body` elements. The `Head` component contains metadata about the document, such as the `link` tags that reference the `manifest.json` and `icon.png` files, and the `meta` tags that specify the theme color and Google site verification code. \n\nThe `body` element contains the `Main` and `NextScript` components. The `Main` component is where the content of the page is rendered, and the `NextScript` component is where the scripts required by Next.js are rendered. \n\nThis component is used by Next.js to generate the HTML document for each page of the application. When a user requests a page, Next.js generates the HTML document on the server and sends it to the client. The client then hydrates the document with the JavaScript required to make the page interactive. \n\nHere is an example of how this component might be used in a Next.js application:\n\n```jsx\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head>\n          <link rel=\"manifest\" href=\"/manifest.json\" />\n          <link rel=\"apple-touch-icon\" href=\"/icon.png\"></link>\n          <meta name=\"theme-color\" content=\"#fff\" />\n          <meta\n            name=\"google-site-verification\"\n            content=\"YMID-8r7TS9es_3-GyjwszL7s8CJQcTQlDW8Mx59qkw\"\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\nThis component would be placed in the `pages/_document.js` file, which is used by Next.js to generate the HTML document for each page. Any changes made to this component would be reflected in the HTML document for all pages of the application.\n## Questions: \n 1. What is the purpose of this code?\n- This code is defining a custom `Document` component for a Next.js application, which sets up the basic HTML structure and includes some meta tags and links to external resources.\n\n2. What is the significance of the `manifest.json` and `icon.png` files?\n- The `manifest.json` file is used to provide metadata about the web application, such as its name, icons, and theme color. The `icon.png` file is one of the icons used for the application, specifically for Apple touch devices.\n\n3. What is the purpose of the `google-site-verification` meta tag?\n- This meta tag is used to verify ownership of the website with Google Search Console, which allows the website owner to access various tools and reports related to search engine optimization.","metadata":{"source":".autodoc/docs/markdown/pages/_document.md"}}],["176",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/api/hello.ts)\n\nThis code is an API route handler for the Next.js framework. It defines a function that handles incoming HTTP requests and sends back a JSON response. \n\nThe function takes two parameters: `req` and `res`. `req` is an object that represents the incoming request, and `res` is an object that represents the response that will be sent back to the client. \n\nThe `type` keyword is used to define a type alias called `Data`, which is an object with a single property `name` of type `string`. This type is used as the generic type parameter for the `NextApiResponse` interface, which is passed as the type of the `res` parameter. This ensures that the response object has a `name` property of type `string`. \n\nThe function sends back a response with a status code of 200 (indicating success) and a JSON payload containing an object with a `name` property set to `'John Doe'`. This payload is generated using the `json` method of the `res` object, which serializes the object to JSON and sets the appropriate headers. \n\nThis code can be used as a starting point for building API routes in a Next.js application. Developers can modify the function to handle different types of requests and generate different types of responses. For example, they could query a database to retrieve data and send it back as a JSON payload. \n\nHere is an example of how this code could be used in a larger project:\n\n```javascript\n// pages/api/hello.js\nimport type { NextApiRequest, NextApiResponse } from 'next';\n\ntype Data = {\n  message: string;\n};\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse<Data>) {\n  const name = req.query.name || 'World';\n  res.status(200).json({ message: `Hello, ${name}!` });\n}\n```\n\nThis code defines an API route that takes a query parameter `name` and sends back a JSON payload with a `message` property containing a personalized greeting. The `handler` function uses the `query` property of the `req` object to retrieve the value of the `name` parameter, and generates a response with a message that includes the name. \n\nDevelopers can create additional API routes by creating new files in the `pages/api` directory and exporting a function that handles the request and response objects. These routes can be used to implement server-side functionality for a Next.js application, such as authentication, data fetching, and more.\n## Questions: \n 1. What is the purpose of this code?\n   This code is an API route handler for the Next.js framework, which returns a JSON response with the name \"John Doe\".\n\n2. What is the expected input for this code?\n   This code expects a request object of type NextApiRequest and a response object of type NextApiResponse<Data>, where Data is an object with a string property called \"name\".\n\n3. Are there any potential errors or edge cases that should be considered when using this code?\n   It is possible that errors could occur if the request or response objects are not properly formatted or if there are issues with the server or network connection. Additionally, if the \"name\" property in the response object is changed or removed, this code may not function as intended.","metadata":{"source":".autodoc/docs/markdown/pages/api/hello.md"}}],["177",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/pages/api)\n\nThe `hello.ts` file in the `.autodoc/docs/json/pages/api` folder is an API route handler for a Next.js application. It exports a function named `handler` that processes incoming HTTP requests and sends back a JSON response. The function takes two parameters: `req` (the request object) and `res` (the response object).\n\n```typescript\ntype Data = {\n  name: string;\n};\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse<Data>) {\n  res.status(200).json({ name: 'John Doe' });\n}\n```\n\nThe `Data` type alias is defined to represent the structure of the JSON response, which is an object with a single property `name` of type `string`. This type is used as the generic type parameter for the `NextApiResponse` interface, ensuring that the response object has a `name` property of the correct type.\n\nThe `handler` function sends a successful response with a status code of 200 and a JSON payload containing an object with a `name` property set to `'John Doe'`. The payload is generated using the `json` method of the `res` object, which serializes the object to JSON and sets the appropriate headers.\n\nThis code serves as a starting point for building API routes in a Next.js application. Developers can modify the function to handle different types of requests and generate different types of responses. For example, they could query a database to retrieve data and send it back as a JSON payload.\n\nHere's an example of how this code could be used in a larger project:\n\n```javascript\n// pages/api/hello.js\nimport type { NextApiRequest, NextApiResponse } from 'next';\n\ntype Data = {\n  message: string;\n};\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse<Data>) {\n  const name = req.query.name || 'World';\n  res.status(200).json({ message: `Hello, ${name}!` });\n}\n```\n\nThis code defines an API route that takes a query parameter `name` and sends back a JSON payload with a `message` property containing a personalized greeting. The `handler` function uses the `query` property of the `req` object to retrieve the value of the `name` parameter and generates a response with a message that includes the name.\n\nDevelopers can create additional API routes by creating new files in the `pages/api` directory and exporting a function that handles the request and response objects. These routes can be used to implement server-side functionality for a Next.js application, such as authentication, data fetching, and more.","metadata":{"source":".autodoc/docs/markdown/pages/api/summary.md"}}],["178",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/blog/[id].tsx)\n\nThe `Post` component is a React component that renders a blog post page. It imports several components and libraries, including `Layout`, `ReactMarkdown`, `Image`, `Button`, `Link`, and `BlogPosts`. The component takes in two props, `post` and `posts`, which are objects containing data about the current post and a list of all blog posts, respectively.\n\nThe component first checks if the current post has an image associated with it and sets the `hasImage` and `imageUrl` variables accordingly. It then renders the blog post page, which includes the post title, author, date, tags, subtitle, content, and social media sharing buttons. The `ReactMarkdown` component is used to render the post content in markdown format. The `Button` component is used to render a button that links back to the blog homepage. The `Link` component is used to wrap the social media sharing buttons and link them to their respective sharing URLs.\n\nThe `getServerSideProps` function is an asynchronous function that fetches the data for the current post and all blog posts from a Strapi API. It takes in a `context` object that contains information about the current request, including the query parameters. The function first fetches the current post data by filtering the posts by permalink and locale. It then fetches all blog posts by filtering the posts by type and sorting them by date in descending order. If the current post data is not found, the function returns a `notFound` object. Otherwise, it returns an object containing the `post` and `posts` data.\n\nThis component is used in the larger project to render individual blog post pages. It is likely used in conjunction with other components and pages to create a complete blog website.\n## Questions: \n 1. What external libraries or packages are being used in this code?\n- The code is importing several external libraries and components such as `react-intl`, `react-markdown`, `remark-gfm`, `remark-breaks`, `rehype-raw`, `next/image`, `next/link`, and custom components like `Layout`, `Button`, `BlogFacebook`, `BlogLink`, `BlogTwitter`, `LogoBlack`, and `BlogPosts`.\n\n2. What is the purpose of the `getServerSideProps` function?\n- The `getServerSideProps` function is used to fetch data from an external API (presumably Strapi CMS) and pass it as props to the `Post` component. It is also used to handle cases where the requested post is not found.\n\n3. What is the purpose of the `hasImage` and `imageUrl` variables?\n- The `hasImage` variable is used to determine whether the post has an image or not, while the `imageUrl` variable is used to store the URL of the image to be displayed. The code checks if the post has a `blogPhoto` attribute or an `image` attribute with a `url` attribute, and sets `hasImage` to `true` and `imageUrl` accordingly.","metadata":{"source":".autodoc/docs/markdown/pages/blog/[id].md"}}],["179",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/pages/blog)\n\nThe `[id].tsx` file in the `.autodoc/docs/json/pages/blog` folder is responsible for rendering individual blog post pages within the ergoweb project. This file contains a React component called `Post` and a server-side function called `getServerSideProps`.\n\nThe `Post` component takes in two props: `post` and `posts`. The `post` prop contains data about the current blog post, while the `posts` prop contains a list of all blog posts. The component imports several other components and libraries, such as `Layout`, `ReactMarkdown`, `Image`, `Button`, `Link`, and `BlogPosts`.\n\nThe component first checks if the current post has an associated image and sets the `hasImage` and `imageUrl` variables accordingly. It then renders the blog post page, which includes the post title, author, date, tags, subtitle, content, and social media sharing buttons. The `ReactMarkdown` component is used to render the post content in markdown format, while the `Button` component is used to render a button that links back to the blog homepage. The `Link` component wraps the social media sharing buttons and links them to their respective sharing URLs.\n\nHere's an example of how the `Post` component might be used:\n\n```jsx\n<Post post={currentPost} posts={allPosts} />\n```\n\nThe `getServerSideProps` function is an asynchronous function that fetches data for the current post and all blog posts from a Strapi API. It takes in a `context` object containing information about the current request, including query parameters. The function first fetches the current post data by filtering the posts by permalink and locale. It then fetches all blog posts by filtering the posts by type and sorting them by date in descending order. If the current post data is not found, the function returns a `notFound` object. Otherwise, it returns an object containing the `post` and `posts` data.\n\nThis component is likely used in conjunction with other components and pages to create a complete blog website. For example, a `BlogList` component might render a list of blog post previews, and when a user clicks on a preview, they are taken to the individual blog post page rendered by the `Post` component.","metadata":{"source":".autodoc/docs/markdown/pages/blog/summary.md"}}],["180",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/blog.tsx)\n\nThe `Blog` component is a React functional component that renders a blog page. It imports several modules including `Link` from `next/link`, `useRouter` from `next/router`, `useIntl` from `react-intl`, `BlogPosts` and `Media` from `../components/blog`, and `Layout` from `../components/Layout`. The component takes in an object `props` that contains four optional properties: `posts`, `news`, `media`, and `categories`. \n\nThe `Blog` component returns a JSX element that contains several nested elements. The `Layout` component wraps the main content of the page and takes in a `title` prop that is set to the value of the `title` variable. The `title` variable is set using the `useIntl` hook to format the message with the id `pages.blog.title` and the default message `Blog`. \n\nThe main content of the page is wrapped in a `div` element with an `id` of `Blog`. The content is divided into two sections: a list of categories and a list of blog posts. The list of categories is rendered using the `props.categories` array. If the array is not empty, the `map` function is called on it to create a list of `Link` components that link to the corresponding category page. Each `Link` component is wrapped in a `div` element that contains a `b` element with the name of the category. \n\nThe list of blog posts is rendered using the `BlogPosts` component, which takes in the `props.posts` array and the `locale` variable from the `useRouter` hook. The `BlogPosts` component is defined in the `../components/blog/BlogPosts` module. \n\nThe `getServerSideProps` function is an asynchronous function that fetches data from the Strapi API. It takes in a `context` object that contains information about the request. The function fetches four sets of data: `posts`, `news`, `media`, and `categories`. Each set of data is fetched using the `fetch` function and the `process.env.NEXT_PUBLIC_STRAPI_API` environment variable. The fetched data is then parsed using the `json` method and the `data` property is extracted. If an error occurs during the fetch, the value of the corresponding variable is set to `null`. The function returns an object with a `props` property that contains the fetched data. \n\nOverall, the `Blog` component is a reusable component that can be used to render a blog page. It fetches data from an external API and renders the data using the `BlogPosts` component and a list of categories. The component can be customized by passing in different sets of data as props.\n## Questions: \n 1. What is the purpose of this code?\n   - This code is for rendering a blog page with posts, news, media, and categories fetched from an API.\n\n2. What libraries and frameworks are being used in this code?\n   - This code is using Next.js, React Intl, and Strapi API.\n\n3. What is the purpose of the `getServerSideProps` function?\n   - The `getServerSideProps` function is used to fetch data from the Strapi API and pass it as props to the `Blog` component for server-side rendering.","metadata":{"source":".autodoc/docs/markdown/pages/blog.md"}}],["181",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/category/[id].tsx)\n\nThe `Category` component is a React functional component that renders a blog category page. It imports several components and hooks from external libraries and files, including `useRouter` and `useIntl` from Next.js, `BlogPosts` from a local file, `Button` from a local file, and `Layout` from a local file. \n\nThe component takes in an object `props` that contains three optional properties: `posts`, `news`, and `categories`. The component uses the `useIntl` hook to format the `title` of the page, which is passed to the `Layout` component. The `useRouter` hook is used to get the current `locale` and `query` parameters from the URL. \n\nThe component then renders a series of `div` elements with class names that are used for styling. The `Layout` component is rendered with the `title` prop. Inside the `Layout` component, there is a `div` element with an `id` of \"Blog\" and several child elements. \n\nThe first child element is a `div` with a class name of \"flex flex-row justify-between my-10 mx-4 md:mx-32\". Inside this `div`, there is another `div` with a class name of \"-ml-4\" that contains a `Button` component. This button allows the user to navigate back to the main blog page. \n\nThe second child element is a `p` element that displays the current category being viewed. This category is obtained from the `query` parameter using string interpolation. \n\nThe third child element is a `BlogPosts` component that takes in several props, including `data`, `locale`, and `filter`. The `data` prop is set to the `posts` property of the `props` object passed to the component. The `locale` prop is set to the current `locale`. The `filter` prop is a string that is used to filter the blog posts based on the current category. \n\nThe component also exports a `getServerSideProps` function that fetches the blog posts from an external API using the `fetch` function. The function takes in a `context` object that contains the current `query` and `locale` parameters. The function returns an object with a `props` property that contains the `posts` data fetched from the API. \n\nOverall, this component is used to render a blog category page that displays a list of blog posts filtered by the current category. The component uses several external components and hooks to achieve this functionality.\n## Questions: \n 1. What is the purpose of this code?\n   - This code is for a Next.js page component that displays blog posts filtered by a specific tag.\n2. What external libraries or components are being used in this code?\n   - This code imports and uses the `next/router`, `react-intl`, `BlogPosts`, `Button`, and `Layout` components.\n3. What data is being fetched in the `getServerSideProps` function?\n   - The `getServerSideProps` function fetches blog posts from a Strapi API that match a specific tag and are sorted by date in descending order.","metadata":{"source":".autodoc/docs/markdown/pages/category/[id].md"}}],["182",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/pages/category)\n\nThe `[id].tsx` file in the `category` folder is responsible for rendering a blog category page that displays a list of blog posts filtered by the current category. This component is a part of the larger Ergoweb project and works with other components and hooks to achieve its functionality.\n\nThe `Category` component is a React functional component that imports several components and hooks, such as `useRouter` and `useIntl` from Next.js, `BlogPosts` from a local file, `Button` from a local file, and `Layout` from a local file. It takes in an object `props` with three optional properties: `posts`, `news`, and `categories`.\n\nThe `useIntl` hook is used to format the `title` of the page, which is passed to the `Layout` component. The `useRouter` hook is used to get the current `locale` and `query` parameters from the URL.\n\nThe component renders a series of `div` elements with class names for styling. The `Layout` component is rendered with the `title` prop. Inside the `Layout` component, there is a `div` element with an `id` of \"Blog\" and several child elements.\n\nThe first child element is a `div` with a class name of \"flex flex-row justify-between my-10 mx-4 md:mx-32\". Inside this `div`, there is another `div` with a class name of \"-ml-4\" that contains a `Button` component. This button allows the user to navigate back to the main blog page.\n\n```jsx\n<Button href=\"/blog\" locale={locale}>\n  {intl.formatMessage({ id: \"blog.back\" })}\n</Button>\n```\n\nThe second child element is a `p` element that displays the current category being viewed. This category is obtained from the `query` parameter using string interpolation.\n\n```jsx\n<p>{`Category: ${query.id}`}</p>\n```\n\nThe third child element is a `BlogPosts` component that takes in several props, including `data`, `locale`, and `filter`. The `data` prop is set to the `posts` property of the `props` object passed to the component. The `locale` prop is set to the current `locale`. The `filter` prop is a string that is used to filter the blog posts based on the current category.\n\n```jsx\n<BlogPosts data={posts} locale={locale} filter={query.id} />\n```\n\nThe component also exports a `getServerSideProps` function that fetches the blog posts from an external API using the `fetch` function. The function takes in a `context` object that contains the current `query` and `locale` parameters. The function returns an object with a `props` property that contains the `posts` data fetched from the API.\n\nIn summary, the `[id].tsx` file in the `category` folder is responsible for rendering a blog category page, displaying a list of blog posts filtered by the current category, and fetching the blog posts from an external API. This component works with other components and hooks to achieve its functionality and is an essential part of the Ergoweb project.","metadata":{"source":".autodoc/docs/markdown/pages/category/summary.md"}}],["183",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/community.tsx)\n\nThe `Community` component is a React component that renders the community page of the Ergoweb project. It imports several other components from the `../components/community` and `../components/shared` directories, which are used to display various sections of the community page.\n\nThe `Community` component takes in an optional `props` object that can contain two properties: `posts` and `teamMembers`. These properties are used to populate the `Feed` and `HallOfFame` components, respectively. The `getServerSideProps` function is used to fetch the latest blog posts and team members from the Strapi API and pass them as props to the `Community` component.\n\nThe `useIntl` hook is used to format the `title` of the page based on the user's locale. The `Layout` component is used to render the page layout, which includes the `CommunityHero`, `CommunityCardsFeed`, `Sigmanauts`, `ContributeForm`, `Spotlight`, `Feed`, `HallOfFame`, `ErgoFoundation`, and `OurMission` components.\n\nThe `div` elements with class names starting with `community-frame` and `community-blur` are used to render a decorative frame around the page content.\n\nHere's an example of how the `Community` component can be used in the larger project:\n\n```jsx\nimport Community from './Community';\n\nfunction App() {\n  return (\n    <div>\n      <Community />\n    </div>\n  );\n}\n```\n\nThis will render the `Community` component, which will fetch the latest blog posts and team members from the Strapi API and display them on the community page of the Ergoweb project.\n## Questions: \n 1. What is the purpose of this code and what does it do?\n   - This code defines a React component called `Community` that renders various components related to a community page, including a hero section, community cards feed, spotlight section, and more. It also fetches data for blog posts and team members using a server-side function called `getServerSideProps`.\n\n2. What external libraries or dependencies does this code use?\n   - This code imports two components from the `react-intl` library, as well as several custom components located in the `../components` directory. It also uses the `Layout` component and two custom components called `ContributeForm` and `Feed`.\n\n3. What data is being fetched in the `getServerSideProps` function and how is it being used?\n   - The `getServerSideProps` function fetches data for blog posts and team members from a Strapi API using `fetch` requests. The data is then passed as props to the `Community` component and used to render the `Feed` and `HallOfFame` components, respectively.","metadata":{"source":".autodoc/docs/markdown/pages/community.md"}}],["184",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/discover.tsx)\n\nThe `Discover` component is a React component that renders a page for discovering information related to the Ergo blockchain project. The component imports several other components from the `../components/discover` directory, including `DiscoverHero`, `Documents`, `ErgoExplorer`, `FAQ`, and `GrantsAndBounties`. These components are used to display various types of information related to the project, such as documentation, frequently asked questions, and grants and bounties available to developers.\n\nThe `Discover` component takes in two optional props, `documents` and `faq`, which are used to populate the `Documents` and `FAQ` components, respectively. If these props are not provided, the corresponding components will not be rendered.\n\nThe component also uses the `Layout` component from `../components/Layout` to provide a consistent layout for the page. The `Layout` component takes in a `title` prop, which is generated using the `useIntl` hook from the `react-intl` library. This hook is used to format the title message based on the user's locale.\n\nThe `Discover` component also includes several `div` elements with class names that are used to style the page with background images and blur effects.\n\nFinally, the component exports a `getStaticProps` function that is used by Next.js to fetch data from the Strapi API. This function fetches documents and FAQs from the API based on the user's locale, and returns them as props to the `Discover` component. The `revalidate` option is also set to 60 seconds, which tells Next.js to regenerate the page every 60 seconds to ensure that the data is up-to-date.\n\nOverall, the `Discover` component is a key part of the Ergo blockchain project's website, providing users with a centralized location to discover information about the project and its various resources.\n## Questions: \n 1. What is the purpose of the `Discover` component?\n- The `Discover` component is responsible for rendering various sub-components related to discovering information about the project.\n\n2. What are the `Props` that can be passed to the `Discover` component?\n- The `Props` type includes `documents` and `faq`, both of which are optional.\n\n3. What is the purpose of the `getStaticProps` function?\n- The `getStaticProps` function is used to fetch data from an external API and pass it as props to the `Discover` component. It also includes a `revalidate` property to specify how often the data should be revalidated.","metadata":{"source":".autodoc/docs/markdown/pages/discover.md"}}],["185",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/ecosystem.tsx)\n\nThe `Ecosystem` component is responsible for rendering the main page of the ecosystem section of the Ergoweb project. It imports several components from the `../components/ecosystem` directory, including `ChangingTheWorld`, `DApps`, `EcosystemHero`, `Favorites`, `FeaturesAndProjects`, `Roadmap`, and `Wiki`. These components are conditionally rendered based on the presence of certain props passed to the `Ecosystem` component.\n\nThe `Ecosystem` component also imports the `Layout` component from `../components/Layout`, which is used to provide a consistent layout for the page. The `Layout` component is passed a `title` prop, which is generated using the `useIntl` hook from the `react-intl` library. This hook is used to format the title message based on the user's locale.\n\nThe `Ecosystem` component defines a `Props` type, which specifies the shape of the props that can be passed to the component. These props include `apps`, `roadmap`, `projects`, `favorites`, and `chagingTheWorldProjects`, all of which are optional.\n\nThe `Ecosystem` component renders several `div` elements that are used to create a decorative background for the page. These elements have class names that are used to apply CSS styles to them.\n\nThe `Ecosystem` component also conditionally renders several child components based on the presence of certain props. If the `apps` prop is present, the `DApps` component is rendered with the `apps` prop passed to it. If the `roadmap` prop is present, the `Roadmap` component is rendered with the `roadmapItems` prop passed to it. The `Wiki`, `Favorites`, `FeaturesAndProjects`, and `ChangingTheWorld` components are similarly conditionally rendered based on the presence of their respective props.\n\nThe `Ecosystem` component also defines a `getServerSideProps` function, which is used to fetch data from the Strapi API. This function fetches data for the `apps`, `roadmap`, `projects`, `favorites`, and `chagingTheWorldProjects` props, and returns an object containing these props. This object is passed to the `Ecosystem` component as props when it is rendered on the server.\n\nOverall, the `Ecosystem` component is a high-level component that is responsible for rendering the main page of the ecosystem section of the Ergoweb project. It imports and conditionally renders several child components based on the presence of certain props, and fetches data for these props using the `getServerSideProps` function.\n## Questions: \n 1. What is the purpose of the `Ecosystem` component?\n- The `Ecosystem` component is responsible for rendering various components related to the project's ecosystem, such as DApps, Roadmap, Wiki, Favorites, FeaturesAndProjects, and ChangingTheWorld.\n\n2. What are the expected props for the `Ecosystem` component?\n- The expected props for the `Ecosystem` component are `apps`, `roadmap`, `projects`, `favorites`, and `chagingTheWorldProjects`, all of which are optional and can be null.\n\n3. What is the purpose of the `getServerSideProps` function?\n- The `getServerSideProps` function is responsible for fetching data from the project's API endpoints related to DApps, Roadmap, FeaturesAndProjects, Favorites, and ChangingTheWorld, and returning them as props to be used by the `Ecosystem` component.","metadata":{"source":".autodoc/docs/markdown/pages/ecosystem.md"}}],["186",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/get-erg.tsx)\n\nThe `GetErg` component is responsible for rendering the \"Get ERG\" page of the ErgoWeb project. It imports several components from the `../components/getErg` directory, including `Mining`, `MiningCalculator`, `Layout`, `Wallets`, `GetErgHero`, and `Exchanges`. \n\nThe `GetErg` component takes in several props, including `exchanges`, `price`, `hashRate`, `currentBlockReward`, and `difficulty`. These props are used to render the `MiningCalculator` and `Exchanges` components. \n\nThe `getStaticProps` function is an asynchronous function that fetches data from several APIs and returns them as props to the `GetErg` component. It fetches a list of exchanges from the Strapi API, the current price of ERG from the CoinGecko API, the current network hashrate from the Ergo API, and information about the latest block from the Ergo API. \n\nThe `Layout` component is used to render the page layout, and the `GetErgHero` component is used to render the hero section of the page. The `Wallets` component is used to render a list of wallets that support ERG. The `Mining` component is used to render information about mining ERG. \n\nThe `MiningCalculator` component is conditionally rendered based on the presence of the `currentBlockReward`, `price`, `hashRate`, and `difficulty` props. If these props are present, the `MiningCalculator` component is rendered with these props passed as props to the component. Otherwise, the component is not rendered. \n\nThe `Exchanges` component is conditionally rendered based on the presence of the `exchanges` prop. If the `exchanges` prop is present, the `Exchanges` component is rendered with the `exchanges` prop passed as a prop to the component. Otherwise, the component is not rendered. \n\nOverall, the `GetErg` component is responsible for rendering the \"Get ERG\" page of the ErgoWeb project, which includes information about wallets that support ERG, mining ERG, and exchanges where ERG can be traded. The `getStaticProps` function is used to fetch data from several APIs and pass them as props to the `GetErg` component.\n## Questions: \n 1. What is the purpose of the `GetErg` component?\n- The `GetErg` component is responsible for rendering various components related to getting ERG cryptocurrency, such as wallets, mining, and exchanges.\n\n2. What is the purpose of the `getStaticProps` function?\n- The `getStaticProps` function is used to fetch data from external APIs and pass it as props to the `GetErg` component. This allows the component to display up-to-date information about exchanges, prices, and mining statistics.\n\n3. What is the purpose of the `dynamic` import for the `Exchanges` component?\n- The `dynamic` import is used to load the `Exchanges` component asynchronously, which can improve performance by only loading the component when it is needed. The `ssr: false` option ensures that the component is not server-side rendered.","metadata":{"source":".autodoc/docs/markdown/pages/get-erg.md"}}],["187",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/index.tsx)\n\nThis code defines the homepage of the Ergoweb project. It imports various components from the `../components/home` and `../components/shared` directories and renders them within a `Layout` component. The `Layout` component provides a consistent layout for all pages of the website. \n\nThe `Home` component takes in several props, including `posts`, `partners`, `news`, `info`, and `blockReward`. If `posts` is truthy, it renders a `News` component and a `Feed` component, which display recent blog posts. If `partners` is truthy, it renders a `Partners` component, which displays a list of project partners. If `blockReward` and `info` are truthy, it renders a `HomeInfo` component, which displays information about the Ergo blockchain, including the circulating supply, hash rate, and block reward. \n\nThe `getStaticProps` function is a Next.js function that fetches data from various APIs and returns it as props to the `Home` component. It fetches recent blog posts, project partners, and recent news articles from the Strapi API. It also fetches the current block reward and blockchain information from the Ergo API. Finally, it generates an RSS feed for the blog posts using the `generateRssFeed` function. \n\nOverall, this code defines the homepage of the Ergoweb project and fetches data from various APIs to display recent blog posts, project partners, and blockchain information.\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to access the internationalization API provided by the `react-intl` library. It is used in this code to format the title of the page.\n2. What is the purpose of the `getStaticProps` function and what data does it fetch?\n   - The `getStaticProps` function is a Next.js function that is used to fetch data at build time and pass it as props to the component. It fetches data from the Strapi API for posts and partners, as well as from the Ergo API for block reward and network information.\n3. What is the purpose of the `dynamic` function and how is it used in this code?\n   - The `dynamic` function is used to load a component dynamically at runtime instead of at build time. In this code, it is used to load the `Partners` component with `ssr` set to `false`, which means it will not be server-side rendered.","metadata":{"source":".autodoc/docs/markdown/pages/index.md"}}],["188",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/legal.tsx)\n\nThe code above is a React component that renders a legal page for the ergoweb project. The page is composed of a header, a blurred background, and a legal content section. The component imports the NextPage type from the Next.js library, the FormattedMessage and useIntl hooks from the react-intl library, the Layout component from a local file, and the LegalContent component from a local MDX file.\n\nThe Legal component uses the useIntl hook to access the internationalization functionality provided by the react-intl library. It formats the title of the page using the formatMessage method of the intl object. The title is retrieved from the messages file using the id pages.legal.title and the defaultMessage 'Legal'. This allows the title to be translated into different languages based on the user's locale.\n\nThe component then renders the page layout using the Layout component. The title of the page is passed as a prop to the Layout component. The legal content is rendered using the LegalContent component, which is an MDX file that contains the legal text. The LegalContent component is wrapped in a div with the class mdPage, which sets the width of the legal content section to two-thirds of the page width on medium-sized screens and above.\n\nThe component also includes two divs with the classes legal-frame-1 and legal-blur-1, which are used to create a decorative frame and a blurred background for the legal content section. These divs are empty and do not contain any content.\n\nOverall, this component provides a reusable legal page for the ergoweb project that can be easily translated into different languages using the react-intl library. The component can be used by importing it into other pages or components and rendering it as a standalone page or as part of a larger application.\n## Questions: \n 1. What is the purpose of the `Legal` component?\n   \n   The `Legal` component is a Next.js page component that renders legal content and a layout component.\n\n2. What is the `useIntl` hook used for in this code?\n   \n   The `useIntl` hook is used to access the internationalization API provided by the `react-intl` library to format the `title` message.\n\n3. What is the `LegalContent` component and where is it defined?\n   \n   The `LegalContent` component is a custom MDX component that renders legal content. It is defined in a separate file located at `../content/legal.mdx`.","metadata":{"source":".autodoc/docs/markdown/pages/legal.md"}}],["189",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/news/[id].tsx)\n\nThe `Post` component is a React component that renders a blog post. It imports several dependencies, including `Layout`, `ReactMarkdown`, `Image`, `Button`, `Link`, and `BlogPosts`. The component takes in two props, `post` and `posts`, which are objects containing data about the current post and a list of all blog posts, respectively.\n\nThe component first checks whether the current post has an image associated with it and sets the `hasImage` and `imageUrl` variables accordingly. It then renders the blog post content, including the title, author, date, subtitle, and content. The content is parsed using `ReactMarkdown` and several plugins, including `remarkGfm`, `remarkBreaks`, and `rehypeRaw`, which allow for the use of GitHub-flavored Markdown and raw HTML in the post content.\n\nThe component also includes a \"Share post\" section at the bottom of the post, which contains links to share the post on Facebook and Twitter. The links are wrapped in `Link` components from Next.js, which allow for client-side navigation without a full page refresh.\n\nFinally, the component fetches the current post and a list of all blog posts from a Strapi API using the `getServerSideProps` function. If the current post is not found, the component returns a 404 error. Otherwise, it returns the `post` and `posts` props to the `Post` component.\n\nOverall, the `Post` component is a key part of the Ergoweb project's blog functionality, allowing users to view and share individual blog posts.\n## Questions: \n 1. What external libraries or frameworks are being used in this code?\n- The code is importing several external libraries and components such as `react-intl`, `react-markdown`, `next/image`, `next/link`, and custom components like `Layout`, `Button`, `BlogFacebook`, `BlogLink`, `BlogTwitter`, and `BlogPosts`.\n\n2. What is the purpose of the `getServerSideProps` function?\n- The `getServerSideProps` function is used to fetch data from an external API (presumably Strapi) and pass it as props to the `Post` component. It is also used to handle cases where the requested post is not found.\n\n3. What is the purpose of the `hasImage` and `imageUrl` variables?\n- The `hasImage` and `imageUrl` variables are used to determine if the current post has an associated image and to set the URL of that image. The code checks if the post has a `blogPhoto` attribute or an `image` attribute with a `url` attribute, and sets `hasImage` to `true` and `imageUrl` accordingly.","metadata":{"source":".autodoc/docs/markdown/pages/news/[id].md"}}],["190",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/pages/news)\n\nThe `[id].tsx` file in the `.autodoc/docs/json/pages/news` folder is responsible for rendering individual blog posts in the Ergoweb project. It is a React component named `Post` that takes in two props: `post` and `posts`. The `post` prop contains data about the current post, while the `posts` prop contains a list of all blog posts.\n\nThe `Post` component imports several dependencies, such as `Layout`, `ReactMarkdown`, `Image`, `Button`, `Link`, and `BlogPosts`. It first checks if the current post has an associated image and sets the `hasImage` and `imageUrl` variables accordingly. The component then renders the blog post content, including the title, author, date, subtitle, and content.\n\nThe content is parsed using `ReactMarkdown` and several plugins, such as `remarkGfm`, `remarkBreaks`, and `rehypeRaw`. These plugins enable the use of GitHub-flavored Markdown and raw HTML in the post content. For example, if a post contains the following content:\n\n```markdown\n# This is a heading\n\nThis is a paragraph with **bold text** and *italic text*.\n\n- This is a list item\n- Another list item\n```\n\nThe `Post` component will render the content with proper formatting, such as headings, paragraphs, bold and italic text, and lists.\n\nAt the bottom of the post, there is a \"Share post\" section containing links to share the post on Facebook and Twitter. These links are wrapped in `Link` components from Next.js, enabling client-side navigation without a full page refresh.\n\nThe `Post` component fetches the current post and a list of all blog posts from a Strapi API using the `getServerSideProps` function. If the current post is not found, the component returns a 404 error. Otherwise, it returns the `post` and `posts` props to the `Post` component.\n\nIn the larger project, the `Post` component is a crucial part of the blog functionality, allowing users to view and share individual blog posts. For example, when a user navigates to a specific blog post URL (e.g., `/news/1`), the `Post` component will fetch the post data with the corresponding ID and render the post content on the page.","metadata":{"source":".autodoc/docs/markdown/pages/news/summary.md"}}],["191",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/news.tsx)\n\nThe `News` component is responsible for rendering the blog news section of the Ergoweb project. It imports the `useIntl` hook from the `react-intl` library, which is used to format the title of the page. The component receives two optional props, `news` and `media`, which are used to display the blog news and media posts respectively.\n\nThe `News` component returns a JSX element that contains several `div` elements with class names that are used for styling purposes. The `Layout` component is used to render the page layout and receives the `title` prop, which is formatted using the `useIntl` hook. The `BlogNews` component is conditionally rendered based on the presence of the `news` prop.\n\nThe `getServerSideProps` function is an asynchronous function that is used to fetch the blog news and media posts from the Strapi API. It receives a `context` object as an argument, which contains information about the request, such as the locale. The `fetch` function is used to make HTTP requests to the Strapi API, and the response is parsed using the `json` method. The `data` property of the response is returned as the value of the `news` and `media` props.\n\nThis component can be used in the larger Ergoweb project to display the latest blog news and media posts. The `News` component can be imported and rendered in other components or pages of the project. The `getServerSideProps` function can be used to fetch the latest blog news and media posts on the server-side, which can improve the performance of the application by reducing the amount of data that needs to be loaded on the client-side. \n\nExample usage:\n\n```\nimport News from '../components/News';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Welcome to Ergoweb</h1>\n      <News />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `useIntl` hook and how is it used in this code?\n   - The `useIntl` hook is used to format internationalized messages and is used in this code to format the title of the blog page.\n2. What is the purpose of the `getServerSideProps` function and what does it return?\n   - The `getServerSideProps` function is used to fetch data from an external API and return it as props to the component. In this code, it fetches news and media data from a Strapi API and returns them as props.\n3. What is the purpose of the `BlogNews` component and when is it rendered?\n   - The `BlogNews` component is used to render a list of news articles and is only rendered if the `props.news` object is truthy.","metadata":{"source":".autodoc/docs/markdown/pages/news.md"}}],["192",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/pages/privacy-policy.tsx)\n\nThe code above defines a React component called `PrivacyPolicy` that renders a privacy policy page for the ergoweb project. The component imports the `NextPage` type from the `next` package and the `FormattedMessage` and `useIntl` hooks from the `react-intl` package. It also imports a `Layout` component and a `PrivacyPolicyContent` component from other files in the project.\n\nThe `PrivacyPolicy` component uses the `useIntl` hook to access the `intl` object, which provides internationalization features such as message formatting. It then uses the `formatMessage` method of the `intl` object to retrieve the title of the privacy policy page from the project's message catalog. The title is passed as a prop to the `Layout` component, which renders a header with the title and other navigation elements.\n\nThe main content of the privacy policy page is rendered by the `PrivacyPolicyContent` component, which is defined in a separate file. This component uses the `mdx` syntax to define the content of the privacy policy in a structured and reusable way. The `PrivacyPolicy` component simply renders the `PrivacyPolicyContent` component inside a `div` element with some styling classes.\n\nOverall, this code demonstrates how React components can be used to build complex user interfaces from smaller, reusable building blocks. It also shows how internationalization can be integrated into a React project using the `react-intl` package. Finally, it illustrates how content can be structured and managed separately from the code using the `mdx` syntax.\n## Questions: \n 1. What is the purpose of the `PrivacyPolicy` component?\n   - The `PrivacyPolicy` component is a Next.js page component that renders a privacy policy page with content from an MDX file.\n\n2. What is the role of the `Layout` component in this code?\n   - The `Layout` component is a custom component that provides a consistent layout for all pages in the `ergoweb` project, and it is used here to wrap the content of the `PrivacyPolicy` page.\n\n3. What is the `useIntl` hook used for in this code?\n   - The `useIntl` hook is used to access the internationalization functionality provided by the `react-intl` library, and it is used here to format the title of the `PrivacyPolicy` page based on the user's locale.","metadata":{"source":".autodoc/docs/markdown/pages/privacy-policy.md"}}],["193",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/pages)\n\nThe `.autodoc/docs/json/pages` folder contains various React components and Next.js functions responsible for rendering different pages and handling API requests in the Ergoweb project. These components are organized into separate files and subfolders, making it easy to manage and maintain the codebase.\n\nFor example, the `404.tsx` file defines a custom 404 error page that is visually appealing and user-friendly. It uses the Next.js framework and the react-intl library to provide internationalization support and a consistent layout for the error page.\n\nThe `_app.tsx` file sets up an internationalization (i18n) system for the Ergoweb project, allowing users to view the website in multiple languages. It also provides analytics tracking using Google Analytics and a theme context using `next-themes`.\n\nThe `blog.tsx` file renders a blog page that fetches data from an external API and displays the data using the `BlogPosts` component and a list of categories. The component can be customized by passing in different sets of data as props.\n\nThe `community.tsx` file renders the community page of the Ergoweb project, displaying the latest blog posts and team members from the Strapi API. It uses the `getServerSideProps` function to fetch data and pass it as props to the `Community` component.\n\nThe `discover.tsx` file renders a page for discovering information related to the Ergo blockchain project. It fetches documents and FAQs from the Strapi API based on the user's locale and returns them as props to the `Discover` component.\n\nThe `ecosystem.tsx` file renders the main page of the ecosystem section of the Ergoweb project. It imports and conditionally renders several child components based on the presence of certain props and fetches data for these props using the `getServerSideProps` function.\n\nThe `get-erg.tsx` file renders the \"Get ERG\" page of the Ergoweb project, displaying information about wallets that support ERG, mining ERG, and exchanges where ERG can be traded. The `getStaticProps` function fetches data from several APIs and passes them as props to the `GetErg` component.\n\nThe `index.tsx` file defines the homepage of the Ergoweb project, displaying recent blog posts, project partners, and blockchain information. The `getStaticProps` function fetches data from various APIs and passes it as props to the `Home` component.\n\nThe `legal.tsx` file renders a reusable legal page for the Ergoweb project that can be easily translated into different languages using the react-intl library. The component can be used by importing it into other pages or components and rendering it as a standalone page or as part of a larger application.\n\nThe `news.tsx` file renders individual blog posts in the Ergoweb project, allowing users to view and share individual blog posts. The `getServerSideProps` function fetches the current post and a list of all blog posts from a Strapi API.\n\nIn summary, the `.autodoc/docs/json/pages`","metadata":{"source":".autodoc/docs/markdown/pages/summary.md"}}],["194",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/postcss.config.js)\n\nThe code above is a module that exports an object with two properties: `plugins` and their respective configurations. This module is likely used in the larger project to configure the build process for the project's CSS files. \n\nThe `tailwindcss` plugin is a utility-first CSS framework that provides a set of pre-defined classes to style HTML elements. This plugin is likely used to apply the styles defined in the Tailwind CSS framework to the project's CSS files. \n\nThe `autoprefixer` plugin is a PostCSS plugin that automatically adds vendor prefixes to CSS rules. This plugin is likely used to ensure that the project's CSS files are compatible with a wide range of browsers. \n\nHere is an example of how this module might be used in a larger project's build process:\n\n```\nconst postcss = require('postcss');\nconst tailwindcss = require('tailwindcss');\nconst autoprefixer = require('autoprefixer');\nconst cssnano = require('cssnano');\n\nconst css = `\n  .my-class {\n    color: red;\n  }\n`;\n\npostcss([tailwindcss, autoprefixer, cssnano])\n  .process(css, { from: undefined })\n  .then(result => console.log(result.css));\n```\n\nIn this example, the `postcss` function is used to process the CSS string `css`. The `tailwindcss` and `autoprefixer` plugins are applied to the CSS, and the resulting CSS is minified using the `cssnano` plugin. The resulting CSS is then logged to the console. \n\nOverall, this module is a small but important part of the larger project's build process, ensuring that the project's CSS files are properly styled and compatible with a wide range of browsers.\n## Questions: \n 1. What is the purpose of this code?\n   This code exports an object with two plugins, tailwindcss and autoprefixer, for use in a project called ergoweb.\n\n2. What version of tailwindcss and autoprefixer are being used?\n   The code does not specify a version for either plugin, so the latest version available at the time of installation will be used.\n\n3. Where is this code being used in the ergoweb project?\n   It is unclear where this code is being used in the ergoweb project as there is no context provided.","metadata":{"source":".autodoc/docs/markdown/postcss.config.md"}}],["195",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/public/manifest.json)\n\nThis code defines a JSON object that contains metadata for a Progressive Web App (PWA) called \"Ergo Platform\". The metadata includes the name and short name of the app, as well as icons in two different sizes and formats. The `theme_color` and `background_color` properties define the colors used by the app's UI. The `start_url` property specifies the URL that the app should open to when launched, and the `display` property indicates that the app should be displayed as a standalone app rather than within a browser window. Finally, the `orientation` property specifies that the app should be displayed in portrait mode.\n\nThis code is important for the larger Ergo Platform project because it defines the metadata that is used by the browser to display the app to users. The icons, colors, and other properties defined in this code help to create a consistent and recognizable user experience across different devices and platforms. Additionally, the `display` property allows the app to be launched from the user's home screen like a native app, which can improve user engagement and retention.\n\nHere is an example of how this code might be used in a larger project:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Ergo Platform</title>\n    <link rel=\"manifest\" href=\"/manifest.json\">\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <h1>Welcome to Ergo Platform</h1>\n    <p>Get started by clicking the button below:</p>\n    <button>Launch Ergo Platform</button>\n  </body>\n</html>\n```\n\nIn this example, the `manifest.json` file containing the metadata defined in the code above is linked in the `head` section of the HTML document. This allows the browser to use the metadata to display the app to users. The `favicon.ico` file is also linked, which provides an icon for the app that is displayed in the browser tab. The `button` element in the body of the document could be used to launch the app when clicked, thanks to the `display` property defined in the metadata.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines the metadata for a Progressive Web App (PWA) called \"Ergo Platform\", including its name, icons, theme color, and display settings.\n\n2. What is the significance of the icons array?\n   The icons array specifies two different images to be used as icons for the PWA, one with a size of 192x192 pixels and another with a size of 512x512 pixels.\n\n3. What is the difference between \"theme_color\" and \"background_color\"?\n   \"theme_color\" sets the color of the browser's UI elements when the PWA is launched, while \"background_color\" sets the color of the PWA's splash screen and the background color of the PWA's UI.","metadata":{"source":".autodoc/docs/markdown/public/manifest.md"}}],["196",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/public/robots.txt)\n\nThis code is a robots.txt file, which is used to communicate with web crawlers and search engines about which pages or sections of a website should be crawled and indexed. \n\nThe first line, \"User-agent: *\", specifies that the rules apply to all web crawlers. The second line, \"Allow: /\", allows all web crawlers to access all pages on the website. \n\nThe next section, \"Host: https://ergoplatform.org\", specifies the domain name of the website. This is useful for search engines to ensure they are crawling the correct website. \n\nFinally, the \"Sitemap: https://ergoplatform.org/sitemap.xml\" line specifies the location of the sitemap file, which lists all the pages on the website that should be crawled and indexed by search engines. \n\nOverall, this code ensures that web crawlers and search engines can properly access and index all pages on the ergoplatform.org website. \n\nAn example of how this code may be used in the larger project is to improve the website's search engine optimization (SEO). By properly configuring the robots.txt file and sitemap, the website can ensure that search engines are crawling and indexing all relevant pages, which can improve the website's visibility and ranking in search results.\n## Questions: \n 1. **What is the purpose of this code?**\\\nA smart developer might wonder what this code does and what its purpose is within the `ergoweb` project. This code is a robots.txt file that instructs web crawlers which pages or files they are allowed to access on the `https://ergoplatform.org` website.\n\n2. **What is the significance of the User-agent and Allow directives?**\\\nA smart developer might want to know more about the User-agent and Allow directives used in this code. The User-agent directive specifies which web crawlers the rules apply to, while the Allow directive specifies which pages or files are allowed to be accessed by those crawlers.\n\n3. **Why is the Sitemap directive included in this code?**\\\nA smart developer might question why the Sitemap directive is included in this code. The Sitemap directive specifies the location of the website's sitemap, which provides a list of all the pages on the website. This can help web crawlers more efficiently crawl and index the website's content.","metadata":{"source":".autodoc/docs/markdown/public/robots.md"}}],["197",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/public/sitemap-0.xml)\n\nThis code is an XML sitemap file for the ErgoWeb project. Sitemaps are used by search engines to index the pages of a website. This particular sitemap includes URLs for various pages of the ErgoWeb website, along with metadata such as the last modification date, change frequency, and priority. \n\nThe `urlset` element is the root element of the sitemap and contains a list of `url` elements, each representing a page on the website. The `loc` element within each `url` element specifies the URL of the page. The `lastmod` element specifies the date and time of the last modification of the page. The `changefreq` element indicates how frequently the page is likely to change, and the `priority` element indicates the relative priority of the page compared to other pages on the site. \n\nThe sitemap also includes several `xhtml:link` elements, which provide additional information about alternate versions of the page in different languages. These elements specify the URL of the alternate version and the language code. \n\nThis sitemap file is used by search engines to crawl and index the pages of the ErgoWeb website. By providing metadata about each page, the sitemap helps search engines understand the structure and content of the site, which can improve the site's visibility in search results. \n\nExample usage:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://ergoplatform.org/</loc>\n    <lastmod>2023-04-05T13:26:13.103Z</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.7</priority>\n  </url>\n  <url>\n    <loc>https://ergoplatform.org/blog/</loc>\n    <lastmod>2023-04-05T13:26:13.103Z</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.7</priority>\n  </url>\n  ...\n</urlset>\n``` \nIn this example, the sitemap includes two URLs for the ErgoWeb website: the homepage and the blog page. The `lastmod` element indicates that both pages were last modified on April 5, 2023 at 13:26:13 UTC. The `changefreq` element indicates that both pages are likely to change daily, and the `priority` element indicates that both pages have a relative priority of 0.7 compared to other pages on the site.\n## Questions: \n 1. What is the purpose of this code?\n   \n   This code is an XML sitemap file for the ergoweb project, which lists the URLs of various pages on the website along with metadata such as last modification date, change frequency, and priority.\n\n2. What do the different namespaces in the XML code represent?\n   \n   The different namespaces in the XML code represent different types of metadata that can be included in a sitemap file. For example, the `news` namespace is used for news articles, the `xhtml` namespace is used for XHTML links, and the `image` and `video` namespaces are used for multimedia content.\n\n3. Why are there multiple URLs listed with different language codes?\n   \n   The multiple URLs listed with different language codes are likely intended to provide language-specific versions of the same content. This can help improve the user experience for visitors who speak different languages, as well as improve search engine optimization by making it easier for search engines to understand the content of the website.","metadata":{"source":".autodoc/docs/markdown/public/sitemap-0.md"}}],["198",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/public/sitemap.xml)\n\nThis code is an XML file that defines a sitemap index for the ErgoWeb project. A sitemap index is a file that lists all the individual sitemaps for a website, allowing search engines to easily crawl and index all the pages on the site. \n\nThe file starts with an XML declaration that specifies the version of XML being used and the character encoding. The root element of the file is a sitemapindex element, which is defined by the sitemaps.org schema for sitemaps. \n\nWithin the sitemapindex element, there is a single sitemap element that contains the location of the first sitemap for the ErgoWeb project. The loc element within the sitemap element specifies the URL of the sitemap. \n\nThis file is important for the ErgoWeb project because it helps search engines to discover and index all the pages on the site. By providing a sitemap index, the project can ensure that all pages are easily accessible to search engines, which can improve the site's visibility in search results. \n\nHere is an example of how this file might be used in the larger ErgoWeb project:\n\n1. The ErgoWeb project generates individual sitemap files for each section of the site.\n2. The sitemap files are stored in a specific directory on the server.\n3. The sitemap index file is created and stored in the same directory as the individual sitemaps.\n4. The sitemap index file is submitted to search engines, which use it to discover and crawl all the pages on the site. \n\nOverall, this code is a crucial part of the ErgoWeb project's SEO strategy, as it helps search engines to easily discover and index all the pages on the site.\n## Questions: \n 1. What is the purpose of this code?\n   This code is generating a sitemap index file for the ergoweb project, which contains a single sitemap file located at https://ergoplatform.org/sitemap-0.xml.\n\n2. What is the format of the sitemap index file?\n   The sitemap index file is in XML format and follows the schema defined by http://www.sitemaps.org/schemas/sitemap/0.9.\n\n3. Are there any additional sitemap files for the ergoweb project?\n   Based on this code, there is only one sitemap file for the ergoweb project located at https://ergoplatform.org/sitemap-0.xml. However, there may be additional sitemap files that are not included in this code snippet.","metadata":{"source":".autodoc/docs/markdown/public/sitemap.md"}}],["199",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/public)\n\nThe `.autodoc/docs/json/public` folder contains essential files for the ErgoWeb project, focusing on metadata, search engine optimization (SEO), caching, and serving assets efficiently. The files in this folder contribute to the overall performance and user experience of the ErgoWeb project.\n\n`manifest.json` defines metadata for the Ergo Platform Progressive Web App (PWA), including app name, icons, theme color, background color, start URL, display mode, and orientation. This metadata helps create a consistent user experience across devices and platforms. For example, the `display` property allows the app to be launched from the user's home screen like a native app.\n\n`robots.txt` communicates with web crawlers and search engines about which pages or sections of the website should be crawled and indexed. By properly configuring the robots.txt file and sitemap, the website can ensure that search engines are crawling and indexing all relevant pages, improving the website's visibility and ranking in search results.\n\n`sitemap-0.xml` is an XML sitemap file that lists URLs for various pages of the ErgoWeb website, along with metadata such as the last modification date, change frequency, and priority. This sitemap helps search engines understand the structure and content of the site, improving the site's visibility in search results.\n\n`sitemap.xml` defines a sitemap index for the ErgoWeb project, listing all the individual sitemaps for the website. By providing a sitemap index, the project ensures that all pages are easily accessible to search engines, improving the site's visibility in search results.\n\n`sw.js` handles the caching and serving of assets, improving the performance of the ErgoWeb project by reducing the load on the server and serving cached assets quickly.\n\n`workbox-1846d813.js` defines a module that provides various caching strategies and utilities for handling network requests. The code includes classes and functions for creating custom caching strategies, handling network requests efficiently, and managing cache expiration.\n\nIn summary, the files in the `.autodoc/docs/json/public` folder play a crucial role in the ErgoWeb project by providing metadata, improving SEO, and enhancing the performance of the web application through caching and efficient asset serving. These files work together to create a seamless and optimized user experience for the Ergo Platform PWA.","metadata":{"source":".autodoc/docs/markdown/public/summary.md"}}],["200",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/public/sw.js)\n\nThis code is responsible for handling the caching and serving of assets in\n## Questions: \n 1. **What is the purpose of this code?**\n\n   This code is a service worker for the ErgoWeb project, which is responsible for handling caching and fetching strategies for various types of assets, such as images, fonts, stylesheets, and API requests.\n\n2. **How does the service worker handle caching for different types of assets?**\n\n   The service worker uses different","metadata":{"source":".autodoc/docs/markdown/public/sw.md"}}],["201",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/public/workbox-1846d813.js)\n\nThis code is part of the Ergoweb project and defines a module that provides various caching strategies and utilities for handling network requests. The main purpose of this code is to improve the performance of web applications by caching assets and data, and serving them efficiently when needed.\n\nThe code defines several classes and functions that can be used to create custom caching strategies and handle network requests. Some of the key classes and functions include:\n\n- `class s extends Error`: A custom error class that extends the built-in Error class. It is used to handle errors related to caching and network requests.\n- `class r`: A base class for defining route handlers. It provides methods for matching and handling requests.\n- `class i extends r`: A subclass of `r` that handles requests based on a regular expression.\n- `class a`: A class that manages the routing and caching of network requests. It provides methods for registering and unregistering routes, handling fetch and cache events, and finding matching routes.\n- `function h(t, e, n)`: A function that registers a route with the given handler and method.\n- `class v`: A base class for implementing caching strategies. It provides methods for handling requests, caching responses, and managing cache expiration.\n- `class Y extends v`: A class that implements a precaching strategy. It extends the base `v` class and provides methods for installing and activating the cache, as well as handling requests.\n- `class Z`: A class that manages the precaching of assets and data. It provides methods for adding items to the cache list, installing and activating the cache, and creating request handlers.\n\nThese classes and functions can be used together to create custom caching strategies and handle network requests efficiently. For example, a developer can create a new instance of the `a` class, register routes with custom handlers, and use the provided caching strategies to serve assets and data efficiently. This can greatly improve the performance of a web application by reducing the load on the server and serving cached assets quickly.\n## Questions: \n 1. **Question**: What is the purpose of the `ergoweb` project?\n   **Answer**: The purpose of the `ergoweb` project is not clear from the provided code. It seems to be a JavaScript module that includes various classes and functions related to caching, routing, and handling fetch events, but the specific use case or application is not evident from the code alone.\n\n2. **Question**: What are the main classes and functions in this code?\n   **Answer**: The main classes in this code are `s`, `r`, `i`, `a`, `R`, `v`, `y`, `m`, `p`, `w`, `d`, `A`, `F`, `H`, `G`, `V`, `Z`, `et`, and various other classes extending from `v`. The main functions include `e`, `n`, `h`, `u`, `l`, `f`, `w`, `d`, `p`, `m`, `R`, `v`, `b`, `q`, `O`, `T`, `k`, `B`, `P`, `M`, `W`, `j`, `S`, `K`, `tt`, `et`, and `H`.\n\n3. **Question**: How does the code handle caching and fetch events?\n   **Answer**: The code handles caching and fetch events by creating a class `a` that has methods like `addFetchListener`, `addCacheListener`, and `handleRequest`. The `addFetchListener` method adds an event listener for the \"fetch\" event, and the `addCacheListener` method adds an event listener for the \"message\" event. The `handleRequest` method is responsible for handling the request and returning a response based on the cache and fetch strategies defined in the code.","metadata":{"source":".autodoc/docs/markdown/public/workbox-1846d813.md"}}],["202",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/button.stories.jsx)\n\nThis code exports a set of pre-configured Button components with different styles and properties. The purpose of this code is to provide a consistent and reusable set of buttons that can be used throughout the larger ergoweb project. \n\nThe code imports two components, Button and Dark, from their respective files. The Button component is the main component being exported and is used to create different variations of buttons. The Dark component is a wrapper component that provides a dark background for the buttons.\n\nThe exported object contains a title, the Button component, and an array of decorators. The decorators are higher-order components that wrap the Button component with additional functionality. In this case, the Dark component is used to provide a dark background for the buttons.\n\nThe code then defines a Template function that takes in arguments and returns a Button component with those arguments. This function is used to create different variations of the Button component.\n\nThe code then exports several variations of the Button component, each with different properties. These variations include a Button with an arrow, a Button without an arrow with black text, a Button without an arrow with white text, a Link with an arrow, and a long Link with no icon. Each variation is given a name and a set of properties that define its appearance and behavior.\n\nThis code can be used throughout the ergoweb project to create consistent and reusable buttons. Developers can import these pre-configured buttons and use them in their components without having to define the properties each time. For example, a developer can import the ButtonWithArrow component and use it in their component like this:\n\n```\nimport { ButtonWithArrow } from 'ergoweb';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ButtonWithArrow text=\"Click me!\" url=\"https://example.com\" />\n    </div>\n  );\n}\n```\n\nThis would create a ButtonWithArrow component with the text \"Click me!\" and a URL of \"https://example.com\". The appearance and behavior of the button would be consistent with the other pre-configured buttons defined in this file.\n## Questions: \n 1. What is the purpose of the `decorators` array in the export statement?\n   - The `decorators` array is used to wrap the `Button` component in a `Dark` component, which provides a dark background for the button.\n2. What is the significance of the `args` object in each of the exported components?\n   - The `args` object is used to pass props to the `Button` component, allowing for customization of the button's text, URL, icon, color, and other properties.\n3. What is the difference between the `ButtonWithArrow`, `ButtonWithoutArrowBlack`, and `ButtonWithoutArrowWhite` components?\n   - The `ButtonWithArrow` component includes a right arrow icon, while the `ButtonWithoutArrowBlack` and `ButtonWithoutArrowWhite` components do not. The `ButtonWithoutArrowBlack` component has black text, while the `ButtonWithoutArrowWhite` component has white text.","metadata":{"source":".autodoc/docs/markdown/stories/components/button.stories.md"}}],["203",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/community/communityCard.stories.jsx)\n\nThe code is a React component that exports a CommunityCard component. The purpose of this component is to display information about a community, such as its name, icon, and a brief description. The component is designed to be used in the larger ergoweb project as a reusable component that can be easily customized and integrated into different parts of the project.\n\nThe component imports two other components, CommunityCard and Dark, from their respective files. The Dark component is a wrapper that applies a dark theme to the CommunityCard component. This is achieved using the decorators property, which is an array of functions that wrap the component with additional functionality. In this case, the Dark component is used to apply a dark theme to the CommunityCard component.\n\nThe Template function is a higher-order function that takes an object of arguments and returns a new instance of the CommunityCard component with those arguments. This function is used to create a reusable template for the CommunityCard component that can be easily customized with different arguments.\n\nThe CommunityCardComponent is a named export that is bound to the Template function. This export is used to create an instance of the CommunityCard component with specific arguments. In this case, the arguments are the title, icon, and text properties, which are used to display information about the community.\n\nOverall, this code is a reusable component that can be used to display information about a community in the ergoweb project. It is designed to be easily customized and integrated into different parts of the project, and it uses a dark theme to provide a consistent look and feel across the project.\n## Questions: \n 1. What is the purpose of the `Dark` component being imported and used as a decorator?\n- The `Dark` component is being used as a decorator to provide a dark background for the `CommunityCard` component.\n\n2. What is the `Template` function used for?\n- The `Template` function is used to render the `CommunityCard` component with the provided arguments.\n\n3. What is the significance of the `CommunityCardComponent` export?\n- The `CommunityCardComponent` export is used to make the `CommunityCard` component available for use in other parts of the project.","metadata":{"source":".autodoc/docs/markdown/stories/components/community/communityCard.stories.md"}}],["204",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/stories/components/community)\n\nThe `communityCard.stories.jsx` file contains a reusable React component called `CommunityCard` that is designed to display information about a community within the ergoweb project. This component can be easily customized and integrated into different parts of the project, providing a consistent look and feel.\n\nThe `CommunityCard` component imports two other components: `CommunityCard` and `Dark`. The `Dark` component is a wrapper that applies a dark theme to the `CommunityCard` component using the `decorators` property, which is an array of functions that wrap the component with additional functionality.\n\nThe `Template` function is a higher-order function that takes an object of arguments and returns a new instance of the `CommunityCard` component with those arguments. This function is used to create a reusable template for the `CommunityCard` component that can be easily customized with different arguments.\n\nThe `CommunityCardComponent` is a named export that is bound to the `Template` function. This export is used to create an instance of the `CommunityCard` component with specific arguments, such as the `title`, `icon`, and `text` properties, which are used to display information about the community.\n\nFor example, to use the `CommunityCard` component in another part of the project, you would import it and then customize it with the desired properties:\n\n```jsx\nimport { CommunityCardComponent } from './communityCard.stories';\n\nfunction SomeComponent() {\n  return (\n    <div>\n      <CommunityCardComponent\n        title=\"Example Community\"\n        icon=\"example-icon\"\n        text=\"This is a brief description of the example community.\"\n      />\n    </div>\n  );\n}\n```\n\nIn this example, the `CommunityCardComponent` is imported and used within the `SomeComponent` function. The `title`, `icon`, and `text` properties are customized to display information about the \"Example Community\". The `CommunityCard` component will be rendered with a dark theme, thanks to the `Dark` wrapper component.\n\nIn summary, the `communityCard.stories.jsx` file provides a reusable and customizable `CommunityCard` component that can be used to display information about communities within the ergoweb project. The component is designed to be easily integrated into different parts of the project and uses a dark theme to provide a consistent look and feel.","metadata":{"source":".autodoc/docs/markdown/stories/components/community/summary.md"}}],["205",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/contributeForm.stories.jsx)\n\nThis code exports a storybook story for the `ContributeForm` component in the `ergoweb` project. Storybook is a tool used for developing and testing UI components in isolation. \n\nThe `import` statements at the beginning of the file bring in the `ContributeForm` component and a `Dark` component from their respective file paths. The `ContributeForm` component is the main component being documented in this file. The `Dark` component is a decorator that wraps the `ContributeForm` component in a dark background for visual contrast. \n\nThe `export default` statement exports an object that contains metadata about the `ContributeForm` component story. The `title` property sets the title of the story in the Storybook UI. The `component` property specifies the component being documented. The `decorators` property is an array of functions that wrap the component in additional UI elements for visual testing. In this case, the `Dark` component is used as a decorator to provide a dark background for the `ContributeForm` component. \n\nThe `Template` function is a simple function that returns the `ContributeForm` component. This function is used to create a reusable template for the `ContributeForm` story. \n\nFinally, the `export const` statement exports a named export for the `ContributeFormComponent` story. This named export is used by Storybook to generate the UI for the `ContributeForm` component story. \n\nOverall, this code is a small part of the larger `ergoweb` project that documents the `ContributeForm` component using Storybook. It provides a reusable template for the `ContributeForm` story and uses a `Dark` decorator to provide visual contrast for testing.\n## Questions: \n 1. What is the purpose of the ContributeForm component?\n   - The ContributeForm component is being imported and used in this file, but its purpose is not clear. It would be helpful to have some documentation or comments explaining what this component does and how it is used.\n\n2. What is the Dark component and why is it being used as a decorator?\n   - The Dark component is being imported and used as a decorator for the ContributeForm component. It is not clear what the Dark component does or why it is being used in this context. Some documentation or comments explaining the purpose of the Dark component and how it is used as a decorator would be helpful.\n\n3. What is the purpose of the Template function and how is it being used?\n   - The Template function is defined in this file, but it is not clear what its purpose is or how it is being used. Some documentation or comments explaining the purpose of the Template function and how it is being used to create the ContributeFormComponent would be helpful.","metadata":{"source":".autodoc/docs/markdown/stories/components/contributeForm.stories.md"}}],["206",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/footer.stories.jsx)\n\nThis code exports a storybook story for the `Footer` component of the `ergoweb` project. Storybook is a tool used for developing and testing UI components in isolation. \n\nThe `import` statements at the beginning of the code bring in the `Footer` component and a `Dark` component from their respective files. The `Footer` component is the one being documented in this file. \n\nThe `export default` statement exports an object that contains metadata about the `Footer` component story. The `title` property specifies the title of the story, which is \"Components/Footer\". The `component` property specifies the component that the story is about, which is the `Footer` component. The `decorators` property is an array of functions that wrap the `Story` component, which is the component being documented. In this case, there is only one decorator function that wraps the `Story` component in a `Dark` component. \n\nThe `Template` function is a simple function that returns the `Footer` component. The `export const` statement exports a named export called `FooterComponent` that is bound to the `Template` function. This named export can be imported and used in other files to render the `Footer` component. \n\nOverall, this code is used to document and test the `Footer` component in isolation using Storybook. The `Footer` component can be rendered with different props and in different contexts to ensure that it works as intended. The metadata provided in the exported object helps developers understand what the `Footer` component is and how it should be used.\n## Questions: \n 1. What is the purpose of the `decorators` array in this code?\n   - The `decorators` array is used to wrap the `Footer` component with a `Dark` component, which provides a dark background for the footer.\n\n2. What is the `Template` function used for?\n   - The `Template` function is used to define the arguments for the `Footer` component, which is then used to create the `FooterComponent` export.\n\n3. What is the significance of the `title` and `component` properties in the `export default` object?\n   - The `title` property is used to define the title of the storybook section for the `Footer` component, while the `component` property specifies the component to be rendered in the storybook section.","metadata":{"source":".autodoc/docs/markdown/stories/components/footer.stories.md"}}],["207",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/home/autolykos.stories.jsx)\n\nThis code exports a React component called `AutolykosComponent` that is used in the `ergoweb` project. The component is defined in the `Autolykos` file located in the `components/home` directory. \n\nThe `title` property is used to give the component a name that will be displayed in the Storybook UI. The `component` property specifies the React component that will be rendered in the Storybook UI. \n\nThe `decorators` property is an array of functions that wrap the component with additional functionality. In this case, the `Dark` component is used to provide a dark background for the `Autolykos` component. \n\nThe `Template` function is a higher-order component that takes in `args` as its parameter and returns the `Autolykos` component with the spread operator applied to the `args` object. This allows for dynamic props to be passed to the component. \n\nFinally, the `AutolykosComponent` is created by binding the `Template` function to an empty object. This creates a new instance of the `Autolykos` component that can be used in the `ergoweb` project. \n\nThis code is used in the larger `ergoweb` project to create a reusable component that can be easily customized with dynamic props. The `Dark` component is used to provide a consistent look and feel across the project. The `Autolykos` component is likely used on the home page of the `ergoweb` project to display information about the project or to showcase a particular feature. \n\nExample usage of the `AutolykosComponent` in the `ergoweb` project:\n\n```\nimport AutolykosComponent from './components/home/AutolykosComponent';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Welcome to Ergoweb</h1>\n      <AutolykosComponent title=\"About Ergoweb\" description=\"Learn more about our project\" />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `Dark` component being imported and used as a decorator?\n   - The `Dark` component is being used as a decorator to wrap the `Autolykos` component and provide a dark theme for it.\n\n2. What is the `Template` function used for?\n   - The `Template` function is used to create a reusable template for rendering the `Autolykos` component with any given set of props.\n\n3. What is the significance of the `AutolykosComponent` export?\n   - The `AutolykosComponent` export is a named export that allows the `Autolykos` component to be imported and used in other parts of the project.","metadata":{"source":".autodoc/docs/markdown/stories/components/home/autolykos.stories.md"}}],["208",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/home/highlights.stories.jsx)\n\nThis code exports a React component called `HighlightsComponent` that renders a component called `Highlights` with some additional styling provided by a component called `Dark`. The purpose of this component is to display highlights or featured content on the home page of a website or application. \n\nThe `decorators` property is used to wrap the `Highlights` component with the `Dark` component, which provides a dark background for the highlights to stand out against. This is a common technique used in web design to create contrast and draw attention to important content. \n\nThe `Template` function is a higher-order function that takes in `args` as its parameter and returns the `Highlights` component with the `args` passed in as props. This allows for dynamic rendering of the `Highlights` component with different content and styles depending on the props passed in. \n\nThe `export const HighlightsComponent` line exports the `Template` function bound to an empty object as the default export of this module. This allows other modules to import and use the `HighlightsComponent` in their own code. \n\nHere is an example of how this component might be used in a larger project:\n\n```\nimport { HighlightsComponent } from 'ergoweb';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Welcome to ErgoWeb</h1>\n      <HighlightsComponent \n        title=\"New Product Launch\"\n        description=\"Check out our latest product and get 10% off your first purchase!\"\n        image=\"https://example.com/product-image.jpg\"\n      />\n    </div>\n  );\n}\n```\n\nIn this example, the `HighlightsComponent` is used to display a featured product on the home page of the ErgoWeb website. The `title`, `description`, and `image` props are passed in to customize the content and styling of the component.\n## Questions: \n 1. What is the purpose of the `Highlights` component?\n   - The `Highlights` component is a component for the home page of the project.\n2. What is the `Dark` component used for?\n   - The `Dark` component is a decorator used to wrap the `Highlights` component and provide a dark background.\n3. What is the purpose of the `Template` function?\n   - The `Template` function is used to create a reusable template for rendering the `Highlights` component with different props.","metadata":{"source":".autodoc/docs/markdown/stories/components/home/highlights.stories.md"}}],["209",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/home/homeHero.stories.jsx)\n\nThis code exports a storybook story for the `HomeHero` component located in the `ergoweb` project. Storybook is a tool used for developing UI components in isolation, allowing developers to view and interact with components outside of the larger project context. \n\nThe `import` statements at the top of the file bring in the `HomeHero` component and a `Dark` component from their respective file paths. The `Dark` component is used as a decorator in the `decorators` array to provide a dark background for the `HomeHero` component when viewed in Storybook. \n\nThe `export default` statement exports an object that defines the story for the `HomeHero` component. The `title` property sets the title of the story in Storybook, while the `component` property specifies the component being documented. The `decorators` property is an array of functions that wrap the component in additional UI elements, such as the `Dark` component in this case. \n\nThe `Template` function is defined to render the `HomeHero` component with any passed-in arguments. The `export const` statement exports a named export for the `HomeHeroComponent` that binds the `Template` function to the `HomeHero` component. This allows the component to be rendered in Storybook with the `Dark` decorator and any passed-in arguments. \n\nOverall, this code provides a way to document and test the `HomeHero` component in isolation using Storybook. Developers can view the component with different props and in different contexts without having to navigate through the larger `ergoweb` project.\n## Questions: \n 1. What is the purpose of the `Dark` component being imported?\n   - The `Dark` component is being used as a decorator to wrap the `HomeHero` component in a dark theme.\n\n2. What is the `Template` function used for?\n   - The `Template` function is used to create a reusable template for rendering the `HomeHero` component with any given set of props.\n\n3. How is the `HomeHeroComponent` exported and what is its purpose?\n   - The `HomeHeroComponent` is exported as a bound function using the `Template` function, which allows it to be rendered with a specific set of props. It is likely used as a standalone component that can be imported and used in other parts of the project.","metadata":{"source":".autodoc/docs/markdown/stories/components/home/homeHero.stories.md"}}],["210",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/home/homeInfo.stories.jsx)\n\nThis code exports a storybook component called `HomeInfoComponent` that renders the `HomeInfo` component from the `../../../components/home/HomeInfo` file. The purpose of this code is to provide a visual representation of the `HomeInfo` component in a storybook environment, allowing developers to test and showcase the component's functionality and appearance.\n\nThe `title` property specifies the title of the storybook component, which in this case is \"Components/Home/HomeInfo\". The `component` property specifies the component to be rendered, which is the `HomeInfo` component. The `decorators` property is an array of functions that wrap the component in additional functionality. In this case, the `Dark` component from `../../../components/Dark` is used to provide a dark background for the `HomeInfo` component.\n\nThe `Template` function is a higher-order function that takes in `args` as its parameter and returns the `HomeInfo` component with the `args` passed in as props. The `Template` function is used to create the `HomeInfoComponent` storybook component by binding it to an empty object.\n\nThis code can be used in the larger project to provide a visual representation of the `HomeInfo` component in a storybook environment. Developers can use this component to test and showcase the `HomeInfo` component's functionality and appearance, making it easier to identify and fix any issues. Additionally, this code can be used as a reference for creating other storybook components in the project. \n\nExample usage:\n\n```jsx\nimport { HomeInfoComponent } from 'ergoweb';\n\n<HomeInfoComponent \n  title=\"Welcome to ErgoWeb\"\n  description=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, urna eu bibendum bibendum, velit sapien sodales sapien, vel commodo elit elit vel elit.\"\n/>\n```\n## Questions: \n 1. What is the purpose of the `decorators` array in this code?\n   - The `decorators` array is used to wrap the `HomeInfo` component with the `Dark` component, which provides a dark background for the component.\n\n2. What is the `Template` function used for?\n   - The `Template` function is used to create a reusable template for rendering the `HomeInfo` component with different props.\n\n3. What is the significance of the `HomeInfoComponent` export?\n   - The `HomeInfoComponent` export is used to make the `HomeInfo` component available for use in other parts of the project. It is bound to the `Template` function to provide a default set of props.","metadata":{"source":".autodoc/docs/markdown/stories/components/home/homeInfo.stories.md"}}],["211",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/home/news.stories.jsx)\n\nThis code defines a storybook story for the `News` component of the `ergoweb` project. Storybook is a tool for developing UI components in isolation, and this story defines how the `News` component should be displayed in Storybook. \n\nThe `import` statements at the top of the file bring in the `News` component and a `Dark` component that is used as a decorator to provide a dark background for the `News` component. The `getServerSideProps` function is also imported from the `index` page. \n\nThe `export default` statement defines the story for the `News` component. The `title` property sets the title of the story, and the `component` property specifies the component that the story is for. The `decorators` property is an array of functions that wrap the component and provide additional functionality. In this case, there is only one decorator that wraps the `News` component in a `Dark` component. \n\nThe `export const` statement defines a named export for the `NewsComponent` function. This function takes two arguments: `args` and an object with a `loaded` property that contains the `news` data. The `News` component is then rendered with the `news` data passed as a prop. \n\nThe `NewsComponent.loaders` property is an array of functions that are called to load data for the `NewsComponent` function. In this case, there is only one function that calls the `getServerSideProps` function with a `locale` of `\"en\"`. The data returned from `getServerSideProps` is then returned from the loader function. \n\nOverall, this code defines a story for the `News` component in Storybook and provides a way to load data for the component using the `getServerSideProps` function. This allows developers to develop and test the `News` component in isolation from the rest of the `ergoweb` project. \n\nExample usage:\n\n```jsx\nimport { NewsComponent } from 'ergoweb';\n\n<NewsComponent loaded={{ news: [{ title: 'Breaking News', content: 'Lorem ipsum dolor sit amet.' }] }} />\n```\n## Questions: \n 1. What is the purpose of the `News` component and how is it used in the project?\n   - The `News` component is a component used in the home page of the project and is imported in this file. It is also the main component being tested in this file.\n2. What is the purpose of the `Dark` component and how is it used in this file?\n   - The `Dark` component is a decorator used to wrap the `Story` component in a dark theme. It is used to test the `News` component in a specific theme.\n3. What is the purpose of the `NewsComponent.loaders` array and what does it contain?\n   - The `NewsComponent.loaders` array contains an async function that fetches data from the server using the `getServerSideProps` function. It is used to load data for the `News` component before rendering it.","metadata":{"source":".autodoc/docs/markdown/stories/components/home/news.stories.md"}}],["212",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/stories/components/home)\n\nThe `components/home` folder in the `ergoweb` project contains Storybook stories for various React components that are likely used on the home page of the application. These stories allow developers to develop, test, and showcase the components in isolation using the Storybook tool.\n\n1. **AutolykosComponent**: This component is defined in `autolykos.stories.jsx` and is used to display information about the project or showcase a particular feature. The `Dark` component provides a consistent dark background for the `Autolykos` component.\n\n   Example usage:\n   ```jsx\n   import AutolykosComponent from './components/home/AutolykosComponent';\n\n   function HomePage() {\n     return (\n       <div>\n         <h1>Welcome to Ergoweb</h1>\n         <AutolykosComponent title=\"About Ergoweb\" description=\"Learn more about our project\" />\n       </div>\n     );\n   }\n   ```\n\n2. **HighlightsComponent**: Defined in `highlights.stories.jsx`, this component is used to display highlights or featured content on the home page. The `Dark` component provides a contrasting dark background for the highlights.\n\n   Example usage:\n   ```jsx\n   import { HighlightsComponent } from 'ergoweb';\n\n   function HomePage() {\n     return (\n       <div>\n         <h1>Welcome to ErgoWeb</h1>\n         <HighlightsComponent \n           title=\"New Product Launch\"\n           description=\"Check out our latest product and get 10% off your first purchase!\"\n           image=\"https://example.com/product-image.jpg\"\n         />\n       </div>\n     );\n   }\n   ```\n\n3. **HomeHeroComponent**: This component is documented in `homeHero.stories.jsx` and is used to display a hero section on the home page. The `Dark` decorator provides a dark background for the `HomeHero` component in Storybook.\n\n   Example usage:\n   ```jsx\n   import { HomeHeroComponent } from 'ergoweb';\n\n   function HomePage() {\n     return (\n       <div>\n         <h1>Welcome to ErgoWeb</h1>\n         <HomeHeroComponent title=\"Discover ErgoWeb\" description=\"Explore our innovative solutions\" />\n       </div>\n     );\n   }\n   ```\n\n4. **HomeInfoComponent**: Defined in `homeInfo.stories.jsx`, this component is used to display informational content on the home page. The `Dark` component provides a dark background for the `HomeInfo` component.\n\n   Example usage:\n   ```jsx\n   import { HomeInfoComponent } from 'ergoweb';\n\n   <HomeInfoComponent \n     title=\"Welcome to ErgoWeb\"\n     description=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, urna eu bibendum bibendum, velit sapien sodales sapien, vel commodo elit elit vel elit.\"\n   />\n   ```\n\n5. **NewsComponent**: This component is documented in `news.stories.jsx` and is used to display news articles on the home page. The `Dark` component provides a dark background for the `News` component, and the `getServerSideProps` function is used to load news data.\n\n   Example usage:\n   ```jsx\n   import { NewsComponent } from 'ergoweb';\n\n   <NewsComponent loaded={{ news: [{ title: 'Breaking News', content: 'Lorem ipsum dolor sit amet.' }] }} />\n   ```\n\nThese components and their stories provide a modular and reusable structure for the home page of the `ergoweb` project. Developers can easily customize and test these components using the provided Storybook stories, ensuring a consistent and maintainable codebase.","metadata":{"source":".autodoc/docs/markdown/stories/components/home/summary.md"}}],["213",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/navigation.stories.jsx)\n\nThis code defines a storybook story for the Navigation component of the ergoweb project. Storybook is a tool used for developing UI components in isolation, allowing developers to view and interact with components outside of the context of the larger project. \n\nThe code imports the Navigation and Dark components from their respective files, as well as the ThemeProvider from the next-themes library. The ThemeProvider is used to provide a theme to the component, in this case a \"dark\" theme. \n\nThe code then defines a storybook story for the Navigation component, with a title of \"Components/Navigation\". The decorators array is used to wrap the component in additional functionality, in this case the ThemeProvider and Dark components. \n\nThe Template function is defined to render the Navigation component with the enableLanguages prop set to false. This prop likely controls whether or not language options are displayed in the navigation menu. \n\nFinally, the NavigationComponent export is defined as a bound instance of the Template function. This allows the component to be rendered in the storybook UI. \n\nOverall, this code sets up a storybook story for the Navigation component of the ergoweb project, allowing developers to view and interact with the component in isolation with a dark theme applied. The enableLanguages prop is used to control the display of language options in the navigation menu.\n## Questions: \n 1. What is the purpose of the `Dark` component being imported?\n- The `Dark` component is being used as a decorator to wrap the `Navigation` component and provide a dark theme.\n\n2. What is the significance of the `ThemeProvider` being imported from \"next-themes\"?\n- The `ThemeProvider` is used to provide a theme to the wrapped components, in this case the `Navigation` component.\n\n3. What is the purpose of the `enableLanguages` prop being passed to the `Navigation` component in the `Template` function?\n- The `enableLanguages` prop is being set to `false`, which may indicate that the `Navigation` component does not support multiple languages or language switching.","metadata":{"source":".autodoc/docs/markdown/stories/components/navigation.stories.md"}}],["214",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/post.stories.jsx)\n\nThis code exports a configuration object and a PostComponent React component. The configuration object is used to configure the Post component, which is a shared component used in the ergoweb project. The configuration object specifies the title of the component, the component itself, and a decorator function that wraps the component in a Dark component. \n\nThe PostComponent is a React component that takes in props such as title, subtitle, author, date, image, tags, and url. These props are used to render a blog post on the ergoweb website. The Template function is used to render the Post component with the props passed in as arguments. The PostComponent is then bound to the Template function with the PostComponent.args object. \n\nThis code is used to create a reusable Post component that can be used throughout the ergoweb project to display blog posts. The configuration object and the PostComponent can be imported into other files in the project and used to render blog posts with different content. \n\nExample usage:\n\n```\nimport { PostComponent } from \"../../components/shared/Post\";\n\nconst MyBlogPost = () => {\n  return (\n    <PostComponent \n      title=\"My Blog Post\"\n      subtitle=\"A great blog post about ergonomics\"\n      author=\"John Doe\"\n      date=\"2021-10-01T00:00:00.000Z\"\n      image=\"https://example.com/image.jpg\"\n      tags=\"ergonomics, health\"\n      url=\"/blog/my-blog-post\"\n    />\n  );\n};\n```\n## Questions: \n 1. What is the purpose of the `decorators` array in the export statement?\n   - The `decorators` array is used to wrap the `Post` component with the `Dark` component, which likely applies a dark theme to the post.\n2. What is the `Template` function used for?\n   - The `Template` function is used to create a reusable template for rendering the `Post` component with different props.\n3. What is the format of the `date` prop?\n   - The `date` prop is in ISO 8601 format (`\"2019-06-27T00:00:00.000Z\"`) and represents the date and time the post was published in UTC time zone.","metadata":{"source":".autodoc/docs/markdown/stories/components/post.stories.md"}}],["215",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/stories/components)\n\nThe `components` folder in the `ergoweb` project contains reusable React components and their corresponding Storybook stories. These components are designed to be easily integrated into different parts of the project, providing a consistent look and feel. The Storybook stories allow developers to develop, test, and showcase the components in isolation.\n\nFor example, the `button.stories.jsx` file exports a set of pre-configured Button components with different styles and properties. Developers can import these pre-configured buttons and use them in their components without having to define the properties each time:\n\n```jsx\nimport { ButtonWithArrow } from 'ergoweb';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ButtonWithArrow text=\"Click me!\" url=\"https://example.com\" />\n    </div>\n  );\n}\n```\n\nThe `contributeForm.stories.jsx` file exports a story for the `ContributeForm` component, which can be used to display a form for users to contribute to the project. The `Dark` component provides a dark background for the `ContributeForm` component in Storybook:\n\n```jsx\nimport { ContributeFormComponent } from 'ergoweb';\n\nfunction MyContributeForm() {\n  return (\n    <div>\n      <ContributeFormComponent />\n    </div>\n  );\n}\n```\n\nThe `footer.stories.jsx` file exports a story for the `Footer` component, which can be used to display a footer on the website. The `Dark` component provides a dark background for the `Footer` component in Storybook:\n\n```jsx\nimport { FooterComponent } from 'ergoweb';\n\nfunction MyFooter() {\n  return (\n    <div>\n      <FooterComponent />\n    </div>\n  );\n}\n```\n\nThe `navigation.stories.jsx` file exports a story for the `Navigation` component, which can be used to display a navigation menu on the website. The `Dark` component provides a dark background for the `Navigation` component in Storybook:\n\n```jsx\nimport { NavigationComponent } from 'ergoweb';\n\nfunction MyNavigation() {\n  return (\n    <div>\n      <NavigationComponent />\n    </div>\n  );\n}\n```\n\nThe `post.stories.jsx` file exports a reusable `Post` component that can be used to display blog posts on the website:\n\n```jsx\nimport { PostComponent } from \"../../components/shared/Post\";\n\nconst MyBlogPost = () => {\n  return (\n    <PostComponent \n      title=\"My Blog Post\"\n      subtitle=\"A great blog post about ergonomics\"\n      author=\"John Doe\"\n      date=\"2021-10-01T00:00:00.000Z\"\n      image=\"https://example.com/image.jpg\"\n      tags=\"ergonomics, health\"\n      url=\"/blog/my-blog-post\"\n    />\n  );\n};\n```\n\nIn summary, the `components` folder in the `ergoweb` project contains reusable React components and their corresponding Storybook stories, which allow developers to develop, test, and showcase the components in isolation. These components can be easily integrated into different parts of the project, providing a consistent look and feel.","metadata":{"source":".autodoc/docs/markdown/stories/components/summary.md"}}],["216",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/components/typography.stories.jsx)\n\nThe code above is a module that exports a default object and a named export. The default export is an object that contains metadata about a typography component, while the named export is a functional component that renders the typography component.\n\nThe metadata object contains the following properties:\n- `title`: a string that represents the title of the component, which is used for documentation and testing purposes.\n- `component`: a reference to the `Typography` component that this metadata object describes.\n- `decorators`: an array of functions that wrap the `Story` component, which is a special component provided by the Storybook library that renders the `Typography` component. In this case, the only decorator is a function that wraps the `Story` component with a `Dark` component, which is presumably a component that applies a dark theme to the `Typography` component.\n\nThe named export, `TypographyComponent`, is a functional component that simply renders the `Typography` component. This component can be imported and used in other parts of the project.\n\nOverall, this code is likely part of a larger project that uses the Storybook library to document and test UI components. The `Typography` component is likely a reusable component that is used throughout the project, and the `Dark` component is likely a theme component that can be applied to other components as well. By using Storybook to document and test these components, the project can ensure that they are consistent and functional across different parts of the application.\n## Questions: \n 1. What is the purpose of the \"Dark\" component being imported and used as a decorator?\n   - The \"Dark\" component is being used as a decorator to provide a dark background for the \"Typography\" component when it is rendered.\n\n2. What other components are being used in this project?\n   - The only other component being used in this file is the \"Typography\" component, but it is possible that other components are being used elsewhere in the project.\n\n3. What is the expected output of the \"TypographyComponent\" function?\n   - The expected output of the \"TypographyComponent\" function is the \"Typography\" component being rendered.","metadata":{"source":".autodoc/docs/markdown/stories/components/typography.stories.md"}}],["217",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/404.stories.jsx)\n\nThis code exports a default object that defines a story for a custom 404 page component in the ergoweb project. The `title` property specifies the title of the story, which is \"Pages/404\". The `component` property specifies the component to be rendered for the story, which is the `Custom404` component imported from the `../../pages/404` file.\n\nThe code also exports a named export `Custom404Page`, which is a functional component that renders the `Custom404` component. This component can be used in other parts of the ergoweb project to display a custom 404 page when a user navigates to a non-existent page.\n\nFor example, in a routing configuration file, the `Custom404Page` component can be specified as the component to render when a route does not match any of the defined routes. This ensures that users are presented with a user-friendly error page instead of a generic browser error message.\n\n```javascript\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Custom404Page from \"./Custom404Page\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/about\" component={AboutPage} />\n        <Route component={Custom404Page} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\nIn the above example, the `Custom404Page` component is specified as the component to render when none of the defined routes match the user's requested URL. This ensures that the user is presented with a custom 404 page instead of a generic browser error message.\n\nOverall, this code provides a reusable custom 404 page component that can be easily integrated into the ergoweb project to improve the user experience when navigating to non-existent pages.\n## Questions: \n 1. What is the purpose of the `Custom404` component being imported from \"../../pages/404\"?\n   - The `Custom404` component is being imported to be used as the component for the `404` page.\n   \n2. What is the significance of the `title` property being set to \"Pages/404\"?\n   - The `title` property is likely being used for documentation or organization purposes, as it specifies the title of the component being exported.\n\n3. Why is the `Custom404Page` exported as a function that returns `<Custom404 />`?\n   - The `Custom404Page` is being exported as a functional component that returns the `Custom404` component, likely to be used as the actual page component for the `404` route.","metadata":{"source":".autodoc/docs/markdown/stories/pages/404.stories.md"}}],["218",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/500.stories.jsx)\n\nThe code above is a module that exports a React component called `Custom500Page`. This component is used to render a custom error page for HTTP status code 500, which is a server error. The component is imported from the `../../pages/500` file, which likely contains the actual markup and styling for the error page.\n\nThe `title` property in the object being exported is used by Storybook, a tool for developing and testing UI components, to display the name of the component in the Storybook UI. The `component` property specifies the actual component being rendered.\n\nThe `Custom500Page` function is a functional component that simply returns the `Custom500` component imported earlier. This allows the `Custom500` component to be used in other parts of the project by simply importing and rendering the `Custom500Page` component.\n\nOverall, this code is a small but important part of the larger ergoweb project, as it provides a custom error page for server errors that is consistent with the rest of the project's UI. It also demonstrates the use of Storybook to develop and test UI components in isolation. \n\nExample usage:\n\n```jsx\nimport Custom500Page from \"./path/to/Custom500Page\";\n\nfunction App() {\n  return (\n    <div>\n      {/* other components */}\n      <Custom500Page />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the Custom500 component?\n   - The Custom500 component is a page component for displaying a 500 error page.\n\n2. Where is the Custom500 component located in the project directory?\n   - The Custom500 component is located in the `pages` directory, specifically in a subdirectory called `500`.\n\n3. How is the Custom500 component being exported and used in other parts of the project?\n   - The Custom500 component is being exported as a default export and is being used as a component in the `Custom500Page` constant, which is then used elsewhere in the project.","metadata":{"source":".autodoc/docs/markdown/stories/pages/500.stories.md"}}],["219",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/community.stories.jsx)\n\nThis code is responsible for exporting a component called `CommunityPage` and defining its properties. The `CommunityPage` component is a page in the larger `ergoweb` project that displays a community forum. The component takes in two props: `posts` and `teamMembers`, which are arrays of data that will be used to populate the forum with posts and team member information.\n\nThe `CommunityPage` component is defined using the `args` and `loaded` parameters. The `args` parameter is used to pass in any additional arguments that may be needed by the component. The `loaded` parameter is an object that contains the `posts` and `teamMembers` data that will be used to populate the forum.\n\nThe `CommunityPage` component is exported along with a `loaders` array. The `loaders` array is an array of functions that will be called when the component is loaded. In this case, there is only one function in the `loaders` array. This function is an asynchronous function that calls the `getServerSideProps` function with a locale of \"en\". The `getServerSideProps` function is a Next.js function that is used to fetch data from an external API or database. In this case, it is fetching data for the `posts` and `teamMembers` props.\n\nOverall, this code is responsible for defining the `CommunityPage` component and its properties, as well as fetching the data needed to populate the forum. This component can be used in the larger `ergoweb` project to display the community forum and allow users to interact with each other. \n\nExample usage:\n\n```\nimport CommunityPage from \"../components/CommunityPage\";\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Welcome to the Ergoweb Community Forum</h1>\n      <CommunityPage />\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n## Questions: \n 1. What is the purpose of the `Community` component being imported and used in this file?\n   - The `Community` component is being used as a prop in the `CommunityPage` function component to render the page.\n2. What data is being passed as props to the `Community` component?\n   - The `posts` and `teamMembers` data are being passed as props to the `Community` component.\n3. What is the purpose of the `CommunityPage.loaders` array and the async function inside it?\n   - The `CommunityPage.loaders` array is used to define data loading functions for the `CommunityPage` component. The async function inside it is used to fetch server-side data with the `getServerSideProps` function and return it as props for the component.","metadata":{"source":".autodoc/docs/markdown/stories/pages/community.stories.md"}}],["220",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/discover.stories.jsx)\n\nThe code above is a module that exports a React component called `DiscoverPage`. This component is used to render the `Discover` page of the `ergoweb` project. The `Discover` page is a high-level page that allows users to browse and discover content within the project. \n\nThe `export default` statement exports an object that contains two properties: `title` and `component`. The `title` property is a string that represents the title of the `Discover` page. The `component` property is a reference to the `Discover` component that is imported from the `../../pages/discover` file. \n\nThe `export const DiscoverPage` statement exports a functional component that returns the `Discover` component. This allows other modules within the `ergoweb` project to import and use the `DiscoverPage` component to render the `Discover` page. \n\nHere is an example of how the `DiscoverPage` component can be used in another module:\n\n```\nimport React from \"react\";\nimport DiscoverPage from \"./path/to/discover-page\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to the Ergoweb Project</h1>\n      <DiscoverPage />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `DiscoverPage` component is imported and used within the `App` component to render the `Discover` page within the larger `ergoweb` project. \n\nOverall, this module plays an important role in the `ergoweb` project by providing a reusable component that allows users to browse and discover content within the project.\n## Questions: \n 1. What is the purpose of the Discover component and how is it used within the project?\n   - The Discover component is a page within the project and is used to display content related to discovering new items. It is imported and rendered in other parts of the project using the `DiscoverPage` component.\n\n2. What is the file path for the `Discover` component being imported?\n   - The `Discover` component is being imported from a file located at `../../pages/discover`.\n\n3. Are there any other components or modules being exported from this file?\n   - No, there is only one default export which is an object containing the `title` and `component` properties, as well as a named export for the `DiscoverPage` component.","metadata":{"source":".autodoc/docs/markdown/stories/pages/discover.stories.md"}}],["221",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/ecosystem.stories.jsx)\n\nThis code exports a React component called `EcosystemPage` that renders the `Ecosystem` component from the `../../pages/ecosystem` file. The purpose of this code is to provide a way to render the `Ecosystem` component as a standalone page within the larger project. \n\nThe `title` property is used by the Storybook tool to display the name of the component in the UI. The `component` property specifies the component that will be rendered in the Storybook preview pane. \n\nThe `EcosystemPage` component is a functional component that simply renders the `Ecosystem` component. This allows the `Ecosystem` component to be easily reused in other parts of the project, while also providing a standalone page for users to view the ecosystem data. \n\nHere is an example of how this code might be used in the larger project:\n\n```jsx\nimport React from \"react\";\nimport EcosystemPage from \"./components/EcosystemPage\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to the Ergoweb Ecosystem</h1>\n      <EcosystemPage />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn this example, the `EcosystemPage` component is imported and rendered within the `App` component. This allows the `Ecosystem` component to be displayed as a standalone page within the larger Ergoweb project.\n## Questions: \n 1. What is the purpose of the `Ecosystem` component being imported?\n- The `Ecosystem` component is being imported from the `../../pages/ecosystem` file for use in this module.\n\n2. What is the significance of the `title` and `component` properties in the exported object?\n- The `title` property is used to set the title of the page in the UI, while the `component` property is used to specify the component that should be rendered for this page.\n\n3. What is the purpose of the `EcosystemPage` constant being exported?\n- The `EcosystemPage` constant is being exported as a named export and is used to render the `Ecosystem` component on the page.","metadata":{"source":".autodoc/docs/markdown/stories/pages/ecosystem.stories.md"}}],["222",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/get-ergo.stories.jsx)\n\nThis code exports a React component called `GetErgPage` that renders the `GetErg` component. The `GetErg` component is imported from a file located at `../../pages/get-erg`. The purpose of this component is not clear from this code alone, but it is likely related to retrieving data from an API or server.\n\nThe `GetErgPage` component takes two arguments: `args` and an object with a `loaded` property that contains an `exchanges` array. The `exchanges` array is passed as a prop to the `GetErg` component.\n\nThe `GetErgPage` component also has a `loaders` property that is an array containing a single async function. This function retrieves data from the server using the `getServerSideProps` function, passing in a `locale` of \"en\". The returned data is then extracted and returned as props for the component.\n\nThis code is likely used in the larger project to display data retrieved from a server or API in the `GetErg` component. The `GetErgPage` component may be used as a page in the project, with the `loaders` function being used to retrieve data before rendering the page. An example usage of this component may look like:\n\n```\nimport GetErgPage from \"../components/GetErgPage\";\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Welcome to the Ergoweb Project</h1>\n      <GetErgPage />\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\nIn this example, the `GetErgPage` component is rendered on the `HomePage`, displaying data retrieved from the server.\n## Questions: \n 1. **What is the purpose of the `GetErg` component?** \nA smart developer might ask this question to understand the functionality of the code. Based on the code provided, it seems that the `GetErg` component is being imported and rendered on the `GetErgPage` component.\n\n2. **What is the `loaded` object and where does it come from?** \nA smart developer might ask this question to understand the source of the `loaded` object being used in the `GetErgPage` component. Based on the code provided, it seems that the `loaded` object is being passed as the second argument to the `GetErgPage` function.\n\n3. **What is the purpose of the `loaders` array and how is it being used?** \nA smart developer might ask this question to understand the role of the `loaders` array in the code. Based on the code provided, it seems that the `loaders` array is being used to asynchronously load data for the `GetErgPage` component using the `getServerSideProps` function.","metadata":{"source":".autodoc/docs/markdown/stories/pages/get-ergo.stories.md"}}],["223",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/home.stories.jsx)\n\nThis code is responsible for exporting a component called `HomePage` that renders the `Home` component from the `../../pages/index` file. The `HomePage` component receives props such as `posts`, `partners`, `news`, `info`, and `blockReward` from a higher-order component. \n\nThe `HomePage` component also has a `loaders` property that is an array containing an asynchronous function. This function uses the `getServerSideProps` function from the `../../pages/index` file to fetch data from the server-side and return it as props to the `HomePage` component. The `locale` parameter is passed to the `getServerSideProps` function to specify the language of the data to be fetched.\n\nThis code is likely part of a larger project that involves rendering a homepage for a website or web application. The `Home` component is likely a reusable component that is used throughout the project to render the homepage. The `HomePage` component is a specific instance of the `Home` component that receives data from a higher-order component and uses it to render the homepage.\n\nHere is an example of how the `HomePage` component might be used in a larger project:\n\n```\nimport React from \"react\";\nimport HomePage from \"./components/HomePage\";\n\nconst App = () => {\n  const data = {\n    posts: [...],\n    partners: [...],\n    news: [...],\n    info: {...},\n    blockReward: 100,\n  };\n\n  return <HomePage loaded={data} />;\n};\n\nexport default App;\n```\n\nIn this example, the `App` component renders the `HomePage` component and passes in data as a prop. The `HomePage` component uses this data to render the homepage. The `loaders` property in the `HomePage` component ensures that the data is fetched from the server-side before the component is rendered.\n## Questions: \n 1. What is the purpose of the `HomePage` function and what are the arguments it takes in?\n- The `HomePage` function is a component that renders the `Home` component with data passed in as props. It takes in `args` and a destructured object with properties `loaded` that contains data for `posts`, `partners`, `news`, `info`, and `blockReward`.\n\n2. What is the significance of the `HomePage.loaders` array and what does it contain?\n- The `HomePage.loaders` array contains an asynchronous function that retrieves data from the server-side props of the `Home` page with the locale set to \"en\". This data is then returned as props for the `HomePage` component.\n\n3. What is the purpose of the `export default` statement and what does it export?\n- The `export default` statement exports an object with properties `title` and `component`. The `title` property is a string that sets the title of the storybook page for the `Home` component, while the `component` property is the `Home` component itself.","metadata":{"source":".autodoc/docs/markdown/stories/pages/home.stories.md"}}],["224",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/legal.stories.jsx)\n\nThe code above is a module that exports a default object with properties related to the Legal page of the ergoweb project. The purpose of this module is to provide a way to import and use the Legal page component in other parts of the project.\n\nThe `import` statement at the beginning of the code imports the `Legal` component from the `../../pages/legal` file. This means that the `Legal` component is located in a file that is two directories up from the current file.\n\nThe exported object has two properties: `title` and `component`. The `title` property is a string that represents the title of the Legal page. The `component` property is a reference to the `Legal` component that was imported at the beginning of the code.\n\nThe `export const LegalPage` statement exports a new component called `LegalPage`. This component is a functional component that simply renders the `Legal` component that was imported earlier. This allows other parts of the project to import and use the `LegalPage` component instead of directly importing and using the `Legal` component.\n\nHere is an example of how this module might be used in the larger project:\n\n```\nimport { LegalPage } from \"../components/legalPage\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to my website</h1>\n      <LegalPage />\n    </div>\n  );\n}\n```\n\nIn this example, the `LegalPage` component is imported from the `../components/legalPage` file and used in the `App` component. This allows the Legal page to be easily included in the website without having to directly import and use the `Legal` component.\n## Questions: \n 1. What is the purpose of the `Legal` component being imported?\n- The `Legal` component is being imported from a file located at `../../pages/legal`.\n\n2. What is the significance of the `title` and `component` properties in the exported object?\n- The `title` property specifies the title of the page and the `component` property specifies the component that should be rendered for this page.\n\n3. What is the purpose of the `LegalPage` constant being exported?\n- The `LegalPage` constant is a functional component that renders the `Legal` component. It is likely used to render the `Legal` page in the application.","metadata":{"source":".autodoc/docs/markdown/stories/pages/legal.stories.md"}}],["225",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/post.stories.jsx)\n\nThis code exports a storybook story for the `Post` component, which is located in the `../../pages/blog/[id]` file. The `Post` component is used to display a blog post on the website. \n\nThe `PostPage` function is the main component that is exported. It takes two arguments: `args` and `{ loaded: { post } }`. The `args` argument is used to pass any props to the `Post` component, while the `{ loaded: { post } }` argument is used to pass the `post` object to the `Post` component. \n\nThe `PostPage` function is used to render the `Post` component with the `post` object passed as a prop. This function is used in the storybook story to display the `Post` component with sample data. \n\nThe `PostPage.story` object is used to set the parameters for the storybook story. In this case, the `nextRouter` object is used to set the path, asPath, and query parameters for the story. This is used to simulate the behavior of the `Post` component when it is rendered on the website. \n\nThe `PostPage.loaders` array is used to define the data loading function for the `Post` component. In this case, the `getServerSideProps` function is used to fetch the data for the `Post` component. The `getServerSideProps` function takes a query object as an argument, which is used to fetch the data for the specific blog post. \n\nOverall, this code is used to define the storybook story for the `Post` component and to set the data loading function for the component. This allows developers to test and preview the `Post` component with sample data in the storybook environment.\n## Questions: \n 1. What is the purpose of the `Post` component being imported and used in this file?\n- The `Post` component is being used as a component in this file and is also being passed as a prop to the `PostPage` component.\n\n2. What is the `nextRouter` parameter in the `PostPage` story used for?\n- The `nextRouter` parameter is used to define the path, asPath, and query for the Next.js router when rendering the `PostPage` component.\n\n3. What is the purpose of the `loaders` array in the `PostPage` component?\n- The `loaders` array is used to define an asynchronous function that retrieves data for the `PostPage` component using the `getServerSideProps` function and returns the props for the component.","metadata":{"source":".autodoc/docs/markdown/stories/pages/post.stories.md"}}],["226",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/stories/pages/privacy-policy.stories.jsx)\n\nThe code above is a module that exports a default object containing a title and a component. The title is a string that describes the purpose of the component, which is a privacy policy page. The component is imported from a file located at \"../../pages/privacy-policy\". \n\nThe purpose of this code is to define the PrivacyPolicy component and make it available for use in other parts of the project. The PrivacyPolicy component is a page that displays the privacy policy for the ergoweb project. \n\nThe code also exports a named export called PrivacyPolicyPage, which is a function component that returns the PrivacyPolicy component. This named export can be used to render the PrivacyPolicy component in other parts of the project. \n\nFor example, if we wanted to render the PrivacyPolicy component in a different page, we could import the PrivacyPolicyPage function and use it in our JSX code like this:\n\n```\nimport { PrivacyPolicyPage } from \"../path/to/privacy-policy-page\";\n\nfunction MyPage() {\n  return (\n    <div>\n      <h1>Welcome to My Page</h1>\n      <PrivacyPolicyPage />\n    </div>\n  );\n}\n```\n\nIn this example, we import the PrivacyPolicyPage function from its file and use it in the JSX code for the MyPage component. This will render the PrivacyPolicy component on the MyPage component. \n\nOverall, this code defines the PrivacyPolicy component and makes it available for use in other parts of the ergoweb project. It also provides a named export that can be used to render the PrivacyPolicy component in other pages or components.\n## Questions: \n 1. **What is the purpose of the `PrivacyPolicy` component?**  \nThe `PrivacyPolicy` component is likely a page that displays the privacy policy for the ergoweb project.\n\n2. **Why is the component being exported as `PrivacyPolicyPage`?**  \nThe `PrivacyPolicyPage` export is likely being used to make the component available for use in other parts of the project.\n\n3. **What is the significance of the `title` property in the default export?**  \nThe `title` property is likely being used to provide a title for the `PrivacyPolicy` component when it is displayed in the ergoweb project's documentation or other related tools.","metadata":{"source":".autodoc/docs/markdown/stories/pages/privacy-policy.stories.md"}}],["227",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/stories/pages)\n\nThe `.autodoc/docs/json/stories/pages` folder contains various story files for different pages of the ergoweb project. These files are used in conjunction with Storybook, a tool for developing and testing UI components in isolation. Each file exports a default object with a `title` and a `component` property, as well as a named export that renders the respective page component.\n\nFor example, the `404.stories.jsx` file exports a story for a custom 404 page component. The `Custom404Page` component can be used in the project's routing configuration to display a custom 404 page when a user navigates to a non-existent page:\n\n```javascript\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Custom404Page from \"./Custom404Page\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/about\" component={AboutPage} />\n        <Route component={Custom404Page} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\nSimilarly, the `500.stories.jsx` file exports a `Custom500Page` component that can be used to display a custom error page for server errors. The `community.stories.jsx` file exports a `CommunityPage` component that displays a community forum, taking in `posts` and `teamMembers` as props to populate the forum.\n\nOther files in this folder, such as `discover.stories.jsx`, `ecosystem.stories.jsx`, and `get-ergo.stories.jsx`, export components for different pages of the ergoweb project. These components can be imported and used in other parts of the project to render the respective pages.\n\nFor instance, the `DiscoverPage` component from `discover.stories.jsx` can be used as follows:\n\n```jsx\nimport React from \"react\";\nimport DiscoverPage from \"./path/to/discover-page\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to the Ergoweb Project</h1>\n      <DiscoverPage />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn summary, the code in the `.autodoc/docs/json/stories/pages` folder provides reusable components for different pages of the ergoweb project. These components can be easily integrated into the project and used in various parts of the application. The use of Storybook allows developers to test and preview these components in isolation, ensuring a consistent and high-quality user interface.","metadata":{"source":".autodoc/docs/markdown/stories/pages/summary.md"}}],["228",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/stories)\n\nThe `.autodoc/docs/json/stories` folder contains Storybook stories for the `ergoweb` project, which is a tool for developing and testing UI components in isolation. This folder is organized into two subfolders: `components` and `pages`.\n\nThe `components` subfolder contains reusable React components and their corresponding Storybook stories. These components can be easily integrated into different parts of the project, providing a consistent look and feel. For example, the `button.stories.jsx` file exports a set of pre-configured Button components with different styles and properties:\n\n```jsx\nimport { ButtonWithArrow } from 'ergoweb';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ButtonWithArrow text=\"Click me!\" url=\"https://example.com\" />\n    </div>\n  );\n}\n```\n\nThe `pages` subfolder contains story files for different pages of the ergoweb project. Each file exports a default object with a `title` and a `component` property, as well as a named export that renders the respective page component. For instance, the `DiscoverPage` component from `discover.stories.jsx` can be used as follows:\n\n```jsx\nimport React from \"react\";\nimport DiscoverPage from \"./path/to/discover-page\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to the Ergoweb Project</h1>\n      <DiscoverPage />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn summary, the code in the `.autodoc/docs/json/stories` folder provides reusable components and pages for the ergoweb project. These components and pages can be easily integrated into the project and used in various parts of the application. The use of Storybook allows developers to test and preview these components in isolation, ensuring a consistent and high-quality user interface.","metadata":{"source":".autodoc/docs/markdown/stories/summary.md"}}],["229",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/_variables.scss)\n\nThis code defines variables for different screen sizes in pixels. These variables can be used throughout the project to ensure that the layout and design of the website is optimized for different screen sizes. \n\nFor example, if a developer wants to set the font size for a specific element to be larger on larger screens, they can use a media query with the $lg variable to target screens with a width of 1024px or larger:\n\n```\n@media only screen and (min-width: $lg) {\n  .element {\n    font-size: 24px;\n  }\n}\n```\n\nThis code can also be used in conjunction with a CSS preprocessor like Sass to make it easier to write and maintain stylesheets. By defining variables for screen sizes, developers can avoid hard-coding specific pixel values throughout their code, making it easier to update and modify the design of the website in the future.\n\nOverall, this code serves as a foundation for responsive design in the ergoweb project, allowing developers to create a website that looks and functions well on a variety of different devices and screen sizes.\n## Questions: \n 1. **What is the purpose of these variables?**\\\nA smart developer might wonder what these variables are used for and how they are relevant to the ergoweb project. These variables are likely used for defining breakpoints for responsive design, allowing the website to adjust its layout based on the user's screen size.\n\n2. **How are these variables used in the project?**\\\nA smart developer might want to know how these variables are implemented in the ergoweb project. They may be used in CSS media queries to apply different styles based on the screen size, or in JavaScript to trigger certain functions based on the user's device.\n\n3. **Are there any other variables or constants used in the project?**\\\nA smart developer might be curious if there are any other variables or constants used in the ergoweb project, and how they are defined and utilized. It's possible that there are other variables used for color schemes, font sizes, or other design elements that are not shown in this code snippet.","metadata":{"source":".autodoc/docs/markdown/styles/_variables.md"}}],["230",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/blog.scss)\n\nThe code above defines the styling for the blog page of the Ergoweb project. It sets the position, size, and background images for three blog frames, two blur effects, and a blog post. It also includes media queries to adjust the styling for different screen sizes.\n\nThe `blog-frame-1` class defines the styling for the main blog frame. It sets the position to absolute, the width to 527px, the height to 283px, and the background image to \"/assets/blog/frame-1-light.png\". It also applies a drop shadow filter. The `dark` class modifies the styling for the dark mode of the website by changing the background image to \"/assets/blog/frame-1.png\".\n\nThe `blog-frame-2` and `blog-frame-3` classes define the styling for the two smaller blog frames. They set the position to absolute, the width to 185px, the height to 1265px, and the background image to \"/assets/blog/frame-2.png\". The `dark` class modifies the styling for the dark mode of the website by keeping the same background image.\n\nThe `blog-blur-1` and `blog-blur-2` classes define the styling for the two blur effects. They set the position to absolute, the width and height to specific values, and the background image to \"/assets/blog/blur-1.svg\" and \"/assets/blog/blur-2.svg\", respectively. The `dark` class modifies the styling for the dark mode of the website by keeping the same background image.\n\nThe `blog-post` class sets the maximum width of the blog post to 384px.\n\nThe media queries adjust the styling for different screen sizes. For screens with a maximum width of `$lg`, the `blog-frame-1` class is scaled down and moved to the left. For screens with a maximum width of `$md` and `$xs`, the `blog-frame-1`, `blog-frame-2`, and `blog-frame-3` classes are scaled down and moved to specific positions. The `blog-blur-1` and `blog-blur-2` classes are also scaled down and moved to specific positions.\n\nOverall, this code defines the styling for the blog page of the Ergoweb project and ensures that it is responsive to different screen sizes. It can be used in conjunction with other code files to create a fully functional blog page.\n## Questions: \n 1. What is the purpose of the `@import \"./_variables.scss\";` statement at the beginning of the code?\n- This statement imports variables from a separate Sass file called `_variables.scss`, which can be used throughout the rest of the code.\n\n2. What is the significance of the `.dark` class in relation to the `.blog-frame-1`, `.blog-frame-2`, and `.blog-frame-3` classes?\n- The `.dark` class is used to apply different styles to the frames when the page is in \"dark mode\". In this case, the background image for the frames changes.\n\n3. What is the purpose of the media queries at the end of the code?\n- The media queries adjust the styles of the frames and blur effects based on the size of the screen. This allows the layout to be responsive and adapt to different devices.","metadata":{"source":".autodoc/docs/markdown/styles/blog.md"}}],["231",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/community.scss)\n\nThe code above is responsible for styling the community page of the Ergoweb project. It defines the position, size, and background image of various frames and blurs that are used to create the visual layout of the page. \n\nThe code is divided into several sections, each of which defines the properties of a specific frame or blur. Each section begins with a class selector that identifies the HTML element to which the styles should be applied. For example, the first section targets an element with the class \"community-frame-1\". \n\nWithin each section, there are several CSS properties that define the appearance of the element. These include \"position\", which specifies the positioning of the element relative to its parent container, \"width\" and \"height\", which set the size of the element, and \"background\", which sets the background image of the element. \n\nIn addition to the basic styles, there are also several media queries that adjust the positioning and scaling of the elements based on the size of the viewport. For example, the \".community-frame-8\" element is scaled down and repositioned when the viewport width is less than the value of the \"$xl\" variable. \n\nOverall, this code is an important part of the Ergoweb project's community page, as it defines the visual layout of the page and ensures that it is responsive to different screen sizes. Developers working on this project would need to understand this code in order to make changes to the community page or to create new pages with a similar layout. \n\nExample usage:\n\nTo apply the styles defined in this code to an HTML element with the class \"community-frame-1\", you would add the following code to your CSS file:\n\n```\n.community-frame-1 {\n  position: absolute;\n  width: 1465px;\n  height: 324px;\n  top: 0px;\n  right: 0px;\n  background: no-repeat url(\"/assets/community/frame-1-light.png\");\n}\n```\n## Questions: \n 1. What is the purpose of the `@import \"./_variables.scss\";` statement at the beginning of the code?\n- This statement imports variables from another file called `_variables.scss` which can be used throughout the code.\n\n2. What is the purpose of the media queries at the end of the code?\n- The media queries adjust the positioning and scaling of the elements based on the screen size, allowing the layout to be responsive.\n\n3. What is the significance of the `.dark` class used in some of the CSS selectors?\n- The `.dark` class is used to apply different styles to the elements when the page is in a dark mode or low-light setting.","metadata":{"source":".autodoc/docs/markdown/styles/community.md"}}],["232",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/discover.scss)\n\nThe code above defines the styles for the discover section of the ergoweb project. The discover section is composed of three frames and two blurred images. The frames are positioned absolutely and have different sizes and backgrounds. The first frame has a light background, while the second and third frames have a dark background. The blurred images are also positioned absolutely and have different sizes and backgrounds. The first blurred image has a light background, while the second blurred image has a fixed background. The mix-blend-mode property is used to blend the first blurred image with the background.\n\nThe code also includes media queries to adjust the styles for different screen sizes. For screens smaller than the medium breakpoint, the first frame is hidden, and the second and third frames are scaled down. The blurred images are also hidden, except for the third blurred image, which is positioned differently. For screens smaller than the small breakpoint, the discover image is positioned differently, and the discover container has a different margin.\n\nThis code is used to define the styles for the discover section of the ergoweb project. The discover section is an important part of the project, as it showcases the features and benefits of the product. The different frames and blurred images are used to create a visually appealing and informative section that engages the user. The media queries ensure that the section is responsive and looks good on different screen sizes. Overall, this code plays an important role in creating a great user experience for the ergoweb project.\n## Questions: \n 1. What is the purpose of the `mix-blend-mode` property used in `.discover-blur-1` and `.dark .discover-blur-1` classes?\n   \n   The `mix-blend-mode` property is used to blend the background image with the overlay image in a specific way, as specified by the `overlay` and `unset` values.\n\n2. What is the purpose of the `transform` and `transform-origin` properties used in the `.discover-frame-2` and `.discover-frame-3` classes within the `@media screen and (max-width: $md)` rule?\n   \n   The `transform` property is used to scale down the size of the elements, while the `transform-origin` property is used to specify the point from which the scaling should occur.\n\n3. What is the purpose of the `svg` element within the `.discover-img` class within the `@media screen and (max-width: $sm)` rule?\n   \n   The `svg` element is used to specify the dimensions and position of an SVG image within the `.discover-img` container element.","metadata":{"source":".autodoc/docs/markdown/styles/discover.md"}}],["233",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/ecosystem.scss)\n\nThis code defines the styling for various elements related to the ecosystem feature of the Ergoweb project. The code is written in Sass, a preprocessor for CSS, and is organized into different classes based on the type of element being styled. \n\nThe `ecosystem-frame-1`, `ecosystem-frame-2`, and `ecosystem-frame-3` classes define the styling for three different frames that are displayed on the page. These frames have different dimensions and backgrounds, and are positioned absolutely on the page. The `dark` class is used to define the styling for these frames when the page is in dark mode. \n\nThe `ecosystem-frame-4` and `ecosystem-frame-5` classes are hidden by default, but are displayed when the screen size is below a certain threshold. These frames have different dimensions and backgrounds, and are positioned absolutely on the page. The `dark` class is used to define the styling for these frames when the page is in dark mode. \n\nThe `ecosystem-blur-1` and `ecosystem-blur-2` classes define the styling for two different blurred backgrounds that are displayed on the page. These backgrounds have different dimensions and are positioned absolutely on the page. The `dark` class is used to define the styling for `ecosystem-blur-2` when the page is in dark mode. \n\nThe `ecosystem-blur-3` class is displayed when the screen size is below a certain threshold. This background has different dimensions and is positioned absolutely on the page. The `dark` class is used to define the styling for this background when the page is in dark mode. \n\nOverall, this code is responsible for defining the styling for various elements related to the ecosystem feature of the Ergoweb project. These elements include frames and blurred backgrounds that are displayed on the page. The code is organized into different classes based on the type of element being styled, and uses the `dark` class to define the styling for these elements when the page is in dark mode. \n\nExample usage:\n```html\n<div class=\"ecosystem-frame-1\"></div>\n<div class=\"ecosystem-frame-2\"></div>\n<div class=\"ecosystem-frame-3\"></div>\n<div class=\"ecosystem-frame-4\"></div>\n<div class=\"ecosystem-frame-5\"></div>\n<div class=\"ecosystem-blur-1\"></div>\n<div class=\"ecosystem-blur-2\"></div>\n<div class=\"ecosystem-blur-3\"></div>\n```\n## Questions: \n 1. What is the purpose of the `@import \"./_variables.scss\";` statement at the beginning of the code?\n   \n   This statement imports the `_variables.scss` file into the current file, which contains variables that can be used throughout the code.\n\n2. What is the significance of the `@media` queries in this code?\n   \n   The `@media` queries define styles that apply only when the screen size is below a certain width, allowing for responsive design.\n\n3. What is the purpose of the `.dark` class used in some of the CSS selectors?\n   \n   The `.dark` class is used to define styles that apply when the website is in \"dark mode\", which is likely a feature of the website that this code is a part of.","metadata":{"source":".autodoc/docs/markdown/styles/ecosystem.md"}}],["234",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/fonts.scss)\n\nThe code above is a Sass file that defines font styles and sizes for the ergoweb project. It imports a variables file that contains variables for media queries. The code defines four font families: Vinila Extended, Vinila Extended Bold, Vinila Extended Light, and Roboto. It also defines font sizes for various headings, subtitles, and body text. \n\nThe `@font-face` rule is used to define custom fonts for the project. It specifies the font family, font display, and source of the font files. The `src` property specifies the location of the font files in different formats, such as WOFF2, WOFF, TTF, and SVG. The `font-display` property specifies how the font should be displayed while it is being loaded. The `local(\"\")` value is used to prioritize locally installed fonts before loading the web font.\n\nThe code also defines styles for different elements such as headings, paragraphs, and links. It uses class selectors to target specific elements and applies styles such as font size, font family, and color. The `@media` rule is used to define styles for different screen sizes. It uses the variables defined in the variables file to specify the maximum width of the screen for each media query.\n\nThis code is used to define the typography styles for the ergoweb project. It ensures consistency in font sizes and styles across the project. The defined font families are used throughout the project to maintain a consistent look and feel. The media queries ensure that the font sizes are adjusted for different screen sizes, making the project responsive. \n\nExample usage:\n\nTo use the `Vinila Extended Bold` font family for a heading, add the following CSS code:\n\n```\nh1 {\n  font-family: \"Vinila Extended Bold\", sans-serif;\n}\n```\n\nTo use the `font-subtitle-1` class for a subtitle, add the following HTML code:\n\n```\n<h2 class=\"font-subtitle-1\">Subtitle text</h2>\n```\n## Questions: \n 1. What fonts are being used in this project?\n- The project is using four different fonts: Vinila Extended, Vinila Extended Bold, Vinila Extended Light, and Roboto.\n\n2. What is the purpose of the media queries in this file?\n- The media queries are used to adjust font sizes for different screen sizes. There are two breakpoints: `$md` and `$xs`.\n\n3. What is the purpose of the `.blog-md` and `.dark` classes?\n- The `.blog-md` class is used to style various elements within a blog post. The `.dark` class is used to apply dark mode styles to the same elements within a blog post.","metadata":{"source":".autodoc/docs/markdown/styles/fonts.md"}}],["235",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/geterg.scss)\n\nThe code above is a collection of CSS classes that define the positioning and styling of various elements in the Ergoweb project. Specifically, these classes define the positioning and styling of different frames and blur effects used in the project. \n\nThe `geterg-frame-1` class defines the positioning and background image of the first frame. The `dark` class modifies the positioning and background image of the first frame when the page is in dark mode. The `parent` class defines the positioning of the parent element of the frames. The `hideOverflow` class hides any overflow of the parent element. \n\nThe `geterg-frame-2` class defines the positioning and background image of the second frame. The `dark` class modifies the positioning and background image of the second frame when the page is in dark mode. \n\nThe `geterg-frame-3` class defines the positioning and background image of the third frame. The `dark` class modifies the positioning and background image of the third frame when the page is in dark mode. \n\nThe `geterg-frame-4` class defines the positioning and background image of the fourth frame. The `dark` class modifies the positioning and background image of the fourth frame when the page is in dark mode. \n\nThe `geterg-frame-5` class defines the positioning and background image of the fifth frame. The `dark` class modifies the positioning and background image of the fifth frame when the page is in dark mode. \n\nThe `geterg-blur-1` class defines the positioning and background image of the first blur effect. The `geterg-blur-2` class defines the positioning and background image of the second blur effect. The `dark` class modifies the positioning and background image of the second blur effect when the page is in dark mode. The `geterg-blur-3` class defines the positioning and background image of the third blur effect.\n\nThe code also includes media queries that modify the positioning and scaling of the frames and blur effects based on the screen size. For example, the `@media screen and (max-width: $md)` query scales down the size of the frames and blur effects when the screen width is less than or equal to the `$md` variable. \n\nOverall, this code is an essential part of the Ergoweb project as it defines the positioning and styling of various elements used in the project. Developers working on the project can use these classes to modify the appearance of the frames and blur effects as needed.\n## Questions: \n 1. What is the purpose of the `mix-blend-mode` property used in some of the classes?\n- The `mix-blend-mode` property is used to specify how an element's content should blend with its background.\n\n2. What is the purpose of the media queries used in this file?\n- The media queries are used to apply different styles to the elements based on the screen size of the device being used to view the page.\n\n3. What is the purpose of the `transform` and `transform-origin` properties used in some of the classes?\n- The `transform` property is used to apply transformations such as scaling, rotating, or translating an element. The `transform-origin` property is used to specify the point around which the transformation should be applied.","metadata":{"source":".autodoc/docs/markdown/styles/geterg.md"}}],["236",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/globals.scss)\n\nThis code is responsible for styling various components and elements within the ErgoWeb project. It primarily uses Tailwind CSS, a popular utility-first CSS framework, and imports several SCSS files for different sections of the project, such as home, community, blog, and more.\n\nThe code defines several custom CSS classes for specific purposes, such as adding shadows to elements, styling the Swiper carousel, hiding scrollbars, and formatting text in blog posts. For example, the `.themeShadow` class applies a drop-shadow effect to an element, while the `.swiper-button-next` and `.swiper-button-prev` classes style the navigation buttons of the Swiper carousel.\n\nThe code also includes media queries to ensure responsive design and adapt the styling for different screen sizes. For instance, the `.legal-frame-1` and `.legal-blur-1` classes are hidden on screens with a width smaller than the `$md` breakpoint.\n\nAdditionally, the code handles the styling for dark mode by using the `.dark` class. Elements with this class applied will have their colors and backgrounds adjusted to suit a dark theme.\n\nHere's an example of how the `.themeShadow` class can be used:\n\n```html\n<div class=\"themeShadow\">\n  <!-- Content with a shadow effect -->\n</div>\n```\n\nOverall, this code plays a crucial role in defining the visual appearance and user experience of the ErgoWeb project, ensuring a consistent and responsive design across different sections and devices.\n## Questions: \n 1. **What is the purpose of the different imported SCSS files?**\n\n   The imported SCSS files are individual stylesheets for different components or sections of the ErgoWeb project. They are imported to keep the code modular and organized, making it easier to maintain and update the styles for specific parts of the project.\n\n2. **What are the different classes used for shadows and how do they differ?**\n\n   There are several classes used for applying shadows to elements, such as `.themeShadow`, `.highlightsShadow`, `.homeInfo-shadow`, and `.input-shadow`. Each class applies a different type and intensity of shadow, using the `box-shadow` or `drop-shadow` CSS properties. The differences between these classes are the values used for the shadow properties, such as color, blur radius, and offset.\n\n3. **What is the purpose of the `.dark` class and how is it used in the code?**\n\n   The `.dark` class is used to apply dark mode styles to elements in the ErgoWeb project. It is used in combination with other classes to override the default styles and apply dark mode-specific styles, such as changing background colors, text colors, and box shadows. This is done by using the `.dark` class as a parent selector, followed by the specific element or class that needs to be styled for dark mode.","metadata":{"source":".autodoc/docs/markdown/styles/globals.md"}}],["237",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/home.scss)\n\nThis file contains CSS code that defines the styling for various elements on the homepage of the ergoweb project. The purpose of this code is to create a visually appealing and responsive design for the homepage. \n\nThe code defines the styling for several elements, including frames and blur effects. Each element is positioned absolutely on the page and given a specific width and height. The frames are given a background image and a drop shadow effect, while the blur effects are given a background image and a blur filter. \n\nThe code also includes media queries that adjust the styling of the elements based on the screen size. For example, when the screen size is smaller, some elements are hidden and others are scaled down. \n\nOverall, this code is an important part of the ergoweb project as it defines the visual design of the homepage. It can be used to ensure that the homepage looks consistent and professional across different devices and screen sizes. \n\nExample usage:\n```html\n<div class=\"home-frame-1\"></div>\n<div class=\"home-blur-1\"></div>\n```\n## Questions: \n 1. What is the purpose of the `@import \"./_variables.scss\";` statement at the beginning of the file?\n- This statement imports the `_variables.scss` file into the current file, allowing the use of variables defined in that file throughout this file.\n\n2. What is the purpose of the media queries at the end of the file?\n- The media queries adjust the styles of certain elements based on the screen size of the device being used to view the website. This allows for a responsive design that looks good on screens of different sizes.\n\n3. What is the purpose of the `z-index` property used in some of the CSS rules?\n- The `z-index` property determines the stacking order of elements on the page. Elements with a higher `z-index` value will appear on top of elements with a lower `z-index` value. This is useful for controlling the layering of elements in a complex layout.","metadata":{"source":".autodoc/docs/markdown/styles/home.md"}}],["238",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/markdown-body.scss)\n\nThe code above is a CSS file that defines the styling for the ergoweb project's documentation website. It sets the font family, size, and line height for the text, as well as the styles for headings, paragraphs, lists, tables, and images. \n\nThe file also includes styles for links, including the colors for normal and absent links, and the styles for anchor tags used for linking to specific sections of the documentation. \n\nAdditionally, the file defines styles for code snippets and preformatted text, including the background color, border, and font size. \n\nOverall, this file is an important component of the ergoweb project's documentation website, as it ensures a consistent and readable style across all pages. Developers working on the project can use the defined styles to ensure their documentation is presented in a clear and professional manner. \n\nExample usage:\n```\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"path/to/ergoweb.css\">\n</head>\n```\n## Questions: \n 1. What is the purpose of this code?\n   \n   This code defines the styling for various HTML elements such as headings, paragraphs, lists, tables, and images.\n\n2. What is the font family and size used in this code?\n   \n   The font family used is Helvetica, Arial, sans-serif and the font size is 14px.\n\n3. What is the purpose of the media queries in this code?\n   \n   The media queries are used to apply specific styles to the HTML elements based on the screen size. For example, when the screen size is greater than or equal to 914px, the body element is given a width of 854px and centered on the page.","metadata":{"source":".autodoc/docs/markdown/styles/markdown-body.md"}}],["239",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/not-found.scss)\n\nThis code defines the styles for a custom 404 error page for the Ergoweb project. The page is composed of several frames and blur effects that are positioned absolutely on the page. The frames are images that are loaded from the `/assets/not-found` directory and are displayed with no-repeat background properties. The blur effects are SVG images that are also loaded from the same directory.\n\nThe frames and blur effects are styled differently depending on whether the page is in \"dark\" mode or not. The `.dark` class is used to apply the dark mode styles. This is likely a feature of the larger Ergoweb project that allows users to switch between light and dark modes.\n\nThe code also includes media queries that adjust the positioning and scaling of the frames and blur effects for smaller screens. The `transform` property is used to scale and position the elements, and the `transform-origin` property is used to specify the point around which the element should be transformed.\n\nOverall, this code defines the styles for a custom 404 error page that is consistent with the design of the larger Ergoweb project. The use of absolute positioning and background images allows for a visually appealing and customizable error page. The media queries ensure that the page is responsive and looks good on screens of different sizes.\n## Questions: \n 1. What is the purpose of the `@import` statement at the beginning of the code?\n- The `@import` statement is importing the `_variables.scss` file into this file, which likely contains variables used throughout the project.\n\n2. What is the purpose of the `.dark` class in this code?\n- The `.dark` class is used to apply different background images to the frames and blurs when the page is in dark mode.\n\n3. What is the purpose of the media query at the end of the code?\n- The media query is adjusting the positioning and scaling of the frames and blurs for smaller screens, likely to ensure they still look good and fit properly on mobile devices.","metadata":{"source":".autodoc/docs/markdown/styles/not-found.md"}}],["240",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/styles)\n\nThe `.autodoc/docs/json/styles` folder contains various SCSS files that define the styling for different sections and components of the Ergoweb project. These files ensure a consistent and responsive design across the project, making it visually appealing and functional on various devices and screen sizes.\n\nFor instance, the `_variables.scss` file defines variables for different screen sizes, which can be used in media queries throughout the project to optimize the layout and design. The `blog.scss` file defines the styling for the blog page, including the positioning, size, and background images for blog frames and blur effects. The `community.scss` file is responsible for styling the community page, defining the position, size, and background image of various frames and blurs.\n\nThe `discover.scss` file defines the styles for the discover section, which showcases the features and benefits of the product. The `ecosystem.scss` file defines the styling for various elements related to the ecosystem feature, including frames and blurred backgrounds. The `fonts.scss` file defines font styles and sizes for the project, ensuring consistency in typography across the project.\n\nThe `globals.scss` file is responsible for styling various components and elements within the ErgoWeb project, primarily using the Tailwind CSS framework. It also handles the styling for dark mode by using the `.dark` class. The `home.scss` file contains CSS code that defines the styling for various elements on the homepage, creating a visually appealing and responsive design.\n\nThe `markdown-body.scss` file defines the styling for the project's documentation website, ensuring a consistent and readable style across all pages. The `not-found.scss` file defines the styles for a custom 404 error page, ensuring a visually appealing and customizable error page. The `unique-ergo.scss` file defines CSS styles for a card component that can be used throughout the project.\n\nExample usage:\n\nTo use the styles defined in the `blog.scss` file for a blog post, you would add the following HTML code:\n\n```html\n<div class=\"blog-frame-1\"></div>\n<div class=\"blog-blur-1\"></div>\n```\n\nTo use the `ecosystem-frame-1` class for an ecosystem frame, add the following HTML code:\n\n```html\n<div class=\"ecosystem-frame-1\"></div>\n```\n\nOverall, the code in this folder plays a crucial role in defining the visual appearance and user experience of the ErgoWeb project, ensuring a consistent and responsive design across different sections and devices. Developers working on the project can use these files to modify the appearance of various elements and components as needed.","metadata":{"source":".autodoc/docs/markdown/styles/summary.md"}}],["241",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/styles/unique-ergo.scss)\n\nThe code above defines CSS styles for the ergoweb project. Specifically, it defines styles for a card component that can be used throughout the project. \n\nThe `.card.active` selector defines styles for a card that is currently active. It sets the flex-grow property to 1.5, which allows the card to grow to take up more space. It also sets the margin to 0 and the max-width to 100%, which ensures that the card takes up the full width of its container. The background-color is set to white, and there is a nested `.label` selector that defines styles for a label within the card. The label is translated slightly to the right and up using the `transform` property, and its child elements are given an opacity of 1 and a transform that moves them to the right. \n\nThe `.card.active .temphide` selector defines styles for a temporary hide element within the active card. It sets the display property to block and translates the element down using the `transform` property. \n\nThe `.dark .card.active` selector defines styles for an active card when the page is in dark mode. It sets the background-color to a dark gray color. \n\nFinally, the `.transition-base` selector defines a set of transition properties that can be used throughout the project. It sets the transition duration to 700ms, the transition property to all, and the transition timing function to a cubic-bezier function that defines the speed of the transition. \n\nOverall, this code provides a set of reusable styles for a card component that can be used throughout the ergoweb project. The styles define how the card should look when it is active, how it should be hidden temporarily, and how it should look in dark mode. The transition properties defined in `.transition-base` can be used to add smooth transitions to other elements in the project.\n## Questions: \n 1. What does the `.card.active` class do?\n- The `.card.active` class sets the flex-grow property to 1.5, removes margin, sets max-width to 100%, and sets the background color to white. It also applies a transform to the `.label` class and its child elements.\n\n2. What is the purpose of the `.temphide` class?\n- The `.temphide` class sets the display property to block and applies a transform to the Y-axis, likely used for animating the element.\n\n3. What is the `transition-base` class used for?\n- The `transition-base` class sets the transition properties for all elements, including the duration, property, timing function, and easing. It is likely used to create consistent animations throughout the project.","metadata":{"source":".autodoc/docs/markdown/styles/unique-ergo.md"}}],["242",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/tailwind.config.js)\n\nThis code exports an object that configures the Tailwind CSS framework for the ergoweb project. Tailwind CSS is a utility-first CSS framework that provides pre-defined classes for common styles, such as margins, padding, and colors. \n\nThe `variants` property specifies the variants that should be generated for each utility class. In this case, the `animation` variant is defined with the `motion-safe` modifier. This means that the `motion-safe` class will be generated for each animation utility class, which will enable animations to be played when the user has enabled the \"reduce motion\" accessibility setting.\n\nThe `darkMode` property specifies that the dark mode should be enabled by adding the `class` attribute to the `body` element. This will allow the project to define styles for dark mode using the `.dark` selector.\n\nThe `content` property specifies the files that should be scanned for classes that are used in the project. This includes all JavaScript and TypeScript files in the `pages` and `components` directories, as well as all JavaScript files in the `tw-elements` package.\n\nThe `theme` property defines the project's custom theme. It includes a set of predefined screen sizes, which can be used to create responsive designs. It also includes custom styles for animations, colors, and fonts. For example, the `fadeIn` animation is defined with a `fadeIn` keyframe that fades in an element over 2 seconds. The `brand` color palette is defined with two colors, `orange` and `black`. The `fontFamily` property defines custom font families that can be used in the project.\n\nFinally, the `plugins` property specifies that the `tw-elements` plugin should be used. This plugin provides additional utility classes for common web components, such as buttons, forms, and modals.\n\nOverall, this code sets up the Tailwind CSS framework for the ergoweb project, providing a set of pre-defined classes and custom styles that can be used to create a consistent and responsive design.\n## Questions: \n 1. What is the purpose of the `variants` object in this code?\n   - The `variants` object is used to define variants for utility classes, and in this case, it defines a single variant called `motion-safe` for the `animation` utility class.\n\n2. What is the significance of the `darkMode` property?\n   - The `darkMode` property is used to enable dark mode for the project, and in this case, it is set to `'class'`, which means that the `dark` class will be added to the `body` element when dark mode is enabled.\n\n3. What is the `tw-elements` plugin used for?\n   - The `tw-elements` plugin is used to add support for custom elements in Tailwind CSS, and in this code, it is included as a plugin in the `plugins` array.","metadata":{"source":".autodoc/docs/markdown/tailwind.config.md"}}],["243",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/tsconfig.json)\n\nThis code is a configuration file for the TypeScript compiler. It specifies the options and settings that the compiler should use when compiling TypeScript code into JavaScript. \n\nThe `compilerOptions` object contains a variety of settings, including the target version of JavaScript (`es5`), the libraries that should be included (`dom`, `dom.iterable`, and `esnext`), and the type roots that should be used to find type definitions (`node_modules/@types` and `src/typings`). \n\nOther options include whether to allow JavaScript files to be compiled (`allowJs`), whether to enforce strict type checking (`strict`), and whether to use the ES module syntax (`esModuleInterop`). \n\nThe `include` and `exclude` arrays specify which files should be included or excluded from the compilation process. In this case, all TypeScript and JavaScript files should be included (`**/*.ts`, `**/*.tsx`, `**/*.js`), except for those in the `node_modules` directory. \n\nThis configuration file is an important part of the ergoweb project, as it ensures that all TypeScript code is compiled consistently and correctly. Developers working on the project can use this file as a starting point for their own TypeScript configuration, or modify it as needed to suit their specific needs. \n\nExample usage:\n\nTo compile TypeScript code using this configuration file, developers can run the following command in the terminal:\n\n```\ntsc\n```\n\nThis will compile all TypeScript files in the project using the settings specified in the `tsconfig.json` file.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file contains the compiler options for the ergoweb project.\n\n2. What version of ECMAScript is being targeted?\n- The code is targeting ECMAScript 5.\n\n3. What files are included and excluded in the compilation process?\n- The code includes all files with extensions .ts, .tsx, and .js, except those in the node_modules directory.","metadata":{"source":".autodoc/docs/markdown/tsconfig.md"}}],["244",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/utils/fade-in-section.tsx)\n\nThe code defines a React component called `FadeInSection` that fades in its child components when they become visible on the screen. This is achieved using the `IntersectionObserver` API, which allows the component to detect when it enters the viewport of the browser window. \n\nThe component takes in `props` as an argument, which can be used to pass in child components. It uses the `useState` hook to create a state variable called `isVisible`, which is initially set to `false`. The `useRef` hook is used to create a reference to the `div` element that wraps the child components. \n\nThe `useEffect` hook is used to create a new `IntersectionObserver` object, which takes a callback function as an argument. This function is called whenever the observed element enters or exits the viewport. The `forEach` method is used to iterate over the `entries` array, which contains information about each observed element. The `isIntersecting` property of each `entry` object is used to determine whether the observed element is currently visible on the screen. If it is, the `setVisible` function is called with `true` as an argument, which updates the `isVisible` state variable.\n\nThe `observer` object is then used to observe the `domRef` element, which is the `div` that wraps the child components. The `[]` argument passed to `useEffect` ensures that the observer is only created once, when the component is mounted.\n\nFinally, the component returns a `div` element with the class `fade-in-section`, which is conditionally updated with the class `is-visible` when the `isVisible` state variable is `true`. The `ref` attribute is set to `domRef`, which ensures that the `div` element is observed by the `IntersectionObserver`.\n\nThis component can be used in a larger project to add a subtle animation effect to elements as they become visible on the screen. For example, it could be used to fade in images or text blocks as the user scrolls down a page. Here is an example of how the component could be used:\n\n```\nimport FadeInSection from './FadeInSection';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <FadeInSection>\n        <img src=\"my-image.jpg\" alt=\"My Image\" />\n      </FadeInSection>\n      <FadeInSection>\n        <p>Some text that should fade in</p>\n      </FadeInSection>\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of this code?\n   This code exports a React component called `FadeInSection` that fades in its children when it becomes visible in the viewport.\n\n2. What dependencies does this code have?\n   This code imports the `React` library and uses the `IntersectionObserver` API.\n\n3. How does this code achieve the fade-in effect?\n   This code uses state and a ref to track the visibility of the component and applies a CSS class to the component when it becomes visible, triggering a CSS transition that fades in the component.","metadata":{"source":".autodoc/docs/markdown/utils/fade-in-section.md"}}],["245",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/utils/generateRssFeed.ts)\n\nThe `generateRssFeed` function is responsible for generating an RSS feed for the Ergo website. The function first fetches the latest blog posts and news articles from the Strapi API, which is a headless CMS used to manage content for the website. The fetched data is then sorted by date and combined into a single array.\n\nNext, the function creates a new instance of the `Feed` class from the `feed` package. This class is used to generate the RSS feed and takes in various parameters such as the title, description, and author of the feed. The function sets these parameters using data from the Ergo website.\n\nThe function then iterates over each post in the combined array and adds it to the feed using the `addItem` method of the `Feed` class. For each post, the function creates a URL, sets the post title, description, content, and publication date, and adds it to the feed.\n\nFinally, the function writes the generated RSS feed to two files in the `./public/rss` directory: `feed.xml` and `feed.json`. These files are used by RSS readers to display the latest content from the Ergo website.\n\nThis function is likely used as part of a larger build process for the Ergo website, where it is called to generate the RSS feed whenever new content is added or updated. The generated RSS feed can then be consumed by RSS readers to keep up to date with the latest content from the website.\n## Questions: \n 1. What is the purpose of this code?\n    \n    This code generates an RSS feed for the latest blog posts and news from the Ergo platform.\n\n2. What external dependencies does this code rely on?\n    \n    This code relies on the `fs` and `feed` modules, as well as the `showdown` module for converting markdown to HTML.\n\n3. What is the expected output of this code?\n    \n    The expected output of this code is the creation of an RSS feed in both XML and JSON formats, which will be saved to the `./public/rss` directory.","metadata":{"source":".autodoc/docs/markdown/utils/generateRssFeed.md"}}],["246",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/utils/icons-map.tsx)\n\nThe code defines a function called `getIconComponentByName` that returns an SVG icon component based on the name passed as an argument. The function takes two arguments: `name` and `props`. The `name` argument is a string that represents the name of the icon component to be returned. The `props` argument is an optional object that contains additional properties to be passed to the icon component.\n\nThe function uses an object called `ComponentsMap` to map the icon names to their corresponding components. Each key in the `ComponentsMap` object is a string that represents the name of an icon, and each value is the corresponding SVG icon component. For example, the key \"CheckDark\" maps to the `CheckDark` component from the `../components/icons` module.\n\nIf the `name` argument matches a key in the `ComponentsMap` object, the function returns the corresponding SVG icon component with any additional properties passed in the `props` argument. If the `name` argument does not match any key in the `ComponentsMap` object, the function returns `null`.\n\nThis function is likely used throughout the larger project to render SVG icons in various components. For example, a component that displays a list of items may use this function to render an icon next to each item. The component would pass the name of the icon as a prop to the `getIconComponentByName` function, and the function would return the corresponding SVG icon component to be rendered. \n\nExample usage:\n\n```\nimport { getIconComponentByName } from 'ergoweb';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Component</h1>\n      {getIconComponentByName('CheckDark', { size: 24 })}\n      <p>This is some text.</p>\n    </div>\n  );\n};\n```\n\nIn this example, the `getIconComponentByName` function is used to render the `CheckDark` SVG icon component with a size of 24 pixels. The icon is rendered between the `h1` and `p` elements.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a function that returns an SVG icon component based on the provided icon name.\n\n2. What parameters does the exported function take?\n- The exported function takes a required string parameter `name` which represents the name of the icon, and an optional `props` parameter which can be used to pass additional props to the returned icon component.\n\n3. What icons are available to be returned by the exported function?\n- The exported function contains a map of available icons, each represented by a key-value pair where the key is the name of the icon and the value is the corresponding SVG icon component.","metadata":{"source":".autodoc/docs/markdown/utils/icons-map.md"}}],["247",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/.autodoc/docs/json/utils)\n\nThe `.autodoc/docs/json/utils` folder contains utility functions and components that are used throughout the ErgoWeb project to provide various functionalities such as animations, icon rendering, and RSS feed generation.\n\n`fade-in-section.tsx` is a React component that fades in its child components when they become visible on the screen. It uses the `IntersectionObserver` API to detect when the component enters the viewport. This component can be used to add a subtle animation effect to elements as they become visible on the screen, such as images or text blocks.\n\nExample usage:\n\n```jsx\nimport FadeInSection from './FadeInSection';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <FadeInSection>\n        <img src=\"my-image.jpg\" alt=\"My Image\" />\n      </FadeInSection>\n      <FadeInSection>\n        <p>Some text that should fade in</p>\n      </FadeInSection>\n    </div>\n  );\n}\n```\n\n`generateRssFeed.ts` is a function that generates an RSS feed for the Ergo website by fetching the latest blog posts and news articles from the Strapi API, sorting them by date, and adding them to a new `Feed` instance. The generated RSS feed is then written to `feed.xml` and `feed.json` files in the `./public/rss` directory, which can be consumed by RSS readers.\n\n`icons-map.tsx` defines a function called `getIconComponentByName` that returns an SVG icon component based on the name passed as an argument. This function is used throughout the project to render SVG icons in various components.\n\nExample usage:\n\n```jsx\nimport { getIconComponentByName } from 'ergoweb';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Component</h1>\n      {getIconComponentByName('CheckDark', { size: 24 })}\n      <p>This is some text.</p>\n    </div>\n  );\n};\n```\n\n`useLoaded.ts` is a custom React hook that tracks whether a component has finished loading or not. It uses the `useState` and `useEffect` hooks to update a `loaded` state variable, which can be used by the component to conditionally render content based on the loading status.\n\nExample usage:\n\n```jsx\nimport React from 'react';\nimport { useLoaded } from 'ergoweb';\n\nconst MyComponent = () => {\n  const loaded = useLoaded();\n\n  return (\n    <div>\n      {loaded ? (\n        <p>Component has finished loading!</p>\n      ) : (\n        <p>Loading component...</p>\n      )}\n    </div>\n  );\n};\n```\n\nThese utilities and components are essential for providing a smooth user experience, managing content updates, and rendering icons throughout the ErgoWeb project.","metadata":{"source":".autodoc/docs/markdown/utils/summary.md"}}],["248",{"pageContent":"[View code on GitHub](https://github.com/ergoplatform/ergoweb/utils/useLoaded.ts)\n\nThe code above is a custom React hook called `useLoaded`. This hook is designed to track whether a component has finished loading or not. \n\nThe hook uses the `useState` hook to create a state variable called `loaded` and initializes it to `false`. It then uses the `useEffect` hook to update the `loaded` state variable to `true` when the component mounts. The `useEffect` hook is only called once, thanks to the empty dependency array passed as the second argument. \n\nFinally, the hook returns the `loaded` state variable. This allows the component using the hook to conditionally render content based on whether the component has finished loading or not. \n\nHere's an example of how this hook could be used in a larger project: \n\n```jsx\nimport React from 'react';\nimport { useLoaded } from 'ergoweb';\n\nconst MyComponent = () => {\n  const loaded = useLoaded();\n\n  return (\n    <div>\n      {loaded ? (\n        <p>Component has finished loading!</p>\n      ) : (\n        <p>Loading component...</p>\n      )}\n    </div>\n  );\n};\n```\n\nIn this example, the `MyComponent` component uses the `useLoaded` hook to conditionally render either a \"Component has finished loading!\" message or a \"Loading component...\" message. This provides a better user experience by letting the user know that the component is still loading and hasn't frozen or crashed.\n## Questions: \n 1. What is the purpose of the `useLoaded` hook?\n   - The `useLoaded` hook is used to track whether a component has finished loading or not.\n\n2. Why is `useState` used in the `useLoaded` hook?\n   - `useState` is used to create a state variable called `loaded` that is initially set to `false`. This variable is then updated to `true` when the component finishes loading.\n\n3. What is the purpose of the empty array `[]` passed as the second argument to `useEffect`?\n   - The empty array `[]` passed as the second argument to `useEffect` ensures that the effect only runs once, when the component mounts. This is because there are no dependencies specified in the array.","metadata":{"source":".autodoc/docs/markdown/utils/useLoaded.md"}}]]