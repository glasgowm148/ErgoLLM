{
  "fileName": "FullBlockProcessor.scala",
  "filePath": "src/main/scala/org/ergoplatform/nodeView/history/storage/modifierprocessors/FullBlockProcessor.scala",
  "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/nodeView/history/storage/modifierprocessors/FullBlockProcessor.scala",
  "summary": "The `FullBlockProcessor` is a part of the Ergo platform's node view history storage and is responsible for processing full blocks when they are available. It extends the `HeadersProcessor` and focuses on handling transactions and proofs while pruning modifiers older than `blocksToKeep`.\n\nThe main functionality of the `FullBlockProcessor` is to process a full block when it is available, update the storage, and calculate the best chain following a given header. It also checks if a block is linkable to an existing full chain or contains the original genesis block. The processor maintains a cache of incomplete full chains to efficiently handle non-best chains.\n\nThe `processFullBlock` method takes a `fullBlock` and a `newMod` (new modifier) as input and returns a `ProgressInfo` object required for the state to be consistent with the history. It processes the block based on three scenarios: valid first block, better chain, and non-best block.\n\nFor example, when processing a better chain, the processor finds the common block between the previous best chain and the new best chain, removes the old chain, and applies the new chain. It then updates the storage with the new best block header ID and additional indexes.\n\nThe `FullBlockProcessor` also provides methods to check if a block is in the best full chain, get the best full block ID, and get the full block for a given header. It is an essential component in the Ergo platform's node view history storage, ensuring that the node maintains an accurate and up-to-date view of the blockchain.",
  "questions": "1. **Question**: What is the purpose of the `FullBlockProcessor` trait and how does it relate to the `HeadersProcessor`?\n   \n   **Answer**: The `FullBlockProcessor` trait contains functions required by the History to process Transactions and Proofs when they are available. It also handles pruning of modifiers older than a specified number of blocks. The trait extends the `HeadersProcessor`, which means it builds upon the functionality provided by the `HeadersProcessor` and adds additional functionality specific to processing full blocks.\n\n2. **Question**: How does the `processFullBlock` function work and what is its role in the overall processing of blocks?\n\n   **Answer**: The `processFullBlock` function processes a full block when it is available. It takes a full block and a new modifier as input, calculates the best chain after the full block's header, and then processes the block accordingly. The function returns a `ProgressInfo` object, which is required for the State to process and remain consistent with the history.\n\n3. **Question**: What is the purpose of the `IncompleteFullChainCache` case class and how is it used in the `FullBlockProcessor`?\n\n   **Answer**: The `IncompleteFullChainCache` case class stores links mapping ((id, height) -> parentId) of blocks that could possibly be applied. It is used in the `FullBlockProcessor` to keep track of the blocks that are not part of the best chain but could potentially be applied in the future. The cache helps in efficiently handling non-best chains and finding the best chain when a new block is added."
}