{
  "folderName": "requests",
  "folderPath": ".autodoc/docs/json/src/main/scala/org/ergoplatform/http/api/requests",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/scala/org/ergoplatform/http/api/requests",
  "files": [
    {
      "fileName": "CryptoResult.scala",
      "filePath": "src/main/scala/org/ergoplatform/http/api/requests/CryptoResult.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/http/api/requests/CryptoResult.scala",
      "summary": "The code above defines a case class called `CryptoResult` that represents the result of reducing an `ErgoTree` for a given context. This class is used in the `/script/executeWithContext` endpoint of the Ergo HTTP API.\n\nThe `CryptoResult` class has two fields: `value` and `cost`. The `value` field is of type `SigmaBoolean` and represents the sigma-proposition that needs to be proven via a sigma-protocol. The `cost` field is of type `Long` and represents the cost of the original script.\n\nThe purpose of this code is to provide a way to execute Ergo scripts with a given context and return the result of the script execution. The `CryptoResult` class is used to encapsulate the result of the script execution, which includes the sigma-proposition that needs to be proven and the cost of the original script.\n\nHere is an example of how this code may be used in the larger Ergo project:\n\n```scala\nimport org.ergoplatform.http.api.requests.CryptoResult\nimport sigmastate.Values.SigmaBoolean\n\nval ergoTree = // create an ErgoTree\nval context = // create a context for the ErgoTree\nval result = // execute the ErgoTree with the given context\n  CryptoResult(ergoTree.reduceToSigmaBoolean(context), ergoTree.cost(context))\n```\n\nIn the example above, we create an `ErgoTree` and a context for the tree. We then execute the tree with the given context and create a `CryptoResult` object with the sigma-proposition and cost of the original script. This `CryptoResult` object can then be used to return the result of the script execution to the user.",
      "questions": "1. What is the purpose of the `CryptoResult` class?\n    \n    The `CryptoResult` class represents the result of reducing an `ErgoTree` for a given context, specifically for use in the `/script/executeWithContext` endpoint of the API. It contains a sigma-proposition and the cost of the original script.\n\n2. What is a SigmaBoolean and how is it used in this code?\n    \n    A SigmaBoolean is a type from the `sigmastate.Values` package that represents a boolean value that can be proven via a sigma-protocol. In this code, it is used as the type for the `value` parameter of the `CryptoResult` case class.\n\n3. What is the significance of the `cost` parameter in the `CryptoResult` case class?\n    \n    The `cost` parameter represents the cost of the original script that was reduced to produce the `CryptoResult`. This cost can be used to determine the amount of resources required to execute the script and can be used to optimize script execution."
    },
    {
      "fileName": "ExecuteRequest.scala",
      "filePath": "src/main/scala/org/ergoplatform/http/api/requests/ExecuteRequest.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/http/api/requests/ExecuteRequest.scala",
      "summary": "The code defines a case class called `ExecuteRequest` that represents a request to execute a script in a given context. The purpose of this code is to provide a way for users to execute ErgoScript contracts within the Ergo platform. \n\nThe `ExecuteRequest` case class takes three parameters: `script`, `env`, and `ctx`. The `script` parameter is a string that contains the ErgoScript source code of the contract to be executed. The `env` parameter is a map of named constants that are used to compile the script. Finally, the `ctx` parameter is an instance of the `ErgoLikeContext` class, which represents the execution context for the script.\n\nThis code can be used in the larger project to allow users to execute ErgoScript contracts within the Ergo platform. For example, a user could create an instance of the `ExecuteRequest` class with the appropriate parameters and then pass it to a function that executes the script. \n\nHere is an example of how this code could be used:\n\n```\nimport org.ergoplatform.http.api.requests.ExecuteRequest\nimport org.ergoplatform.ErgoLikeContext\n\n// create an instance of the ErgoLikeContext class\nval ctx = new ErgoLikeContext(...)\n\n// create a map of named constants\nval env = Map(\"x\" -> 10, \"y\" -> 20)\n\n// create an instance of the ExecuteRequest class\nval request = ExecuteRequest(\"contract code here\", env, ctx)\n\n// pass the request to a function that executes the script\nexecuteScript(request)\n```\n\nOverall, this code provides a simple and flexible way for users to execute ErgoScript contracts within the Ergo platform.",
      "questions": "1. What is the purpose of this code and how does it fit into the overall ergo project?\n- This code represents a request for executing a script in a given context within the ergo platform. It is likely part of the API for interacting with the platform.\n\n2. What is the expected format of the `env` parameter and how is it used in script compilation?\n- The `env` parameter is a map of named constants used to compile the script. The format of the constants is not specified in this code and would need to be determined from other parts of the project.\n\n3. What is the `ErgoLikeContext` class and what information does it contain?\n- The `ErgoLikeContext` class is used as the script execution context in this code. It likely contains information about the current state of the platform and any relevant data for executing the script. The specific details of this class would need to be explored further in the project documentation."
    },
    {
      "fileName": "HintExtractionRequest.scala",
      "filePath": "src/main/scala/org/ergoplatform/http/api/requests/HintExtractionRequest.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/http/api/requests/HintExtractionRequest.scala",
      "summary": "The code defines a case class called `HintExtractionRequest` that represents a request for extracting prover hints from a transaction in the Ergo platform. The request takes in several parameters including the transaction (`tx`), the real signers of transaction inputs (`real`), the simulated signers of transaction inputs (`simulated`), and optional hex-encoded input boxes bytes and data-input boxes bytes for the unsigned transaction (`inputs` and `dataInputs`, respectively).\n\nThis case class is likely used as part of the larger Ergo platform project to facilitate the creation and verification of transactions. Specifically, the `HintExtractionRequest` may be used to extract prover hints from a transaction, which can then be used to create a proof of correctness for the transaction. The `real` and `simulated` parameters are likely used to specify the actual signers of the transaction inputs and simulated signers for testing purposes, respectively.\n\nAn example use case for this code may be in a smart contract scenario where a user wants to create a transaction that satisfies certain conditions specified in the contract. The `HintExtractionRequest` can be used to extract prover hints from the transaction, which can then be used to create a proof that the transaction satisfies the contract conditions. This proof can then be verified by other nodes in the network to ensure the validity of the transaction.\n\nOverall, the `HintExtractionRequest` case class serves as an important component in the transaction creation and verification process in the Ergo platform.",
      "questions": "1. What is the purpose of this code and how is it used in the ergo project?\n- This code represents a case class for a request to extract prover hints from a transaction in the ergo project's HTTP API. It is likely used in conjunction with other code to facilitate the extraction of these hints.\n\n2. What is the significance of the `real` and `simulated` parameters in the `HintExtractionRequest` case class?\n- The `real` and `simulated` parameters represent the real and simulated signers of the transaction inputs, respectively. These parameters are likely used to differentiate between actual and simulated transactions in the hint extraction process.\n\n3. What is the purpose of the `inputs` and `dataInputs` parameters in the `HintExtractionRequest` case class?\n- The `inputs` and `dataInputs` parameters represent the hex-encoded input boxes bytes and data-input boxes bytes for the unsigned transaction, respectively. These parameters are optional and may be used to provide additional information for the hint extraction process."
    }
  ],
  "folders": [],
  "summary": "The code in the `.autodoc/docs/json/src/main/scala/org/ergoplatform/http/api/requests` folder contains case classes that represent various types of requests related to the Ergo platform. These requests are used to interact with the Ergo HTTP API, allowing users to execute ErgoScript contracts, extract prover hints from transactions, and more.\n\n1. **CryptoResult.scala**: This file defines the `CryptoResult` case class, which represents the result of reducing an `ErgoTree` for a given context. It is used in the `/script/executeWithContext` endpoint of the Ergo HTTP API. The class has two fields: `value` (a `SigmaBoolean` representing the sigma-proposition to be proven) and `cost` (a `Long` representing the cost of the original script). This class is used to encapsulate the result of executing an Ergo script with a given context, returning the sigma-proposition and cost of the original script.\n\n   Example usage:\n\n   ```scala\n   import org.ergoplatform.http.api.requests.CryptoResult\n   import sigmastate.Values.SigmaBoolean\n\n   val ergoTree = // create an ErgoTree\n   val context = // create a context for the ErgoTree\n   val result = // execute the ErgoTree with the given context\n     CryptoResult(ergoTree.reduceToSigmaBoolean(context), ergoTree.cost(context))\n   ```\n\n2. **ExecuteRequest.scala**: This file defines the `ExecuteRequest` case class, which represents a request to execute a script in a given context. It takes three parameters: `script` (ErgoScript source code), `env` (a map of named constants for script compilation), and `ctx` (an instance of `ErgoLikeContext` representing the execution context).\n\n   Example usage:\n\n   ```scala\n   import org.ergoplatform.http.api.requests.ExecuteRequest\n   import org.ergoplatform.ErgoLikeContext\n\n   val ctx = new ErgoLikeContext(...)\n   val env = Map(\"x\" -> 10, \"y\" -> 20)\n   val request = ExecuteRequest(\"contract code here\", env, ctx)\n   executeScript(request)\n   ```\n\n3. **HintExtractionRequest.scala**: This file defines the `HintExtractionRequest` case class, which represents a request for extracting prover hints from a transaction in the Ergo platform. It takes several parameters, including `tx` (transaction), `real` (real signers of transaction inputs), `simulated` (simulated signers of transaction inputs), and optional `inputs` and `dataInputs` (hex-encoded input boxes bytes and data-input boxes bytes for the unsigned transaction).\n\n   This class is used to extract prover hints from a transaction, which can then be used to create a proof of correctness for the transaction. The `real` and `simulated` parameters specify the actual and simulated signers of the transaction inputs, respectively.\n\nIn summary, the code in this folder provides essential components for interacting with the Ergo HTTP API, enabling users to execute ErgoScript contracts, extract prover hints from transactions, and more. These case classes serve as important building blocks for the larger Ergo platform project, facilitating the creation and verification of transactions and smart contracts.",
  "questions": ""
}