{
  "folderName": "http",
  "folderPath": ".autodoc/docs/json/src/main/scala/org/ergoplatform/http",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/scala/org/ergoplatform/http",
  "files": [
    {
      "fileName": "ErgoHttpService.scala",
      "filePath": "src/main/scala/org/ergoplatform/http/ErgoHttpService.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/http/ErgoHttpService.scala",
      "summary": "The `ErgoHttpService` class is responsible for defining the HTTP service for the Ergo platform. It takes in three parameters: `apiRoutes`, `swaggerRoute`, and `panelRoute`, which are all routes that are defined elsewhere in the codebase. The `ErgoHttpService` class extends the `CorsHandler` trait, which is used to handle Cross-Origin Resource Sharing (CORS) requests.\n\nThe `rejectionHandler` and `exceptionHandler` methods define how the server should handle rejections and exceptions, respectively. They both use pre-defined handlers from the `ApiRejectionHandler` and `ApiErrorHandler` classes.\n\nThe `compositeRoute` method defines the main route for the HTTP service. It uses the `handleRejections`, `handleExceptions`, and `corsHandler` directives to handle rejections, exceptions, and CORS requests, respectively. It then combines several routes together using the `~` operator. These routes include the `apiR` route, which combines all of the `apiRoutes` defined in the constructor, the `apiSpecR` route, which serves the OpenAPI specification for the API, and the `swaggerRoute` and `panelRoute` routes, which serve the Swagger UI and node panel, respectively. Finally, the `redirectToSwaggerR` route redirects the root URL to the Swagger UI.\n\nOverall, the `ErgoHttpService` class defines the main HTTP service for the Ergo platform, combining several routes together and handling rejections, exceptions, and CORS requests. It can be used to start the HTTP server and serve the API, Swagger UI, and node panel to clients. \n\nExample usage:\n\n```scala\nval apiRoutes = Seq[ApiRoute](... // define API routes here)\nval swaggerRoute = SwaggerRoute(...)\nval panelRoute = NodePanelRoute(...)\nval ergoHttpService = ErgoHttpService(apiRoutes, swaggerRoute, panelRoute)\nval bindingFuture = Http().bindAndHandle(ergoHttpService.compositeRoute, \"localhost\", 8080)\n```",
      "questions": "1. What is the purpose of the `ErgoHttpService` class?\n- The `ErgoHttpService` class is responsible for handling HTTP requests and responses for the Ergo platform, and it includes routes for the API, Swagger documentation, and a node panel.\n\n2. What is the `compositeRoute` method doing?\n- The `compositeRoute` method is combining several routes together using the `handleRejections`, `handleExceptions`, and `corsHandler` directives, and then returning the resulting route.\n\n3. What is the `apiSpecR` method doing?\n- The `apiSpecR` method is defining a route that responds to GET requests for the path `/api-docs/openapi.yaml` by returning the contents of a resource file named `openapi.yaml` located in the `api` directory."
    },
    {
      "fileName": "NodePanelRoute.scala",
      "filePath": "src/main/scala/org/ergoplatform/http/NodePanelRoute.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/http/NodePanelRoute.scala",
      "summary": "The `NodePanelRoute` class is a part of the `org.ergoplatform.http` package and is responsible for defining a route for the Ergo node's web panel. The route is defined using the Akka HTTP library's `Directives` trait, which provides a set of building blocks for creating HTTP routes.\n\nThe `NodePanelRoute` class has a single method called `route`, which returns an instance of the `Route` class. The `Route` class represents an HTTP route that can be used to handle incoming requests. The `route` method defines two routes using the `pathPrefix` and `getFromResource` directives.\n\nThe first route is defined using the `pathPrefix` directive, which matches requests that start with the `/panel` path segment. The `getFromResource` directive is then used to serve the `index.html` file from the `panel` directory in the classpath. This file is the main entry point for the Ergo node's web panel.\n\nThe second route is defined using the `getFromResourceDirectory` directive, which serves all the static files (e.g., CSS, JavaScript, images) from the `panel` directory in the classpath. This allows the web panel to load all the necessary resources.\n\nOverall, the `NodePanelRoute` class provides a simple and concise way to define the web panel route for the Ergo node. This route can be used by the Ergo node to serve the web panel to users who want to interact with the node's functionality. Here is an example of how the `NodePanelRoute` class can be used in the larger project:\n\n```scala\nval nodePanelRoute = NodePanelRoute()\n\nval routes = nodePanelRoute.route ~ otherRoutes\n\nHttp().bindAndHandle(routes, \"localhost\", 8080)\n```\n\nIn this example, the `NodePanelRoute` class is instantiated and its `route` method is added to a list of other routes. The `routes` variable is then passed to the `bindAndHandle` method of the Akka HTTP server, which starts the server and listens for incoming requests on `localhost:8080`. When a request is received that matches the `/panel` path segment, the `NodePanelRoute` class's `route` method is called and the appropriate response is returned.",
      "questions": "1. What is the purpose of the `NodePanelRoute` class?\n   - The `NodePanelRoute` class is a final case class that extends the `Directives` trait and defines a `route` that handles HTTP requests for the `panel` path.\n\n2. What does the `getFromResource` method do?\n   - The `getFromResource` method retrieves a resource from the classpath as an `HttpEntity` and returns it as the response to an HTTP request.\n\n3. What is the difference between `getFromResource` and `getFromResourceDirectory`?\n   - `getFromResource` retrieves a single resource from the classpath, while `getFromResourceDirectory` retrieves all resources in a directory from the classpath and serves them as static files."
    },
    {
      "fileName": "SwaggerRoute.scala",
      "filePath": "src/main/scala/org/ergoplatform/http/SwaggerRoute.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/http/SwaggerRoute.scala",
      "summary": "The code defines a SwaggerRoute class that extends the Directives trait from the Akka HTTP library. The purpose of this class is to provide a route for serving Swagger UI and Swagger configuration files. \n\nThe class takes two parameters: RESTApiSettings and swaggerConfig. RESTApiSettings is a configuration object that contains settings for the REST API, while swaggerConfig is a string that represents the Swagger configuration file. \n\nThe class has a single public method called route, which returns a Route object. The route method defines three routes using the Directives trait. The first route is defined by the swaggerConfR method, which serves the Swagger configuration file when a GET request is made to the /api-docs/swagger.conf endpoint. The second route serves the Swagger UI index.html file when a GET request is made to the /swagger endpoint. The third route serves all other Swagger UI files when a GET request is made to any other endpoint under the /swagger path. \n\nHere is an example of how this class might be used in the larger project:\n\n```scala\nval swaggerConfig = \"\"\"{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"My API\",\n    \"version\": \"1.0\"\n  },\n  \"paths\": {\n    \"/users\": {\n      \"get\": {\n        \"summary\": \"Get a list of users\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    }\n  }\n}\"\"\"\n\nval restApiSettings = RESTApiSettings()\n\nval swaggerRoute = SwaggerRoute(restApiSettings, swaggerConfig)\n\nval routes = swaggerRoute.route ~ otherRoutes\n\nHttp().bindAndHandle(routes, \"localhost\", 8080)\n```\n\nIn this example, we create a SwaggerRoute object by passing in a RESTApiSettings object and a Swagger configuration string. We then combine the Swagger route with other routes using the ~ operator and bind the combined routes to a server using the Akka HTTP library. When a GET request is made to the /api-docs/swagger.conf endpoint, the Swagger configuration string is returned as a JSON response. When a GET request is made to the /swagger endpoint, the Swagger UI index.html file is returned. Finally, when a GET request is made to any other endpoint under the /swagger path, the corresponding Swagger UI file is returned.",
      "questions": "1. What is the purpose of the `SwaggerRoute` class?\n   - The `SwaggerRoute` class is responsible for defining a route that serves the Swagger UI and configuration for the REST API.\n2. What dependencies does this code rely on?\n   - This code relies on the Akka HTTP and Scorex libraries for defining the server and REST API settings.\n3. What HTTP methods are supported by the `swaggerConfR` route?\n   - The `swaggerConfR` route only supports the HTTP GET method for retrieving the Swagger configuration."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/src/main/scala/org/ergoplatform/http` folder contains three Scala files that define the HTTP service, node panel route, and Swagger route for the Ergo platform.\n\n`ErgoHttpService.scala` defines the main HTTP service for the Ergo platform. It combines several routes together and handles rejections, exceptions, and CORS requests. The class takes in three parameters: `apiRoutes`, `swaggerRoute`, and `panelRoute`. To use this class, create an instance of `ErgoHttpService` with the required routes and bind it to an HTTP server:\n\n```scala\nval apiRoutes = Seq[ApiRoute](... // define API routes here)\nval swaggerRoute = SwaggerRoute(...)\nval panelRoute = NodePanelRoute(...)\nval ergoHttpService = ErgoHttpService(apiRoutes, swaggerRoute, panelRoute)\nval bindingFuture = Http().bindAndHandle(ergoHttpService.compositeRoute, \"localhost\", 8080)\n```\n\n`NodePanelRoute.scala` defines a route for the Ergo node's web panel. It serves the `index.html` file from the `panel` directory in the classpath and all the static files (CSS, JavaScript, images) from the same directory. To use this class, create an instance of `NodePanelRoute`, combine its route with other routes, and bind them to an HTTP server:\n\n```scala\nval nodePanelRoute = NodePanelRoute()\nval routes = nodePanelRoute.route ~ otherRoutes\nHttp().bindAndHandle(routes, \"localhost\", 8080)\n```\n\n`SwaggerRoute.scala` provides a route for serving Swagger UI and Swagger configuration files. It takes two parameters: `RESTApiSettings` and `swaggerConfig`. The class defines three routes: one for serving the Swagger configuration file, one for serving the Swagger UI `index.html` file, and one for serving all other Swagger UI files. To use this class, create an instance of `SwaggerRoute` with the required parameters, combine its route with other routes, and bind them to an HTTP server:\n\n```scala\nval swaggerConfig = \"\"\"{...}\"\"\" // Swagger configuration string\nval restApiSettings = RESTApiSettings()\nval swaggerRoute = SwaggerRoute(restApiSettings, swaggerConfig)\nval routes = swaggerRoute.route ~ otherRoutes\nHttp().bindAndHandle(routes, \"localhost\", 8080)\n```\n\nIn summary, this folder contains the necessary code to define the main HTTP service, node panel route, and Swagger route for the Ergo platform. These classes can be used to start the HTTP server and serve the API, Swagger UI, and node panel to clients.",
  "questions": ""
}