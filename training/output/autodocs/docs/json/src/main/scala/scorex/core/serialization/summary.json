{
  "folderName": "serialization",
  "folderPath": ".autodoc/docs/json/src/main/scala/scorex/core/serialization",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/scala/scorex/core/serialization",
  "files": [
    {
      "fileName": "BytesSerializable.scala",
      "filePath": "src/main/scala/scorex/core/serialization/BytesSerializable.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/scorex/core/serialization/BytesSerializable.scala",
      "summary": "The `BytesSerializable` trait is a part of the `scorex.core.serialization` package and is used for serialization of objects into bytes. This trait extends the `Serializable` trait and defines two methods: `bytes` and `serializer`. \n\nThe `bytes` method returns an array of bytes that represent the serialized object. This method uses the `serializer` method to serialize the object into bytes. The `serializer` method returns a `ScorexSerializer` object that is used to serialize the object. The `ScorexSerializer` is a type of serializer that is used in the Scorex framework to serialize objects.\n\nThe `type M >: this.type <: BytesSerializable` is a type parameter that defines the type of the object that is being serialized. This type parameter ensures that the object being serialized is a subtype of the `BytesSerializable` trait.\n\nThis trait can be used in the larger project to serialize objects into bytes. For example, if there is a need to store an object in a database or send it over a network, the object can be serialized into bytes using the `BytesSerializable` trait. \n\nHere is an example of how this trait can be used:\n\n```scala\ncase class Person(name: String, age: Int) extends BytesSerializable\n\nval person = Person(\"John\", 30)\nval bytes = person.bytes\n```\n\nIn this example, a `Person` case class is defined that extends the `BytesSerializable` trait. An instance of the `Person` class is created and serialized into bytes using the `bytes` method. The `bytes` variable now contains the serialized `Person` object in the form of an array of bytes.",
      "questions": "1. What is the purpose of the `BytesSerializable` trait?\n   - The `BytesSerializable` trait is used for serialization of objects into byte arrays.\n\n2. What is the significance of the `M` type parameter?\n   - The `M` type parameter is a self-type that ensures that any subtype of `BytesSerializable` can be serialized.\n\n3. What is the role of the `serializer` method?\n   - The `serializer` method returns a `ScorexSerializer` instance that is used to serialize and deserialize objects of type `M`."
    },
    {
      "fileName": "ScorexSerializer.scala",
      "filePath": "src/main/scala/scorex/core/serialization/ScorexSerializer.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/scorex/core/serialization/ScorexSerializer.scala",
      "summary": "The code defines a trait called `ScorexSerializer` which provides serialization and deserialization functionality for a given type `T`. The trait extends the `Serializer` trait which defines the basic serialization and deserialization methods. \n\nThe `ScorexSerializer` trait provides additional methods to convert the serialized data to and from `ByteString` and `Array[Byte]` formats. These methods use the `VLQByteStringWriter`, `VLQByteStringReader`, `VLQByteBufferWriter`, and `VLQByteBufferReader` classes to perform the serialization and deserialization. \n\nThe `VLQByteStringWriter` and `VLQByteStringReader` classes are used to write and read variable-length quantity (VLQ) encoded data to and from `ByteString` format. The `VLQByteBufferWriter` and `VLQByteBufferReader` classes are used to write and read VLQ-encoded data to and from `ByteBuffer` format. \n\nThe `toByteString` method serializes an object of type `T` to a `ByteString` using the `VLQByteStringWriter`. The `parseByteString` method deserializes a `ByteString` to an object of type `T` using the `VLQByteStringReader`. The `parseByteStringTry` method is similar to `parseByteString`, but returns a `Try` object that can be used to handle any exceptions that occur during deserialization. \n\nThe `toBytes` method serializes an object of type `T` to an `Array[Byte]` using the `VLQByteBufferWriter`. The `parseBytes` method deserializes an `Array[Byte]` to an object of type `T` using the `VLQByteBufferReader`. The `parseBytesTry` method is similar to `parseBytes`, but returns a `Try` object that can be used to handle any exceptions that occur during deserialization. \n\nOverall, this trait provides a convenient way to serialize and deserialize objects of a given type to and from different formats. It can be used in the larger project to store and retrieve data in a compact and efficient manner. \n\nExample usage:\n\n```scala\ncase class Person(name: String, age: Int)\n\nobject PersonSerializer extends ScorexSerializer[Person] {\n  override def serialize(obj: Person, writer: Writer): Unit = {\n    writer.putString(obj.name)\n    writer.putInt(obj.age)\n  }\n\n  override def parse(reader: Reader): Person = {\n    val name = reader.getString()\n    val age = reader.getInt()\n    Person(name, age)\n  }\n}\n\nval person = Person(\"Alice\", 30)\n\n// Serialize to ByteString\nval byteString = PersonSerializer.toByteString(person)\n\n// Deserialize from ByteString\nval deserializedPerson = PersonSerializer.parseByteString(byteString)\n\n// Serialize to Array[Byte]\nval bytes = PersonSerializer.toBytes(person)\n\n// Deserialize from Array[Byte]\nval deserializedPerson2 = PersonSerializer.parseBytes(bytes)\n```",
      "questions": "1. What is the purpose of the `ScorexSerializer` trait?\n- The `ScorexSerializer` trait is a serialization interface that defines methods for converting objects of type `T` to and from byte strings and byte arrays.\n\n2. What is the role of the `VLQByteStringWriter` and `VLQByteStringReader` classes?\n- The `VLQByteStringWriter` and `VLQByteStringReader` classes are used to write and read variable-length quantity (VLQ) encoded byte strings, respectively.\n\n3. What is the difference between the `parseByteString` and `parseByteStringTry` methods?\n- The `parseByteString` method parses a byte string and returns an object of type `T`, while the `parseByteStringTry` method does the same but returns a `Try[T]` instead, which can be used to handle any exceptions that occur during parsing."
    }
  ],
  "folders": [],
  "summary": "The `scorex.core.serialization` package provides functionality for serializing and deserializing objects in the Ergo project. This package contains two main files: `BytesSerializable.scala` and `ScorexSerializer.scala`.\n\n`BytesSerializable.scala` defines a trait called `BytesSerializable` that is used for serializing objects into bytes. This trait extends the `Serializable` trait and defines two methods: `bytes` and `serializer`. The `bytes` method returns an array of bytes representing the serialized object, while the `serializer` method returns a `ScorexSerializer` object used for serialization. The `BytesSerializable` trait can be used to serialize objects for storage in a database or transmission over a network. For example:\n\n```scala\ncase class Person(name: String, age: Int) extends BytesSerializable\n\nval person = Person(\"John\", 30)\nval bytes = person.bytes\n```\n\n`ScorexSerializer.scala` defines a trait called `ScorexSerializer` that provides serialization and deserialization functionality for a given type `T`. This trait extends the `Serializer` trait and adds methods for converting serialized data to and from `ByteString` and `Array[Byte]` formats. These methods use the `VLQByteStringWriter`, `VLQByteStringReader`, `VLQByteBufferWriter`, and `VLQByteBufferReader` classes for serialization and deserialization.\n\nThe `ScorexSerializer` trait can be used to store and retrieve data in a compact and efficient manner. Here's an example of how to use this trait:\n\n```scala\ncase class Person(name: String, age: Int)\n\nobject PersonSerializer extends ScorexSerializer[Person] {\n  override def serialize(obj: Person, writer: Writer): Unit = {\n    writer.putString(obj.name)\n    writer.putInt(obj.age)\n  }\n\n  override def parse(reader: Reader): Person = {\n    val name = reader.getString()\n    val age = reader.getInt()\n    Person(name, age)\n  }\n}\n\nval person = Person(\"Alice\", 30)\n\n// Serialize to ByteString\nval byteString = PersonSerializer.toByteString(person)\n\n// Deserialize from ByteString\nval deserializedPerson = PersonSerializer.parseByteString(byteString)\n\n// Serialize to Array[Byte]\nval bytes = PersonSerializer.toBytes(person)\n\n// Deserialize from Array[Byte]\nval deserializedPerson2 = PersonSerializer.parseBytes(bytes)\n```\n\nIn summary, the `scorex.core.serialization` package provides essential functionality for serializing and deserializing objects in the Ergo project. The `BytesSerializable` trait allows objects to be serialized into bytes, while the `ScorexSerializer` trait offers a convenient way to serialize and deserialize objects of a given type to and from different formats. These traits can be used throughout the project to store and retrieve data efficiently.",
  "questions": ""
}