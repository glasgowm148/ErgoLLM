{
  "folderName": "reemission",
  "folderPath": ".autodoc/docs/json/src/main/scala/org/ergoplatform/reemission",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/src/main/scala/org/ergoplatform/reemission",
  "files": [
    {
      "fileName": "ReemissionRules.scala",
      "filePath": "src/main/scala/org/ergoplatform/reemission/ReemissionRules.scala",
      "url": "https://github.com/ergoplatform/ergo/src/main/scala/org/ergoplatform/reemission/ReemissionRules.scala",
      "summary": "The `ReemissionRules` class and object contain code for the re-emission feature of the Ergo blockchain. The `ReemissionRules` class extends the `ReemissionContracts` trait, which defines the re-emission contracts. The class also contains a `basicChargeAmount` variable, which specifies the amount of ERG taken from emission to re-emission initially. The `reemissionForHeight` method takes a height and an `EmissionRules` object and returns how many re-emission tokens can be unlocked at the given height. The method checks if the height is greater than or equal to the activation height and if the emission is greater than or equal to the basic charge amount plus three times the coins in one Ergo. If so, the method returns the basic charge amount times the coins in one Ergo. If the height is greater than or equal to the activation height and the emission is greater than three times the coins in one Ergo, the method returns the emission minus three times the coins in one Ergo. Otherwise, the method returns zero.\n\nThe `ReemissionRules` object contains a `injectionBoxP2SAddress` method that takes a boolean `mainnet` parameter and returns a Pay2SAddress object for a box used to carry emission NFT and re-emission tokens to inject them into the emission box on activation height. The method creates a source string that checks if the value of the first input is greater than 30000000L times 1000000000L. The method then compiles the source string using the SigmaCompiler and returns a Pay2SAddress object with the compiled value.\n\nThe `ReemissionRules` object also contains a `main` method that prints various information about the monetary and re-emission settings, emission rules, and re-emission rules. The method calculates the total re-emission and the total number of blocks that the re-emission is enough for. The method also prints the emission at the re-emission start height and the tokens. \n\nOverall, the `ReemissionRules` class and object provide the contracts and helper functions for the re-emission feature of the Ergo blockchain. The `ReemissionRules` class provides a method to calculate how many re-emission tokens can be unlocked at a given height, while the `ReemissionRules` object provides a method to create a Pay2SAddress object for a box used to carry emission NFT and re-emission tokens. The `main` method in the `ReemissionRules` object prints various information about the monetary and re-emission settings, emission rules, and re-emission rules.",
      "questions": "1. What is the purpose of the `ReemissionRules` class and how does it relate to the `ReemissionContracts` trait?\n- The `ReemissionRules` class contains helper functions for re-emission and overrides values from the `ReemissionContracts` trait. It is used to determine how many re-emission tokens can be unlocked at a given height.\n\n2. What is the purpose of the `injectionBoxP2SAddress` method and how is it used?\n- The `injectionBoxP2SAddress` method returns a Pay2SAddress for a box used to carry emission NFT and re-emission tokens to inject them into the emission box on activation height. It takes a boolean parameter to specify whether to create an address for mainnet or testnet.\n\n3. What is the purpose of the `main` method in the `ReemissionRules` object and what does it output?\n- The `main` method outputs various information related to monetary and re-emission settings, emission and re-emission at different heights, and total re-emission. It also calculates how many blocks the total re-emission is enough for."
    }
  ],
  "folders": [],
  "summary": "The `ReemissionRules.scala` file in the `org.ergoplatform.reemission` package is responsible for handling the re-emission feature of the Ergo blockchain. This feature allows unlocking of re-emission tokens at specific block heights, which can be used to support the network's long-term sustainability.\n\nThe `ReemissionRules` class extends the `ReemissionContracts` trait, which defines the re-emission contracts. It also contains a `basicChargeAmount` variable that specifies the initial amount of ERG taken from emission to re-emission. The main functionality of this class is provided by the `reemissionForHeight` method, which calculates how many re-emission tokens can be unlocked at a given height. This method takes a height and an `EmissionRules` object as input parameters and returns the number of unlockable re-emission tokens based on the conditions specified in the method.\n\nThe `ReemissionRules` object provides additional utility functions for the re-emission feature. The `injectionBoxP2SAddress` method creates a Pay2SAddress object for a box used to carry emission NFT and re-emission tokens. This box is used to inject these tokens into the emission box at the activation height. The method takes a boolean `mainnet` parameter and returns the Pay2SAddress object based on the conditions specified in the method.\n\nAdditionally, the `ReemissionRules` object contains a `main` method that prints various information about the monetary and re-emission settings, emission rules, and re-emission rules. This method is useful for developers to understand the current state of the re-emission feature and its impact on the Ergo blockchain.\n\nIn the larger Ergo project, the `ReemissionRules` class and object work together with other components, such as the `EmissionRules` class, to manage the emission and re-emission of tokens in the Ergo blockchain. For example, the `reemissionForHeight` method can be used to calculate the number of re-emission tokens that can be unlocked at a specific block height:\n\n```scala\nval height = 1000\nval emissionRules = new EmissionRules(...)\nval reemissionRules = new ReemissionRules(...)\nval unlockableTokens = reemissionRules.reemissionForHeight(height, emissionRules)\n```\n\nOverall, the `ReemissionRules.scala` file plays a crucial role in managing the re-emission feature of the Ergo blockchain, providing the necessary contracts and utility functions to calculate and unlock re-emission tokens at specific block heights.",
  "questions": ""
}