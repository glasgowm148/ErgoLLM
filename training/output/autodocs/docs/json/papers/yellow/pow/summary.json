{
  "folderName": "pow",
  "folderPath": ".autodoc/docs/json/papers/yellow/pow",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/papers/yellow/pow",
  "files": [
    {
      "fileName": "ErgoPow.tex",
      "filePath": "papers/yellow/pow/ErgoPow.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/yellow/pow/ErgoPow.tex",
      "summary": "This code describes the Autolykos Proof-of-Work (PoW) algorithm used in the Ergo cryptocurrency. Autolykos has two versions: version 1 (used until block 417,792) and version 2 (used since block 417,792). The main differences between the two versions are:\n\n1. Non-outsourceability is switched off in version 2, as it was found to be unattractive to small miners.\n2. Version 2 binds an efficient solving procedure with a single table of ~2 GB, and the table size grows with time.\n3. The table in version 2 depends only on block height, so there is no penalization for recalculating block candidates for the same height.\n\nThe Autolykos PoW algorithm is memory-hard and non-outsourceable, meaning it requires a significant amount of memory to solve, and outsourcing the puzzle is equivalent to outsourcing a signature. This design aims to maintain decentralization and reduce the advantage of ASIC-equipped miners.\n\nThe code provides two main algorithms: Solution Verification (Alg.~\\ref{alg:verify2}) and Block Mining (Alg.~\\ref{alg:prove2}). The Solution Verification algorithm checks if a given solution is valid, while the Block Mining algorithm is used by miners to find a valid solution for a new block.\n\nThe Autolykos PoW algorithm is efficient in terms of solution size and verification time. The solution consists of two public keys (32 bytes each), a number `d` (up to 32 bytes), and an 8-byte nonce. The verification process requires calculating one `genIndexes` hash, `k` hashes `H`, and performing two exponentiations in the group. The reference Scala implementation allows verifying a block header in 2 milliseconds on an Intel Core i5-7200U, 2.5GHz.",
      "questions": "1. **What is the purpose of the Autolykos Proof-of-Work algorithm?**\n\n   The Autolykos Proof-of-Work algorithm is used in the Ergo cryptocurrency to secure the blockchain by requiring miners to solve a memory-hard, non-outsourceable puzzle. This helps to maintain decentralization and reduce the advantage of ASIC-equipped miners over those using commodity hardware.\n\n2. **What are the main differences between Autolykos version 1 and version 2?**\n\n   Autolykos version 2 introduces several modifications compared to version 1, including turning off non-outsourceability, binding an efficient solving procedure with a single table of ~2 GB, increasing table size (memory requirements) over time, and making the table depend on block height only, which removes penalization for recalculating block candidates for the same height.\n\n3. **How does the Autolykos algorithm ensure memory-hardness?**\n\n   The Autolykos algorithm achieves memory-hardness by requiring miners to store a large list of pre-calculated hashes in memory (2 GB in version 2) during the mining process. While it is possible to recalculate these elements \"on the fly\" and reduce memory requirements, doing so would significantly increase the number of hash function calls, reducing the miner's efficiency and profit."
    },
    {
      "fileName": "compile.sh",
      "filePath": "papers/yellow/pow/compile.sh",
      "url": "https://github.com/ergoplatform/ergo/papers/yellow/pow/compile.sh",
      "summary": "This script is a part of the Ergo project and is responsible for compiling a LaTeX document called ErgoPow.tex into a PDF file called ErgoPow.pdf. The script first checks if the necessary commands, pdflatex and bibtex, are installed on the system by using the command -v option. If either of the commands is not found, the script prints an error message and suggests installing the missing command(s) using apt on Ubuntu. The script then proceeds to remove any existing ErgoPow.pdf file and compiles the LaTeX document using pdflatex and bibtex commands. The pdflatex command generates an auxiliary file called ErgoPow.aux, which is used by bibtex to generate a bibliography file called ErgoPow.bbl. The script then runs pdflatex twice more to incorporate the bibliography into the final PDF file. Finally, the script removes any auxiliary files generated during the compilation process, such as ErgoPow.aux and ErgoPow.log, if the script is run from the same directory as the LaTeX document.\n\nThis script can be used by developers and contributors to the Ergo project to compile the ErgoPow.tex document into a PDF file for distribution or publication. The script ensures that all necessary dependencies are installed and removes any temporary files generated during the compilation process. The script can be run from the command line using the following command:\n\n```\n./compile.sh\n```\n\nAssuming the script is located in the same directory as the ErgoPow.tex file. The resulting ErgoPow.pdf file will also be located in the same directory.",
      "questions": "1. What is the purpose of this script?\n   \n   This script checks if `pdflatex` and `bibtex` are installed and then compiles a LaTeX document called `ErgoPow.tex` to a PDF file called `ErgoPow.pdf`. It also removes some auxiliary files if the script is run from the same directory as the LaTeX files.\n\n2. What operating systems is this script compatible with?\n   \n   This script is designed to work with Unix-like operating systems that use the `sh` shell, such as Linux and macOS.\n\n3. What are some common errors that might occur when running this script?\n   \n   Some common errors that might occur when running this script include `pdflatex` or `bibtex` not being installed, or the LaTeX files not being located in the same directory as the script. The script provides some guidance on how to resolve these errors for Ubuntu users."
    },
    {
      "fileName": "references.bib",
      "filePath": "papers/yellow/pow/references.bib",
      "url": "https://github.com/ergoplatform/ergo/papers/yellow/pow/references.bib",
      "summary": "This file contains a list of references related to the Ergo project, which is a blockchain platform that aims to provide a secure and flexible environment for decentralized applications. The references cover various topics related to blockchain technology, such as proof-of-work algorithms, mining hardware, and security issues.\n\nOne of the main concerns of the Ergo project is to ensure that the platform is resistant to attacks from mining coalitions, which can compromise the security and decentralization of the network. To achieve this goal, the project uses a non-outsourceable scratch-off puzzle, which is a type of proof-of-work algorithm that requires miners to perform a certain amount of computation that cannot be outsourced to other parties. This makes it more difficult for mining coalitions to gain a significant advantage over individual miners, as they would need to invest in specialized hardware or hire a large number of workers to perform the required computations.\n\nThe references in this file provide insights into the various aspects of proof-of-work algorithms and their applications in blockchain technology. For example, the Equihash algorithm is a memory-hard proof-of-work algorithm that is used in the Zcash cryptocurrency to provide ASIC-resistance and prevent mining centralization. The Scrypt algorithm is another memory-hard proof-of-work algorithm that is used in Litecoin and other cryptocurrencies.\n\nThe file also contains references to mining hardware, such as the Autolykos GPU miner, which is a software tool that allows miners to use their graphics cards to mine Ergo coins. The file also mentions the release of Ethereum ASIC miners by Bitmain, which has raised concerns about the centralization of mining power in the Ethereum network.\n\nOverall, this file provides a valuable resource for developers and researchers who are interested in the technical aspects of blockchain technology and proof-of-work algorithms. By studying the references in this file, developers can gain a deeper understanding of the challenges and opportunities of building decentralized applications on the Ergo platform.",
      "questions": "1. What is the purpose of this code file?\n- This code file contains references to various research papers, articles, and online resources related to Bitcoin mining and proof-of-work protocols, which may be useful for developers working on the Ergo platform.\n\n2. What is the significance of the references to ASIC-resistance and memory-hard functions?\n- The references to ASIC-resistance and memory-hard functions suggest that Ergo may be designed to resist the use of specialized hardware (ASICs) for mining, and instead rely on memory-intensive computations that are more resistant to optimization by dedicated hardware.\n\n3. What is the role of Autolykos in Ergo mining, and where can I find its implementation?\n- Autolykos is a GPU miner for the Ergo platform, and its Scala implementation can be found in the Ergo Git repository."
    }
  ],
  "folders": [],
  "summary": "The `pow` folder in the Ergo project contains code and documentation related to the Autolykos Proof-of-Work (PoW) algorithm used in the Ergo cryptocurrency. The Autolykos PoW algorithm is memory-hard and non-outsourceable, which aims to maintain decentralization and reduce the advantage of ASIC-equipped miners.\n\nThe `ErgoPow.tex` file describes the Autolykos PoW algorithm, its two versions, and the main differences between them. It also provides two main algorithms: Solution Verification and Block Mining. The Solution Verification algorithm checks if a given solution is valid, while the Block Mining algorithm is used by miners to find a valid solution for a new block. The Autolykos PoW algorithm is efficient in terms of solution size and verification time.\n\nThe `compile.sh` script is responsible for compiling the `ErgoPow.tex` LaTeX document into a PDF file called `ErgoPow.pdf`. This script can be used by developers and contributors to compile the document for distribution or publication. To use the script, run the following command in the same directory as the `ErgoPow.tex` file:\n\n```bash\n./compile.sh\n```\n\nThe `references.bib` file contains a list of references related to the Ergo project, covering various topics related to blockchain technology, such as proof-of-work algorithms, mining hardware, and security issues. Studying these references can help developers gain a deeper understanding of the challenges and opportunities of building decentralized applications on the Ergo platform.\n\nFor example, developers working on the Ergo project might use the Autolykos PoW algorithm to implement mining functionality in the Ergo blockchain. They can refer to the `ErgoPow.tex` document to understand the algorithm's design and use the Solution Verification and Block Mining algorithms as a basis for their implementation. Additionally, they can use the `compile.sh` script to generate an up-to-date PDF version of the `ErgoPow.tex` document for easy reference or sharing with other team members.\n\nIn summary, the `pow` folder provides valuable resources for developers working on the Ergo project, specifically related to the Autolykos PoW algorithm. By understanding the algorithm and its implications for decentralization and ASIC resistance, developers can contribute to the development of a secure and flexible environment for decentralized applications on the Ergo platform.",
  "questions": ""
}