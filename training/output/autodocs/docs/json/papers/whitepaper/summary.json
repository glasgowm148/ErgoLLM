{
  "folderName": "whitepaper",
  "folderPath": ".autodoc/docs/json/papers/whitepaper",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/papers/whitepaper",
  "files": [
    {
      "fileName": "abstract.tex",
      "filePath": "papers/whitepaper/abstract.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/abstract.tex",
      "summary": "The code provided is not a code implementation, but rather an abstract describing the Ergo project. Ergo is a blockchain protocol designed for developing decentralized applications with a focus on providing an efficient, secure, and easy way to implement financial contracts. \n\nOne of the key features of Ergo is the use of ErgoScript, a powerful and protocol-friendly scripting language based on $\\Sigma$-protocols. Every coin in Ergo is protected by a program in ErgoScript, which allows for the encoding of conditions under which coins may be used, such as who can spend them, when, under what external conditions, to whom, and so on. This provides a high level of flexibility and security for financial contracts implemented on the Ergo blockchain.\n\nErgo also includes extended support for light nodes, making it friendly for end-users by allowing contracts to be run on untrusted commodity hardware. To ensure long-term usability, Ergo follows a survivability approach, using widely-researched solutions that do not result in security issues in the future, while also preventing performance degradation over time with a new economic model.\n\nFinally, Ergo has a self-amendable protocol that allows it to absorb new ideas and improve itself in the future. This means that the Ergo protocol can adapt to changing needs and requirements, making it a flexible and future-proof solution for decentralized applications.\n\nOverall, the Ergo project aims to provide a flexible and secure blockchain protocol for developing decentralized applications, with a focus on financial contracts. The use of ErgoScript and support for light nodes provide a high level of flexibility and security, while the survivability approach and self-amendable protocol ensure long-term usability and adaptability.",
      "questions": "1. What is the main focus of Ergo?\n    - The main focus of Ergo is to provide an efficient, secure, and easy way to implement financial contracts through a flexible blockchain protocol.\n\n2. How does Ergo protect every coin in the blockchain?\n    - Every coin in Ergo is protected by a program in ErgoScript, which is a powerful and protocol-friendly scripting language based on $\\Sigma$-protocols. ErgoScript allows for the encoding of conditions under which coins may be used.\n\n3. What is the economic model used by Ergo to prevent performance degradation over time?\n    - Ergo follows a survivability approach by using widely-researched solutions that don't result in security issues in the future, while also preventing performance degradation over time with a new economic model."
    },
    {
      "fileName": "autolykos.tex",
      "filePath": "papers/whitepaper/autolykos.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/autolykos.tex",
      "summary": "The code describes the Autolykos consensus protocol, which is a Proof of Work (PoW) consensus protocol developed by Ergo for blockchain systems. The Autolykos protocol is unique because it is both memory-hard and pool-resistant. The protocol is based on the one list k-sum problem, where a miner has to find k=32 elements from a pre-defined list R of size N=2^26, such that the sum of the elements minus sk is in the interval {-b,...,0,...,b mod q}. The elements of list R are obtained as a result of one-way computation from index i, two miner public keys pk,w and hash of block header m as r_i=H(i||M||pk||m||w), where H is a hash function that returns the values in Z/qZ and M is a static big message that is used to make hash calculation slower. A set of element indexes J is to be obtained by one-way pseudo-random function genIndexes, that prevents possible solutions search optimizations.\n\nThe mining process utilizes private keys, but the solution itself only contains public keys. The solution verification is done by Algorithm 2. This approach prevents mining pool formation because the secret key sk is needed for mining. Memory-hardness follows from the fact that the mining process requires keeping the whole list R for the main loop execution. The target parameter b is built-in into the puzzle itself and is adjusted to the current network hash rate via a difficulty adjustment algorithm to keep the time interval between blocks close to 2 minutes. This algorithm tries to predict the hash rate of an upcoming 1024 blocks long epoch based on data from the previous 8 epochs via the well-known linear least squares method. \n\nThe Autolykos protocol solves the problem of specialized hardware (ASICs) development and mining pool formation, which are the two known threats to a PoW network decentralization. The code provides the algorithms for block mining and solution verification, which can be used in the larger project for implementing the Autolykos consensus protocol. The code also highlights the heavy computational task of calculating the list R, which may be optimized if a miner also stores a list of unfinalized hashes u_i=H(i||M||pk) in memory. Overall, the code provides a detailed technical explanation of the Autolykos consensus protocol and its implementation, which can be useful for developers working on blockchain systems.",
      "questions": "1. What is Autolykos and how does it differ from other PoW protocols?\nAutolykos is a unique Proof of Work (PoW) consensus protocol developed by Ergo that is both memory-hard and pool-resistant. It differs from other PoW protocols by utilizing the one list k-sum problem, which requires a miner to find k=32 elements from a pre-defined list R of size N=2^26.\n\n2. How does Ergo prevent mining pool formation?\nErgo prevents mining pool formation by requiring the secret key sk for mining. Once any pool miner finds a correct solution, they can use this secret to steal the block reward. This approach prevents mining pool formation because the secret key sk is needed for mining.\n\n3. How is the difficulty adjustment algorithm in Ergo different from other blockchain systems?\nThe difficulty adjustment algorithm in Ergo is adjusted to the current network hash rate via a difficulty adjustment algorithm that tries to predict the hash rate of an upcoming 1024 blocks long epoch based on data from the previous 8 epochs via the well-known linear least squares method. This makes the predictions better than that of the usual difficulty adjustment algorithm and also makes \"coin-hopping\" attacks less profitable."
    },
    {
      "fileName": "compile.sh",
      "filePath": "papers/whitepaper/compile.sh",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/compile.sh",
      "summary": "The code provided is a shell script that compiles a LaTeX document called \"whitepaper.tex\" into a PDF file called \"whitepaper.pdf\". The script first checks if the necessary LaTeX commands, \"pdflatex\" and \"bibtex\", are installed on the system by using the \"command -v\" command. If either of these commands is not found, the script prints an error message and exits with an error code of 1.\n\nAssuming both commands are found, the script then proceeds to remove any existing \"whitepaper.pdf\" file in the current directory. It then runs \"pdflatex\" on \"whitepaper.tex\" to generate an initial PDF file. Next, it runs \"bibtex\" on \"whitepaper\" to generate a bibliography file. Finally, it runs \"pdflatex\" twice more to incorporate the bibliography into the PDF file and generate the final version of \"whitepaper.pdf\".\n\nAfter the PDF file is generated, the script removes any auxiliary files generated during the compilation process, such as \".aux\", \".log\", \".bbl\", \".blg\", and \".out\" files.\n\nThis script is likely used as part of a larger project that involves creating and maintaining a LaTeX document, such as a technical whitepaper or research paper. By automating the compilation process, the script saves time and reduces the chance of errors that can occur when manually running the necessary LaTeX commands. The script can be run from the command line by navigating to the directory containing \"whitepaper.tex\" and executing the script with \"./script_name.sh\".",
      "questions": "1. What is the purpose of this script?\n   \n   This script is used to compile a LaTeX document called \"whitepaper.tex\" into a PDF file called \"whitepaper.pdf\", and it also removes some auxiliary files generated during the compilation process.\n\n2. What dependencies are required to run this script?\n   \n   This script requires the \"pdflatex\" and \"bibtex\" commands to be installed on the system. If they are not installed, the script will print an error message and exit. Additionally, some LaTeX packages and fonts may need to be installed, depending on the contents of the \"whitepaper.tex\" file.\n\n3. Why are there multiple calls to pdflatex?\n   \n   The \"pdflatex\" command needs to be run multiple times in order to properly generate the table of contents, citations, and other cross-references in the document. The first call generates some auxiliary files that are used by subsequent calls to pdflatex and bibtex."
    },
    {
      "fileName": "currency.tex",
      "filePath": "papers/whitepaper/currency.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/currency.tex",
      "summary": "The code presented in this file explains the importance of Ergo's native token, \\Erg{}, and its role in ensuring the stability and security of the Ergo platform. The \\Erg{} token is divisible into up to $10^9$ smallest units, \\nanoErg{}s, and is used to incentivize miners to participate in the Ergo network, securing it from hashrate-based attacks like the known 51\\% attack. \n\nThe emission of \\Erg{} tokens will be finished within eight years, after which miners will only receive \\Erg{}s from fees. The fees will help miners to sort transactions, preventing spam attacks while allowing miners to include transactions from honest users in blocks. Ergo has a storage rent component that periodically charges users \\Erg{} for every byte included in the state. This storage rent is making the system more stable by limiting state size or insuring proper compensation for larger state size, returning lost coins into circulation and providing an additional stable and predictable reward to miners.\n\nAll \\Erg{} tokens that will ever circulate in the system are presented in the initial state, which consists of three boxes: No Premine Proof, Treasury, and Miners Reward. The No Premine Proof box contains exactly one \\Erg{} and is protected by a script that prevents it from being spent by anyone. The Treasury box contains 4,330,791.5 \\Erg{}s that will be used to fund Ergo development. The Miners Reward box contains 93,409,132 \\Erg{}s that will be collected by block miners as a reward for their work. \n\nThe code also explains the emission of \\Erg{} tokens, which will be released according to a predefined and hard-coded token emission schedule. During blocks 1-525,599 (2 years), 7.5 \\Erg{}s will be released every block. During blocks 525,600-590,399 (3 months), 4.5 \\Erg{}s will be released every block. Finally, during blocks 590,400-655,199 (3 months), 1.5 \\Erg{}s will be released every block. The number of \\Erg{}s in circulation with time is shown in the emission curve.\n\nIn conclusion, the \\Erg{} token is an essential component of the Ergo platform, ensuring its stability and security. The token is used to incentivize miners to participate in the network, sort transactions, and limit state size. The emission of \\Erg{} tokens is released according to a predefined schedule, and all tokens that will ever circulate in the system are presented in the initial state.",
      "questions": "1. What is the purpose of the No Premine Proof box and how does it prevent private mining before the launch date?\n    \n    The No Premine Proof box contains one Erg and is protected by a script that prevents it from being spent by anyone. Its purpose is to prove that Ergo mining was not started privately by anyone before the declared launch date. The box contains additional registers with the latest headlines from the media and the latest block identifiers from Bitcoin and Ethereum, which ensure that Ergo mining could not have started before certain events in the real world and the cryptocurrency space.\n\n2. How does Ergo limit state size and ensure proper compensation for larger state size?\n    \n    Ergo has a storage rent component that periodically charges users Erg for every byte included in the state. This storage rent is making the system more stable by limiting state size or insuring proper compensation for larger state size, returning lost coins into circulation and providing an additional stable and predictable reward to miners.\n\n3. How will the Treasury box funds be used and distributed in a decentralized manner?\n    \n    During the first year, the Treasury funds will be used to cover the pre-issued EFYT token. After that, they will be distributed in a decentralized manner via a community voting system that is under development. The Treasury box contains 4,330,791.5 Ergs that will be used to fund Ergo development, and its protecting script ensures that only a predefined portion of the box value is unlocked at any given time."
    },
    {
      "fileName": "intro.tex",
      "filePath": "papers/whitepaper/intro.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/intro.tex",
      "summary": "The code provided is not a functional code but rather an introduction to the Ergo project. The purpose of the Ergo project is to provide a blockchain platform that is secure, decentralized, and efficient for building financial applications. The introduction explains the challenges faced by existing blockchain systems, such as high transaction costs, resource utilization, and storage requirements. Ergo aims to address these challenges by utilizing the UTXO model, which provides a convenient way to implement financial applications covering an overwhelming majority of public blockchain use-cases. \n\nThe introduction also highlights the importance of long-term survivability of blockchain platforms and the need for self-amendable protocols that can adapt to changing environments without the need for trusted parties. Ergo seeks to accomplish this by combining various scientific ideas to fix existing problems and provide a way for further improvements without any breaking changes. \n\nOverall, the Ergo project aims to provide a blockchain platform that is efficient, secure, and decentralized for building financial applications. The introduction provides a high-level overview of the challenges faced by existing blockchain systems and how Ergo seeks to address these challenges.",
      "questions": "1. What is the purpose of Ergo and how does it differ from existing blockchain systems?\n- Ergo is designed to provide a way to implement financial applications using the UTXO model, which is simpler for implementing protecting conditions. It aims to address the challenges faced by existing blockchain systems, such as high transaction costs and long-term survivability.\n\n2. What are the resource requirements for using a blockchain without any trust?\n- Participants in a trustless blockchain system must download and process all transactions in the network, which utilizes network and computational resources. They must also keep a significant amount of data in their local storage, some of which must be maintained in memory. Transaction processing consumes resources from hundreds of thousands of computers worldwide, and users pay for these resources through transaction fees.\n\n3. What are some solutions for ensuring the long-term survivability of blockchain systems?\n- Solutions for long-term survivability include light nodes with minimal storage requirements, storage-rent fee components to prevent bloating of full-nodes, and self-amendable protocols that can adapt to changing environments and improve themselves without trusted parties. Ergo seeks to combine various scientific ideas to address these problems and provide a way for further improvements without breaking changes."
    },
    {
      "fileName": "money.tex",
      "filePath": "papers/whitepaper/money.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/money.tex",
      "summary": "The Ergo project provides a platform for developers to create custom tokens and flexible, secure financial applications using a domain-specific language. The platform uses the concept of \"contractual money\" to define Ergs (and secondary tokens) whose usage is bounded by a contract. Ergo applications are defined in terms of protecting scripts built into boxes, which may also contain data involved in the execution.\n\nErgoScript is the high-level language provided with the reference client for writing box protecting conditions. It allows developers to create contracts easily, such as one-out-of-two signatures. The platform also supports data inputs and custom tokens, enabling more complex applications like oracles, non-interactive mixing, atomic swaps, complementary currency, and initial coin offerings.\n\nFor example, an oracle application can use a singleton token for authentication and read-only data inputs to access data stored in other boxes in the state. This simplifies the process of delivering data with one-time boxes. Another example is a non-interactive mixing protocol between two users, which provides privacy by generating two indistinguishable outputs.\n\nErgo also supports more advanced applications like Local Exchange Trading Systems (LETS) and multi-stage contracts, such as Initial Coin Offerings (ICOs). These applications can leverage authenticated AVL+ trees to reduce storage requirements for the state while still providing proofs for tree lookup or modification operations.",
      "questions": "1. **What is the purpose of the \"singleton token\" in the oracle example?**\n\n   The singleton token is used for authentication in the oracle example. It is a custom token with a unique identifier, and its amount is usually one. The oracle creates a box containing this token along with its data (e.g., temperature) and the UNIX epoch time. This approach is simpler and more efficient than using signed data and signature verification for authentication.\n\n2. **How does the non-interactive mixing example provide privacy for Alice and Bob?**\n\n   The non-interactive mixing example provides privacy by creating two indistinguishable output boxes, each of which can only be spent by either Alice or Bob. The protocol uses cryptographic primitives based on the Decision Diffie-Hellman (DDH) problem, making it difficult for an external observer to guess with probability better than 1/2 which output belongs to whom.\n\n3. **What are the main differences between ErgoScript and Bitcoin's Script language?**\n\n   ErgoScript is a high-level language for writing box protecting conditions in Ergo, while Bitcoin's Script is a stack-based language for protecting transaction outputs. ErgoScript allows developers to use logic formulas that combine predicates over a context with cryptographic statements provable via zero-knowledge protocols, using AND, OR, and k-out-of-n connectives. ErgoScript also supports features like data inputs and custom tokens, which are not available in Bitcoin's Script language."
    },
    {
      "fileName": "references.bib",
      "filePath": "papers/whitepaper/references.bib",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/references.bib",
      "summary": "This code is a collection of citations for various articles, reports, and online resources related to the Ergo project. The Ergo project is a blockchain platform that focuses on providing a secure, efficient, and decentralized system for various applications. The citations in this code provide background information, technical details, and examples of how the Ergo project can be used in real-world scenarios.\n\nSome key topics covered by these citations include:\n\n1. Equihash: A proof-of-work algorithm based on the generalized birthday problem, which is used in the Ergo project for mining purposes. The algorithm is designed to be memory-hard, making it resistant to specialized mining hardware (ASICs).\n\n2. Security and data breaches: Articles discussing the importance of security in blockchain systems, as well as examples of major data breaches in the cryptocurrency space.\n\n3. Non-interactive proofs of proof-of-work: A technical report on a novel cryptographic technique used in the Ergo project to enable lightweight clients to verify the blockchain's state without downloading the entire chain.\n\n4. Tutorials and examples: Online resources providing examples of how to build applications on top of the Ergo platform, such as an Initial Coin Offering (ICO) and a Local Exchange Trading System (LETS).\n\n5. Cryptanalysis and vulnerabilities: Citations discussing potential vulnerabilities in other blockchain systems, such as IOTA and Ethereum, which can inform the design of the Ergo project to avoid similar issues.\n\n6. Smart contracts and Turing completeness: Articles discussing the need for Turing complete languages in smart contract platforms, and the trade-offs between expressiveness and security.\n\n7. Authenticated dynamic dictionaries: A research paper on a data structure used in the Ergo project to enable efficient state updates and validation in the blockchain.\n\nOverall, the code provides a comprehensive list of resources that can be used to understand the Ergo project's design, implementation, and potential applications. These citations can be helpful for developers, researchers, and users interested in learning more about the Ergo platform and its underlying technologies.",
      "questions": "1. **What is the purpose of this code?**\n\n   This code is not actually a program, but a list of references in BibTeX format. These references are related to various topics such as cryptocurrencies, blockchain technology, and security. They can be used in a research paper or project documentation to cite relevant sources.\n\n2. **What are some of the main topics covered by these references?**\n\n   The main topics covered by these references include proof-of-work algorithms, cryptocurrency security, smart contracts, and various aspects of blockchain technology such as transaction validation and fees.\n\n3. **How can I use these references in my own project or research?**\n\n   You can use these references in your own project or research by importing the BibTeX file into a reference management software (e.g., Zotero, Mendeley, or JabRef) and then citing the relevant sources in your paper or documentation using the appropriate citation style (e.g., APA, MLA, or IEEE)."
    },
    {
      "fileName": "social_contract.tex",
      "filePath": "papers/whitepaper/social_contract.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/social_contract.tex",
      "summary": "The code above is a section of the Ergo project's documentation that outlines the main principles that should be followed in the Ergo protocol. These principles are referred to as \"Ergo's Social Contract\" and are intended to guide the development and use of the protocol.\n\nThe first principle is \"Decentralization First.\" This means that the Ergo protocol should be as decentralized as possible, with no parties whose absence or malicious behavior could affect the security of the network. If any such parties do appear, the community should work to decrease their impact level.\n\nThe second principle is \"Created for Regular People.\" Ergo is intended to be a platform for ordinary people, and their interests should not be infringed upon in favor of larger parties. This means that centralization of mining should be prevented, and regular people should be able to participate in the protocol by running a full node and mining blocks.\n\nThe third principle is \"Platform for Contractual Money.\" Ergo is designed to be a base layer for applications that will be built on top of it. Its main focus is to provide an efficient, secure, and easy way to implement financial contracts.\n\nThe fourth principle is \"Long-term Focus.\" All aspects of Ergo development should be focused on a long-term perspective. Ergo should be able to survive for centuries without expected hard forks, software or hardware improvements, or other unpredictable changes. Applications built on top of Ergo should also be able to survive in the long term.\n\nThe fifth principle is \"Permissionless and Open.\" The Ergo protocol should allow anyone to join the network and participate in the protocol without any preliminary actions. No bailouts, blacklists, or other forms of discrimination should be possible on the core level of the Ergo protocol. Application developers are free to implement any logic they want, taking responsibility for the ethics and legality of their application.\n\nOverall, this section of the Ergo documentation provides a high-level overview of the principles that should guide the development and use of the Ergo protocol. These principles emphasize decentralization, accessibility, and long-term sustainability, and are intended to ensure that Ergo remains a platform for ordinary people to use and build upon.",
      "questions": "1. What is the purpose of the Ergo protocol?\n    \n    The purpose of the Ergo protocol is to provide an efficient, secure, and easy way to implement financial contracts as a base layer for applications that will be built on top of it.\n\n2. What are the main principles that should be followed in Ergo?\n    \n    The main principles that should be followed in Ergo are decentralization, being created for regular people, being a platform for contractual money, having a long-term focus, and being permissionless and open.\n\n3. How should the community handle intentional violation of Ergo's social contract?\n    \n    If there is an intentional violation of Ergo's social contract, the resulting protocol should not be called Ergo. The community should consider ways to decrease the impact level of any parties whose absence or malicious behavior may affect the security of the network."
    },
    {
      "fileName": "survivability.tex",
      "filePath": "papers/whitepaper/survivability.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/survivability.tex",
      "summary": "The code presented in this file is focused on the resiliency and survivability of the Ergo platform, which is a blockchain-based platform for contractual money. The code addresses several potential issues that can arise in blockchain technology, such as performance degradation, adaptability to external conditions, and lack of secure trustless light clients. \n\nTo address these issues, the Ergo platform uses stable, well-tested solutions that have been formalized in papers presented at peer-reviewed conferences. The platform also allows for the use of authenticated state and proof of correctness for transactions included in a block, which enables regular users with mobile phones to join the network and start using Ergo with the same security guarantees as a full node. \n\nAnother issue that the Ergo platform addresses is the problem of state bloat, which can lead to serious security issues and prevent scaling solutions. To prevent this, Ergo has a storage rent component that allows miners to charge a small fee for every byte kept in the state if an output remains in the state for 4 years without being consumed. This ensures that Ergo mining will always be stable, and growth of the state's size becomes controllable and predictable. \n\nThe Ergo platform is also self-amendable and able to adapt to the changing environment. Parameters like block size can be changed on-the-fly via voting of miners, and the platform follows the approach of soft-forkability that allows changing the protocol significantly while keeping old nodes operational. This combination of soft-forkability with the voting protocol allows changing almost all the parameters of the network except the PoW rules that are responsible for the voting itself. \n\nOverall, the code presented in this file is crucial for the resiliency and survivability of the Ergo platform. It ensures that the platform can adapt to changing conditions and remain stable and secure over the long term.",
      "questions": "1. What is the approach of Ergo to ensure long-term survivability of the platform?\n- Ergo's approach is to use stable, well-tested solutions, even if they lead to slower short-term innovations. Most of the solutions used in Ergo are formalized in papers presented at peer-reviewed conferences and have been widely discussed in the community.\n\n2. How does Ergo address the lack of secure trustless light clients in blockchain technology?\n- Ergo uses an authenticated state and for transactions included in a block, a client may download a proof of their correctness. Thus, regardless of the blockchain size, a regular user with a mobile phone can join the network and start using Ergo with the same security guarantees as a full node.\n\n3. How does Ergo prevent the steady decrease of circulating supply due to lost keys?\n- Ergo has a storage rent component: if an output remains in the state for 4 years without being consumed, a miner may charge a small fee for every byte kept in the state. By collecting storage fees from outdated boxes, miners can return coins to circulation and prevent the steady decrease of circulating supply due to lost keys."
    },
    {
      "fileName": "utxo.tex",
      "filePath": "papers/whitepaper/utxo.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/utxo.tex",
      "summary": "The code in this file explains the design of the Ergo state, which is used to check new transactions in the Ergo cryptocurrency. The Ergo state is represented using one-time coins, called boxes, which are similar to Bitcoin's UTXOs but contain user-defined data in addition to monetary value and protecting script. The state snapshot is fixed within the protocol and is represented by boxes not destroyed by previous transactions. \n\nEach Ergo box has ten registers, of which the first four are mandatory and the rest may contain arbitrary data or be empty. The first register contains the monetary value of the box, the second contains the serialized script protecting the box, the third contains an array of token identifiers and amounts locked in the box, and the fourth contains information about the transaction that created the box. The remaining registers can contain arbitrary user-defined data.\n\nThe use of one-time immutable objects in the Ergo state provides several advantages over Ethereum's long-lived mutable accounts, including easier and safer protection from replay or reordering attacks, easier parallel processing of transactions, and the absence of side-effects resulting from `out-of-gas' exceptions or reentrancy issues. \n\nThe Ergo protocol fixes the ledger snapshot representation in the form of boxes not destroyed by previous transactions. A miner maintains an AVL+ tree-like authenticated data structure built on top of the UTXO set, and includes a short digest of this structure in each block header. This digest is calculated after applying the block, and is used to verify that all spent boxes were removed from the state, all created boxes were added to it, and no more changes were made. \n\nAVL+ trees allow building efficient authenticated dictionaries that reduce the proof size and speed up verification, making them better suited for cryptocurrency applications than prior solutions such as Merkle Patricia tries. Proofs for multiple transactions in a single block are compressed together, reducing their total length by approximately an additional factor of 2. \n\nOverall, the Ergo state provides an efficient and secure way to prove the existence or non-existence of certain elements in it, as well as proofs of tree modifications. These tree operations are supported by the Ergo smart contract language, providing the ability to implement sophisticated contracts.",
      "questions": "1. What is the difference between Ergo's one-time coins and Bitcoin's UTXO model?\n- Ergo follows Bitcoin's UTXO design and represents the snapshots using one-time coins. The difference from Bitcoin is that in addition to monetary value and protecting script, an Ergo one-time coin, called a {\\em box}, also contains user-defined data.\n\n2. How does Ergo fix the ledger snapshot representation?\n- The Ergo protocol fixes the ledger snapshot representation in the form of boxes not destroyed by previous transactions. In detail, a miner should maintain a Merkle-tree like authenticated data structure built on top of the UTXO set and must include a short digest (just 33 bytes) of this structure in each block header.\n\n3. What are the advantages of using one-time immutable objects?\n- One-time immutable objects (as in Bitcoin's UTXO model) have some advantages over Ethereum's long-lived mutable accounts. Firstly, it gives easier and safer protection from replay or reordering attacks. Secondly, it is easier to process transactions in parallel because they don't modify state of the objects they access. Finally, it seems easier to build fully stateless clients using one-time coins."
    },
    {
      "fileName": "whitepaper.tex",
      "filePath": "papers/whitepaper/whitepaper.tex",
      "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/whitepaper.tex",
      "summary": "This code is a LaTeX document that serves as the technical documentation for the Ergo project. Ergo is a platform for creating and executing smart contracts on a blockchain. The document provides an overview of the platform's features and design principles.\n\nThe document is divided into several sections, each of which covers a different aspect of the Ergo platform. The \"social contract\" section describes the platform's governance model, which is designed to ensure that the platform remains decentralized and resistant to censorship. The \"autolykos\" section describes the proof-of-work algorithm used by the Ergo blockchain, which is designed to be memory-hard and resistant to ASIC mining. The \"utxo\" section describes the platform's unspent transaction output model, which is used to track the ownership of assets on the blockchain.\n\nThe document also covers the platform's survivability features, which are designed to ensure that the blockchain remains operational even in the face of attacks or network failures. The \"currency\" section describes the platform's native currency, which is used to pay for transaction fees and to incentivize miners. The \"money\" section describes the platform's approach to creating and managing digital assets, which can be used to represent a wide range of real-world assets.\n\nOverall, this document serves as a comprehensive guide to the Ergo platform, providing developers and users with the information they need to understand how the platform works and how to use it to create and execute smart contracts.",
      "questions": "1. What is the purpose of this code file?\n   - This code file is a LaTeX document for a project called Ergo, which is a platform for contractual money. It includes sections on social contract, consensus algorithm, UTXO model, survivability, currency, and money.\n\n2. What packages and styles are being used in this document?\n   - The document is using several packages including amsmath, graphicx, amssymb, color, hyperref, float, algorithm, and algpseudocode. The bibliography style being used is IEEEtran.\n\n3. Who are the authors of this document and when was it last updated?\n   - The authors of this document are the Ergo Developers and it was last updated on May 14, 2019 (v1.0)."
    }
  ],
  "folders": [],
  "summary": "The Ergo project is a blockchain platform designed for developing decentralized applications, with a focus on financial contracts. The code in this folder provides the technical documentation and implementation details for various aspects of the Ergo platform.\n\nThe `abstract.tex` file provides an overview of the Ergo project, highlighting its key features such as ErgoScript, support for light nodes, survivability approach, and self-amendable protocol. This file serves as a high-level introduction to the project for developers and users.\n\nThe `autolykos.tex` file describes the Autolykos consensus protocol, a unique Proof of Work (PoW) algorithm that is memory-hard and pool-resistant. This file provides the algorithms for block mining and solution verification, which are essential for implementing the Autolykos consensus protocol in the larger project.\n\nThe `compile.sh` file is a shell script that automates the compilation of a LaTeX document (in this case, \"whitepaper.tex\") into a PDF file. This script is useful for maintaining and updating the technical documentation of the Ergo project.\n\nThe `currency.tex` file explains the importance of Ergo's native token, Erg, and its role in ensuring the stability and security of the Ergo platform. This file provides details on the token's emission schedule and initial state, which are crucial for understanding the economics of the Ergo platform.\n\nThe `intro.tex` file serves as an introduction to the Ergo project, discussing the challenges faced by existing blockchain systems and how Ergo aims to address these challenges using the UTXO model.\n\nThe `money.tex` file describes how the Ergo platform enables developers to create custom tokens and flexible, secure financial applications using a domain-specific language. This file provides examples of various applications that can be built on top of the Ergo platform, such as oracles, non-interactive mixing, atomic swaps, and initial coin offerings.\n\nThe `references.bib` file is a collection of citations for various articles, reports, and online resources related to the Ergo project. These citations provide background information, technical details, and examples of how the Ergo project can be used in real-world scenarios.\n\nThe `social_contract.tex` file outlines the main principles that should be followed in the Ergo protocol, referred to as \"Ergo's Social Contract.\" These principles guide the development and use of the protocol, emphasizing decentralization, accessibility, and long-term sustainability.\n\nThe `survivability.tex` file focuses on the resiliency and survivability of the Ergo platform, addressing potential issues such as performance degradation, adaptability to external conditions, and lack of secure trustless light clients.\n\nThe `utxo.tex` file explains the design of the Ergo state, which is used to check new transactions in the Ergo cryptocurrency. The state is represented using one-time coins called boxes, which provide several advantages over Ethereum's long-lived mutable accounts.\n\nThe `whitepaper.tex` file is a comprehensive guide to the Ergo platform, providing developers and users with the information they need to understand how the platform works and how to use it to create and execute smart contracts.\n\nOverall, the code in this folder serves as the technical documentation for the Ergo project, providing developers and users with the information they need to understand the platform's features, design principles, and implementation details.",
  "questions": ""
}