{
  "fileName": "money.tex",
  "filePath": "papers/whitepaper/money.tex",
  "url": "https://github.com/ergoplatform/ergo/papers/whitepaper/money.tex",
  "summary": "The Ergo project provides a platform for developers to create custom tokens and flexible, secure financial applications using a domain-specific language. The platform uses the concept of \"contractual money\" to define Ergs (and secondary tokens) whose usage is bounded by a contract. Ergo applications are defined in terms of protecting scripts built into boxes, which may also contain data involved in the execution.\n\nErgoScript is the high-level language provided with the reference client for writing box protecting conditions. It allows developers to create contracts easily, such as one-out-of-two signatures. The platform also supports data inputs and custom tokens, enabling more complex applications like oracles, non-interactive mixing, atomic swaps, complementary currency, and initial coin offerings.\n\nFor example, an oracle application can use a singleton token for authentication and read-only data inputs to access data stored in other boxes in the state. This simplifies the process of delivering data with one-time boxes. Another example is a non-interactive mixing protocol between two users, which provides privacy by generating two indistinguishable outputs.\n\nErgo also supports more advanced applications like Local Exchange Trading Systems (LETS) and multi-stage contracts, such as Initial Coin Offerings (ICOs). These applications can leverage authenticated AVL+ trees to reduce storage requirements for the state while still providing proofs for tree lookup or modification operations.",
  "questions": "1. **What is the purpose of the \"singleton token\" in the oracle example?**\n\n   The singleton token is used for authentication in the oracle example. It is a custom token with a unique identifier, and its amount is usually one. The oracle creates a box containing this token along with its data (e.g., temperature) and the UNIX epoch time. This approach is simpler and more efficient than using signed data and signature verification for authentication.\n\n2. **How does the non-interactive mixing example provide privacy for Alice and Bob?**\n\n   The non-interactive mixing example provides privacy by creating two indistinguishable output boxes, each of which can only be spent by either Alice or Bob. The protocol uses cryptographic primitives based on the Decision Diffie-Hellman (DDH) problem, making it difficult for an external observer to guess with probability better than 1/2 which output belongs to whom.\n\n3. **What are the main differences between ErgoScript and Bitcoin's Script language?**\n\n   ErgoScript is a high-level language for writing box protecting conditions in Ergo, while Bitcoin's Script is a stack-based language for protecting transaction outputs. ErgoScript allows developers to use logic formulas that combine predicates over a context with cryptographic statements provable via zero-knowledge protocols, using AND, OR, and k-out-of-n connectives. ErgoScript also supports features like data inputs and custom tokens, which are not available in Bitcoin's Script language."
}