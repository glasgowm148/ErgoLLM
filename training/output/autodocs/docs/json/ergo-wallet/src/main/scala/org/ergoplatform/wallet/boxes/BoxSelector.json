{
  "fileName": "BoxSelector.scala",
  "filePath": "ergo-wallet/src/main/scala/org/ergoplatform/wallet/boxes/BoxSelector.scala",
  "url": "https://github.com/ergoplatform/ergo/ergo-wallet/src/main/scala/org/ergoplatform/wallet/boxes/BoxSelector.scala",
  "summary": "The `BoxSelector` trait is an interface that exposes a method to select unspent boxes according to target amounts in Ergo tokens and assets and possible user-defined filter. The interface could have many instantiations implementing different strategies. The trait extends the `ScorexLogging` trait, which provides logging functionality. \n\nThe `BoxSelector` trait has three methods. The first method is `reemissionDataOpt`, which returns re-emission settings if provided. It is used to consider re-emission tokens stored in boxes being spent. The second method is `select`, which is a method that selects boxes to spend in order to collect needed amounts of ergo tokens and assets. The method takes four parameters: `inputBoxes`, `filterFn`, `targetBalance`, and `targetAssets`. `inputBoxes` is an iterator of unspent boxes to choose from. `filterFn` is a user-provided filter function for boxes. From `inputBoxes`, only ones to be chosen for which `filterFn(box)` returns true. `targetBalance` is the ergo balance to be met, and `targetAssets` are the assets balances to be met. The method returns `Left(error)` if `select()` is failing to pick appropriate boxes, otherwise `Right(res)`, where `res` contains boxes to spend as well as monetary values and assets for boxes containing change (wrapped in a special `BoxSelectionResult` class). The third method is an overloaded version of `select` that takes three parameters: `inputBoxes`, `targetBalance`, and `targetAssets`. It calls the first `select` method with `filterFn` set to `_ => true`.\n\nThe `BoxSelector` trait also has two helper methods. The first method is `reemissionAmount`, which is a helper method to get the total amount of re-emission tokens stored in input `boxes`. The method takes a sequence of boxes as input and returns the total amount of re-emission tokens stored in the boxes. The second method is `selectionResultWithEip27Output`, which returns a `BoxSelectionResult` object with an additional pay-to-reemission output made according to EIP-27, if needed. The method takes two parameters: `inputBoxes` and `changeBoxes`. `inputBoxes` is a sequence of boxes to spend, and `changeBoxes` is a sequence of boxes containing change.\n\nThe `BoxSelector` object has three members. The first member is `MinBoxValue`, which is a constant that represents the minimum value of a box. The second member is `ScanDepthFactor`, which is a factor that shows how many inputs selector is going through to optimize inputs. A bigger factor is slowing down inputs selection but minimizing the chance of transaction failure. The third member is `BoxSelectionResult`, which is a container for box selector output. It contains three fields: `inputBoxes`, `changeBoxes`, and `payToReemissionBox`. `inputBoxes` is a sequence of transaction inputs chosen by a selector. `changeBoxes` is a sequence of change outputs. `payToReemissionBox` is a pay-to-reemission output made according to EIP-27, if needed.\n\nThe `BoxSelector` object also has two methods. The first method is `valueOf`, which returns how much ERG can be taken from a box when it is spent. The method takes two parameters: `box` and `reemissionDataOpt`. `box` is a box that may be spent, and `reemissionDataOpt` is re-emission data, if box selector is checking re-emission rules. If no re-emission tokens are there, the method returns the ERG value of the box. Otherwise, it subtracts the amount of re-emission tokens in the box from its ERG value. The second method is `BoxSelectionError`, which is a trait that has one method `message` that returns an error message.",
  "questions": "1. What is the purpose of the `BoxSelector` trait?\n- The `BoxSelector` trait is an interface that exposes a method to select unspent boxes according to target amounts in Ergo tokens and assets and possible user-defined filter. It could have many instantiations implementing different strategies.\n\n2. What is the purpose of the `select` method?\n- The `select` method is a method which is selecting boxes to spend in order to collect needed amounts of ergo tokens and assets. It takes in unspent boxes to choose from, a user-provided filter function for boxes, ergo balance to be met, and assets balances to be met. It returns Left(error) if select() is failing to pick appropriate boxes, otherwise Right(res), where res contains boxes to spend as well as monetary values and assets for boxes containing change.\n\n3. What is the purpose of the `BoxSelectionResult` class?\n- The `BoxSelectionResult` class is a container for box selector output. It contains transaction inputs chosen by a selector, change outputs, and pay-to-reemission output made according to EIP-27, if needed."
}