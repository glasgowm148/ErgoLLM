{
  "folderName": "contracts",
  "folderPath": ".autodoc/docs/json/ergo-wallet/src/main/scala/org/ergoplatform/contracts",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/ergo-wallet/src/main/scala/org/ergoplatform/contracts",
  "files": [
    {
      "fileName": "ReemissionContracts.scala",
      "filePath": "ergo-wallet/src/main/scala/org/ergoplatform/contracts/ReemissionContracts.scala",
      "url": "https://github.com/ergoplatform/ergo/ergo-wallet/src/main/scala/org/ergoplatform/contracts/ReemissionContracts.scala",
      "summary": "The `ReemissionContracts` trait is a container for re-emission related contracts. It contains two contracts: `payToReemission` and `reemissionBoxProp`. The `payToReemission` contract is used to lock boxes that miners pay to the re-emission contract according to EIP-27. The `reemissionBoxProp` contract is used to lock boxes that contain re-emission rewards.\n\nThe `reemissionRewardPerBlock` variable specifies how much a miner can take per block from the re-emission contract. The `reemissionNftIdBytes` method returns the ID of the NFT token associated with the re-emission contract. The `reemissionStartHeight` method returns the height when re-emission starts.\n\nThe `extractTokens` method is a helper method that extracts tokens from a box. The `v1Tree` method is a helper method that produces a v1 tree from a SigmaPropValue instance (i.e. root node of AST).\n\nThe `payToReemission` contract is used to merge multiple boxes locked by this contract with the re-emission box. It is locked by a script that checks that the first (re-emission) output contains the re-emission NFT (in the first position).\n\nThe `reemissionBoxProp` contract is used to lock boxes that contain re-emission rewards. It is locked by a script that checks that the first (re-emission) output contains the re-emission NFT (in the first position), the miner's output has a script which is time-locking reward for miner's pubkey, the re-emission output's height is the same as block height, the re-emission output's height is greater than re-emission input, the height is greater than end of emission (>= 2,080,800 for the mainnet), the re-emission contract is preserved, and the miner's reward condition is met. When the re-emission contract box is merged with other boxes, the script checks that the height is correct, the miner's output is correct, the height is greater than end of emission, the height is increased, the coins issued are correct, and the fee is correct.\n\nOverall, the `ReemissionContracts` trait provides the contracts necessary for re-emission rewards in the Ergo platform. These contracts can be used in the larger project to incentivize miners and promote network security.",
      "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code defines contracts related to re-emission, including a contract for miners to pay to the re-emission contract and a re-emission contract itself. These contracts allow for the distribution of rewards to miners and the management of re-emission tokens.\n\n2. What is the significance of the `reemissionNftIdBytes` and `reemissionStartHeight` variables?\n- `reemissionNftIdBytes` is the ID of the NFT token associated with the re-emission contract, while `reemissionStartHeight` is the height when re-emission starts. These variables are important for ensuring that the correct tokens are being used and that the re-emission process is initiated at the correct time.\n\n3. What are some of the conditions that must be met for the re-emission contract to be valid?\n- Some of the conditions that must be met for the re-emission contract to be valid include: the re-emission output's height must be the same as the block height, the height must be greater than the end of emission, the re-emission contract must be preserved, and the miner's reward condition must be met. Additionally, there are conditions related to merging boxes and the amount of fees that can be charged."
    }
  ],
  "folders": [],
  "summary": "The `ReemissionContracts.scala` file in the `org.ergoplatform.contracts` package is a crucial component of the Ergo platform, as it provides the necessary contracts for re-emission rewards. These contracts incentivize miners and promote network security, which is essential for the overall stability and growth of the Ergo ecosystem.\n\nThe file contains the `ReemissionContracts` trait, which acts as a container for two re-emission related contracts: `payToReemission` and `reemissionBoxProp`. The `payToReemission` contract is used to lock boxes that miners pay to the re-emission contract according to EIP-27. The `reemissionBoxProp` contract is used to lock boxes that contain re-emission rewards.\n\nThe trait also includes several helper methods and variables, such as `reemissionRewardPerBlock`, `reemissionNftIdBytes`, `reemissionStartHeight`, `extractTokens`, and `v1Tree`. These methods and variables are used to facilitate the implementation of the re-emission contracts and ensure their proper functioning.\n\nThe `payToReemission` contract is used to merge multiple boxes locked by this contract with the re-emission box. It is locked by a script that checks that the first (re-emission) output contains the re-emission NFT (in the first position). This contract ensures that the re-emission rewards are correctly distributed to miners.\n\nThe `reemissionBoxProp` contract is used to lock boxes that contain re-emission rewards. It is locked by a script that checks various conditions, such as the presence of the re-emission NFT, the miner's output script, the re-emission output's height, and the miner's reward condition. This contract ensures that the re-emission rewards are securely locked and can only be accessed by miners who meet the specified conditions.\n\nIn the larger Ergo project, these contracts can be used to implement the re-emission rewards mechanism, which is an essential part of the platform's incentive structure. For example, a developer might use the `ReemissionContracts` trait to create a new re-emission contract for a specific mining pool or to update the re-emission reward per block.\n\nHere's a code example of how the `ReemissionContracts` trait might be used:\n\n```scala\nimport org.ergoplatform.contracts.ReemissionContracts\n\nobject MyReemissionContract extends ReemissionContracts {\n  // Customize re-emission reward per block\n  override val reemissionRewardPerBlock: Long = 1000000\n\n  // Create a new payToReemission contract\n  val myPayToReemissionContract = payToReemission\n\n  // Create a new reemissionBoxProp contract\n  val myReemissionBoxPropContract = reemissionBoxProp\n}\n```\n\nIn summary, the `ReemissionContracts.scala` file provides the necessary contracts and helper methods for implementing re-emission rewards in the Ergo platform. These contracts play a vital role in incentivizing miners and promoting network security, making them an essential component of the Ergo ecosystem.",
  "questions": ""
}