{
  "folderName": "mnemonic",
  "folderPath": ".autodoc/docs/json/ergo-wallet/src/main/scala/org/ergoplatform/wallet/mnemonic",
  "url": "https://github.com/ergoplatform/ergo/.autodoc/docs/json/ergo-wallet/src/main/scala/org/ergoplatform/wallet/mnemonic",
  "files": [
    {
      "fileName": "Mnemonic.scala",
      "filePath": "ergo-wallet/src/main/scala/org/ergoplatform/wallet/mnemonic/Mnemonic.scala",
      "url": "https://github.com/ergoplatform/ergo/ergo-wallet/src/main/scala/org/ergoplatform/wallet/mnemonic/Mnemonic.scala",
      "summary": "The `Mnemonic` class in the `org.ergoplatform.wallet.mnemonic` package is responsible for generating and converting BIP39 mnemonic phrases. BIP39 is a standard for generating a sequence of words that can be used as a seed for generating cryptographic keys. The `Mnemonic` class takes two parameters: `languageId` and `strength`. `languageId` is a string that identifies the language to be used in the mnemonic phrase, and `strength` is the number of bits in the seed. \n\nThe `Mnemonic` class has two methods: `generate` and `toMnemonic`. The `generate` method generates a new mnemonic phrase from system randomness. It checks if the `strength` parameter is one of the allowed strengths and returns a `Try[SecretString]` object that contains the generated mnemonic phrase. The `toMnemonic` method generates a new mnemonic phrase from a given entropy. It checks if the length of the entropy is one of the allowed lengths and returns a `Try[SecretString]` object that contains the generated mnemonic phrase.\n\nThe `Mnemonic` object contains several constants and a method called `toSeed`. The `MnemonicSentenceSizes` constant is a sequence of integers that represents the allowed sizes of the mnemonic phrase. The `AllowedStrengths` constant is a sequence of integers that represents the allowed strengths of the seed. The `AllowedEntropyLengths` constant is a sequence of integers that represents the allowed lengths of the entropy. The `BitsGroupSize` constant is an integer that represents the number of bits in each group of the entropy. The `Pbkdf2Algorithm` constant is a string that represents the PBKDF2 algorithm with HMAC-SHA512. The `Pbkdf2Iterations` constant is an integer that represents the number of iterations specified in the BIP39 standard. The `Pbkdf2KeyLength` constant is an integer that represents the length of the key in bits.\n\nThe `toSeed` method takes a `SecretString` object that contains the mnemonic phrase and an optional `SecretString` object that contains the passphrase. It normalizes the mnemonic phrase and passphrase using the NFKD normalization form. It then creates a `PBEKeySpec` object with the normalized mnemonic phrase, normalized passphrase, number of iterations, and key length. It creates a `SecretKeyFactory` object with the PBKDF2 algorithm and generates a secret key from the `PBEKeySpec` object. It returns the encoded secret key as an array of bytes.\n\nOverall, the `Mnemonic` class and object provide functionality for generating and converting BIP39 mnemonic phrases, which can be used as seeds for generating cryptographic keys. The `Mnemonic` class can be used in the larger project to provide a secure and standardized way of generating and converting mnemonic phrases.",
      "questions": "1. What is the purpose of the `Mnemonic` class?\n    \n    The `Mnemonic` class is used to generate and convert BIP39 mnemonic phrases, which are used to derive cryptographic keys from a given entropy.\n\n2. What are the allowed strengths and entropy lengths for a mnemonic phrase?\n    \n    The allowed strengths for a mnemonic phrase are 128, 160, 192, 224, and 256 bits. The allowed entropy lengths are the allowed strengths divided by 8.\n\n3. What algorithm is used to convert a mnemonic phrase to its seed?\n    \n    The `toSeed` method uses the PBKDF2 algorithm with HMAC-SHA512 as the hash function, and a specified number of iterations and key length. It also takes an optional passphrase to use as additional entropy."
    },
    {
      "fileName": "WordList.scala",
      "filePath": "ergo-wallet/src/main/scala/org/ergoplatform/wallet/mnemonic/WordList.scala",
      "url": "https://github.com/ergoplatform/ergo/ergo-wallet/src/main/scala/org/ergoplatform/wallet/mnemonic/WordList.scala",
      "summary": "The code defines a WordList class and an object with methods to load word lists from text files. The WordList class contains a sequence of strings representing words and a delimiter string. The object provides a list of available languages and a method to load a word list for a given language.\n\nThe load method takes a languageId string as input and returns a Try[WordList]. It matches the languageId against a list of available languages and loads the corresponding text file using the resourceLoader method. The loaded file is then parsed into a sequence of strings using the loadFile method and wrapped in a WordList object with the appropriate delimiter.\n\nThe loadFile method takes a function that loads a BufferedSource and returns a Try[Seq[String]]. It loads the BufferedSource using the provided function, reads its lines into a list, and closes the source. If any of these operations fail, it returns a Failure with an appropriate error message.\n\nThe resourceLoader method takes a fileName string and returns a function that loads a BufferedSource. It loads the BufferedSource from a resource file located in the wordlist directory of the classpath using the getClass.getResourceAsStream method and the fileName string. It sets the codec to UTF8 to ensure proper character encoding.\n\nThis code is likely used in the larger project to provide a standardized set of words for generating mnemonic phrases. Mnemonic phrases are used to derive private keys for cryptocurrency wallets and other secure applications. By providing word lists for different languages, the project can support a global user base. The code can be used as follows:\n\n```\nval wordListTry = WordList.load(\"english\")\nwordListTry match {\n  case Success(wordList) => println(wordList.words)\n  case Failure(exception) => println(exception.getMessage)\n}\n```\n\nThis code loads the English word list and prints its words to the console. If the load fails, it prints the error message.",
      "questions": "1. What is the purpose of this code?\n   - This code defines a WordList class and an object with a load method that loads a word list from a file based on a language ID.\n\n2. What languages are supported by this code?\n   - This code supports Chinese (simplified and traditional), English, French, Italian, Japanese, Korean, and Spanish.\n\n3. What format are the word lists expected to be in?\n   - The word lists are expected to be in a text file with one word per line, and the delimiter between words is either a space or a specific Japanese character depending on the language."
    }
  ],
  "folders": [],
  "summary": "The `org.ergoplatform.wallet.mnemonic` package contains two main files: `Mnemonic.scala` and `WordList.scala`. These files provide functionality for generating and converting BIP39 mnemonic phrases, which can be used as seeds for generating cryptographic keys in the Ergo project.\n\n`Mnemonic.scala` defines the `Mnemonic` class, which is responsible for generating and converting mnemonic phrases. It takes two parameters: `languageId` (a string identifying the language to be used in the mnemonic phrase) and `strength` (the number of bits in the seed). The class has two methods: `generate` (generates a new mnemonic phrase from system randomness) and `toMnemonic` (generates a new mnemonic phrase from a given entropy). Both methods return a `Try[SecretString]` object containing the generated mnemonic phrase.\n\nThe `Mnemonic` object contains several constants related to the BIP39 standard and a `toSeed` method, which takes a `SecretString` object containing the mnemonic phrase and an optional `SecretString` object containing the passphrase. It returns the encoded secret key as an array of bytes.\n\n`WordList.scala` defines the `WordList` class and an object with methods to load word lists from text files. The `WordList` class contains a sequence of strings representing words and a delimiter string. The object provides a list of available languages and a method to load a word list for a given language.\n\nThe `load` method takes a `languageId` string as input and returns a `Try[WordList]`. It matches the `languageId` against a list of available languages and loads the corresponding text file using the `resourceLoader` method. The loaded file is then parsed into a sequence of strings using the `loadFile` method and wrapped in a `WordList` object with the appropriate delimiter.\n\nThese files can be used in the larger project to provide a secure and standardized way of generating and converting mnemonic phrases. For example, to generate a new mnemonic phrase in English with a strength of 128 bits, you can use the following code:\n\n```scala\nimport org.ergoplatform.wallet.mnemonic.Mnemonic\n\nval mnemonicTry = Mnemonic(\"english\", 128).generate()\nmnemonicTry match {\n  case Success(mnemonic) => println(mnemonic)\n  case Failure(exception) => println(exception.getMessage)\n}\n```\n\nTo load the English word list and print its words to the console, you can use the following code:\n\n```scala\nimport org.ergoplatform.wallet.mnemonic.WordList\n\nval wordListTry = WordList.load(\"english\")\nwordListTry match {\n  case Success(wordList) => println(wordList.words)\n  case Failure(exception) => println(exception.getMessage)\n}\n```\n\nOverall, the `org.ergoplatform.wallet.mnemonic` package provides functionality for generating and converting BIP39 mnemonic phrases, which can be used as seeds for generating cryptographic keys in the Ergo project.",
  "questions": ""
}